
// by redduke  
// http://bbs.d-programming-language-china.org/thread-794-1-1.html
# Properties styles

# Default
style.props.0=
# Comment
style.props.1=fore:#007F7F,$(font.comment)
# Section
style.props.2=$(colour.string),back:#E0F0F0,eolfilled
# Assignment operator
style.props.3=$(colour.other.operator)
# Default value (@)
style.props.4=$(colour.preproc)
# Key
style.props.5=
# Matched Operators
style.props.34=fore:#FCAF3E,notbold
style.props.35=fore:#FF0000,notbold
comment.block.props=#~
preprocessor.symbol.$(file.patterns.make)=!
preprocessor.start.$(file.patterns.make)=IF IFDEF IFNDEF
preprocessor.middle.$(file.patterns.make)=ELSE ELSEIF ELSEIFDEF ELSEIFNDEF
preprocessor.end.$(file.patterns.make)=ENDIF

# Batch styles

# Default
style.batch.0=fore:#656763
# Comment (rem or ::)
style.batch.1=fore:#007F00,$(font.comment)
# Keywords
style.batch.2=$(colour.keyword),bold
# Label (line beginning with ':')
style.batch.3=$(colour.string),back:#606060,fore:#FFFF00,eolfilled
# Hide command character ('@')
style.batch.4=$(colour.preproc)
# External commands
style.batch.5=fore:#007090,$(font.monospace),bold
# Variable: %%x (x is almost whatever, except space and %), %n (n in [0-9]), %EnvironmentVar%
style.batch.6=fore:#800080
# Operator: * ? < > |
style.batch.7=fore:#656763

comment.block.batch=REM ~

# Makefile styles

# Default
style.makefile.0=fore:#656763
# Comment: #
style.makefile.1=$(colour.other.comment),$(font.code.comment.box)
# Pre-processor or other comment: !
style.makefile.2=$(colour.preproc)
# Variable: $(x)
style.makefile.3=fore:#000080
# Operator
style.makefile.4=$(colour.other.operator)
# Target
style.makefile.5=fore:#A00000
# Error
style.makefile.9=$(colour.error),eolfilled
# Matched Operators
style.makefile.34=fore:#FCAF3E,notbold
style.makefile.35=fore:#FF0000,notbold

comment.block.makefile=#~

# Error list styles

style.errorlist.32=fore:#B06000,$(font.small)
# Default
style.errorlist.0=fore:#656763
# python Error
style.errorlist.1=fore:#FF0000
# gcc Error
style.errorlist.2=fore:#800080
# Microsoft Error
style.errorlist.3=fore:#8AE234
# command or return status
style.errorlist.4=fore:#FCAF3E
# Borland error and warning messages
style.errorlist.5=fore:#B06000
# perl error and warning messages
style.errorlist.6=fore:#FF0000
# .NET tracebacks
style.errorlist.7=fore:#FF0000
# Lua error and warning messages
style.errorlist.8=fore:#FF0000
# ctags
style.errorlist.9=fore:#FF00FF
# diff changed !
style.errorlist.10=fore:#007F00
# diff addition +
style.errorlist.11=fore:#729FCF
# diff deletion -
style.errorlist.12=fore:#007F7F
# diff message ---
style.errorlist.13=fore:#7F0000
# PHP error
style.errorlist.14=fore:#FF0000
# Essential Lahey Fortran 90 error
style.errorlist.15=fore:#FF0000
# Intel Fortran Compiler error
style.errorlist.16=fore:#FF0000
# Intel Fortran Compiler v8.0 error/warning
style.errorlist.17=fore:#FF0000
# Absoft Pro Fortran 90/95 v8.2 error or warning
style.errorlist.18=fore:#FF0000
# HTML Tidy
style.errorlist.19=fore:#FF0000
# Java runtime stack trace
style.errorlist.20=fore:#FF0000
# Ensures that spacing is not affected by line number styles
style.errorlist.33=$(font.small)

# Difference styles

# Default
style.diff.0=fore:#656763
# Comment (part before "diff ..." or "--- ..." and , Only in ..., Binary file...)
style.diff.1=fore:#007F00
# Command (diff ...)
style.diff.2=fore:#7F7F00
# Source file (--- ...) and Destination file (+++ ...)
style.diff.3=fore:#7F0000
# Position setting (@@ ...)
style.diff.4=fore:#7F007F
# Line removal (-...)
style.diff.5=fore:#007F7F
# Line addition (+...)
style.diff.6=fore:#729FCF




# Define SciTE settings for D
# date: October 21, 2007
# author: yidabu  D China : http://www.d-programming-language-china.org/

# *** Specify here your D program directory  ***

file.patterns.d=*.d;*.di;*.apd;*.mdm;*.md
filter.d=D (d)|$(file.patterns.d)|
lexer.$(file.patterns.d)=d

# d语言中文论坛 http://bbs.d-programming-language-china.org/
# 要加上.才能支持std.c.windows这样的自动提示
word.chars.d=.$(chars.alpha)$(chars.numeric)_#
word.characters.$(file.patterns.d)=$(word.chars.d)
calltip.d.word.characters=$(word.chars.d)
api.$(file.patterns.d)=$(SciteDefaultHome)\api\keywords.api;$(SciteDefaultHome)\api\modules.api;$(SciteDefaultHome)\api\d.user.calltips.api;$(SciteDefaultHome)\api\common.api
# author: yidabu  d语言中文论坛 http://bbs.d-programming-language-china.org/
# 不设置自动完成开始字符就不能启用自动完成
autocomplete.d.start.characters=$(word.chars.d)
calltip.d.ignorecase=1
calltip.d.parameters.start=(
calltip.d.parameters.end=)
calltip.d.end.definition=;
calltip.d.parameters.separators=,


# Commands to for Help F1
# 设置F1执行的命令。这是一个非常有用的功能，因为它可以把当前光标所在的词传过去，从而打开特定主题的帮助。就这个功能，就把大多数文本编辑器比下去了
# exe格式帮助文件，subsystem值2；chm帮助文件，subsystem取4; hlp文件subsystem取5
command.help.$(file.patterns.d)=$(CurrentWord)!$(SciteDefaultHome)\dhelp.chm
command.help.subsystem.$(file.patterns.d)=4


# F7 debug build
command.build.$(file.patterns.d)="$(SciteDefaultHome)\ybud" "$(FilePath)" --debug

# Ctrl + F7 release build
command.compile.$(file.patterns.d)="$(SciteDefaultHome)\ybud" "$(FilePath)"

# F5 to run the binary
command.go.$(file.patterns.d)=$(FileName)
command.go.subsystem.$(file.patterns.d)=1


# 02  Ctrl + Alt + F1, search current word in MSDN
command.2.$(file.patterns.d)=http://search.msdn.microsoft.com/search/Default.aspx?brand=msdn&locale=en-us&query=$(CurrentWord)
command.name.2.$(file.patterns.d)=msdn Help
command.subsystem.2.$(file.patterns.d)=2
command.shortcut.2.$(file.patterns.d)=Ctrl+Alt+F1
command.save.before.2.$(file.patterns.d)=1

# 03 build documentation
command.3.$(file.patterns.d)="$(SciteDefaultHome)\ybud" "$(FilePath)" --doc
command.name.3.$(file.patterns.d)=build Doc
command.shortcut.3.$(file.patterns.d)=Ctrl+Alt+Shift+D
command.save.before.3.$(file.patterns.d)=1

# 04 run unittest
command.4.$(file.patterns.d)="$(SciteDefaultHome)\ybud" "$(FilePath)" --test
command.name.4.$(file.patterns.d)=Run unittest
command.shortcut.4.$(file.patterns.d)=Ctrl+Alt+Shift+T
command.save.before.4.$(file.patterns.d)=1

# 05 Ctrl + Alt + F7 minid compile
# command.5.$(file.patterns.d)="$(SciteDefaultHome)\minidc" "$(FilePath)"
# command.name.5.$(file.patterns.d)=minid compile
#command.shortcut.5.$(file.patterns.d)=Ctrl+Alt+F7
#command.save.before.5.$(file.patterns.d)=1

# 06 Ctrl + Alt + F5 minid interpreter
#command.6.$(file.patterns.d)="$(SciteDefaultHome)\mdcl" "$(FilePath)"
#command.name.6.$(file.patterns.d)=minid interpreter
#command.shortcut.6.$(file.patterns.d)=Ctrl+Alt+F5
#command.save.before.6.$(file.patterns.d)=1

# 07 Ctrl + F5 dmd run file.d
command.7.$(file.patterns.d)="$(SciteDefaultHome)\ybud" "$(FilePath)" --run
command.name.7.$(file.patterns.d)=run resulting program
command.shortcut.7.$(file.patterns.d)=Ctrl+F5
command.save.before.7.$(file.patterns.d)=1

# 08 F8 run debug: ddbg binary
command.8.$(file.patterns.d)="ddbg" "-cmd=r" "$(FileName)"
command.name.8.$(file.patterns.d)=debug binary
command.shortcut.8.$(file.patterns.d)=F8
command.save.before.8.$(file.patterns.d)=1

comment.block.at.line.start.d=1
comment.block.d=//~
comment.stream.start.d=/+
comment.stream.end.d=+/
comment.box.start.d=/*
comment.box.middle.d= *
comment.box.end.d= */
#lexer.d.fold.at.else=1


statement.indent.$(file.patterns.d)=6 case catch class debug default do else \
finally for foreach foreach_reverse if private protected public scope struct \
try union while with
statement.lookback.$(file.patterns.d)=20
block.start.$(file.patterns.d)=13 {
block.end.$(file.patterns.d)=13 }

# D keywords
# 自动提示文件位置 d.api是d语言关键词，函数名,d.user.calltips.api是自定义自动提示
#import d.keywords
#keywords4.$(file.patterns.d)=$(d.keywords.functions);$(d.keywords.modules)


# D keywords
keywords.$(file.patterns.d)=abstract alias align asm assert auto body bool break byte case cast \
    catch cdouble cent cfloat char class const continue creal dchar debug default delegate \
    delete deprecated do double else enum export extern false final finally float for foreach \
    foreach_reverse function goto idouble if ifloat import in inout int interface invariant ireal \
    is lazy long macro mixin module new null out override package pragma private protected public \
    real ref return scope short static struct super switch synchronized template this throw true try \
    typedef typeid typeof ubyte ucent uint ulong union unittest ushort version void volatile wchar while with \
    opCall opAssign

# keywords2 are intended for embedded ASM

# keywords3 are intended for doxygen
keywords3.$(file.patterns.d)=a addindex addtogroup anchor arg attention \
author b brief bug c class code date def defgroup deprecated dontinclude \
e em endcode endhtmlonly endif endlatexonly endlink endverbatim enum example exception \
f$ f[ f] file fn hideinitializer htmlinclude htmlonly \
if image include ingroup internal invariant interface latexonly li line link \
mainpage name namespace nosubgrouping note overload \
p page par param post pre ref relates remarks return retval \
sa section see showinitializer since skip skipline struct subsection \
test throw todo typedef union until \
var verbatim verbinclude version warning weakgroup $ @ \ & < > # { }

# keywords4 are intended for syntax driven or custom highlighting



# Font
if PLAT_WIN
  font.base=font:Bitstream Vera Sans Mono,size:10
  font.small=font:Bitstream Vera Sans Mono,size:9
if PLAT_GTK
  font.base=font:!Bitstream Vera Sans Mono,size:8
  font.small=font:!Bitstream Vera Sans Mono,size:7

# Globals
# (Default, Line number, brace highlight, brace incomplete
#  highlight, control characters, indentation guides, calltip)
style.*.32=fore:#BABDB6,back:#1E2426,$(font.base)
style.*.33=fore:#1E2426,back:#9D9E9B,$(font.base)
style.*.34=fore:#6699FF,$(font.base),bold
style.*.35=fore:#FF6699,$(font.base),bold
style.*.36=
style.*.37=fore:#666666,back:#BABDB6,$(font.base)
style.*.38=fore:#BABDB6,back:#2C3032,$(font.base)

# Colors

caret.fore=#BABDB6
caret.line.back=#2C3032
error.marker.fore=#994C4C
error.marker.back=#2C3032
bookmark.fore=#FCAF3E
bookmark.back=#335580
find.mark=#335580
colour.char=fore:#8AE234,bold
colour.comment=fore:#4080C0,bold
colour.definition=fore:#994C4C,bold
colour.error=fore:#994C4C,italics
colour.keyword=fore:#99994D,bold
colour.number=fore:#729FCF
colour.operator=fore:#BABDB6,bold
colour.preproc=fore:#4080C0
colour.string=fore:#8AE234,bold
colour.tag=fore:#729FCF,bold

fold.margin.colour=#BABDB6
fold.margin.highlight.colour=#BABDB6


# Styles

# 0 - whitespace
# 1, 2, 3, 4 - comments:  /* */,  //,  /** */ or /*! */,  /+ +/
# 5 - number
# 6, 7, 8, 9 - keywords: standard, secondary, doc keywords, typedefs and aliases
# 10 - string
# 11 - string not closed
# 12 - char
# 13 - operator
# 14 - identifier
# 15, 16, 17 - Doc comments: line doc /// or //!, doc keyword, doc keyword err

style.d.32=$(font.base)
style.d.0=fore:#808080
style.d.1=fore:#656763,$(font.code.comment.box)
style.d.2=fore:#656763,$(font.code.comment.line)
style.d.3=fore:#656763,$(font.code.comment.doc)
style.d.4=fore:#656763,$(font.code.comment.nested)
style.d.5=$(colour.number)
#style.d.6=$(colour.keyword),bold
style.d.6=fore:#FCAF3E,bold

#style.d.7=$(colour.keyword),bold
style.d.7=fore:#FCAF3E,bold,italics

#style.d.8=$(colour.keyword),bold
style.d.8=fore:#FCAF3E,bold,italics

style.d.9=$(colour.keyword)
style.d.10=$(colour.string)

#style.d.11=fore:#000000,$(font.monospace),back:#E0C0E0,eolfilled
style.d.11=fore:#000000,$(font.monospace)

style.d.12=$(colour.char)
style.d.13=$(colour.operator),bold
style.d.14=
style.d.15=fore:#656763,$(font.code.comment.doc)
style.d.16=fore:#656763,$(font.code.comment.doc)
style.d.17=fore:#656763,$(font.code.comment.doc)
# breaces must be operator style to allow matching
braces.d.style=13



