// DirectX 8 for Visual Basic Type Library
// Version 1.0

/*[uuid("e1211242-8e94-11d1-8808-00c04fc2c603")]*/
module dwin.sys.win32.com.tlb.more.dx8vb;

private import dwin.sys.win32.com.tlb.stdole2;
private import dwin.sys.win32.com.Core;

// Enums

enum CONST_DSETUPFLAGS {
  DSETUP_DDRAWDRV = 0x00000008,
  DSETUP_DSOUNDDRV = 0x00000010,
  DSETUP_DXCORE = 0x00010000,
  DSETUP_DIRECTX = 0x00010018,
  DSETUP_TESTINSTALL = 0x00020000,
}

enum CONST_DSETUPCALLBACKFLAGS {
  DSETUP_CB_MSG_NOMESSAGE = 0x00000000,
  DSETUP_CB_MSG_CANTINSTALL_UNKNOWNOS = 0x00000001,
  DSETUP_CB_MSG_CANTINSTALL_NT = 0x00000002,
  DSETUP_CB_MSG_CANTINSTALL_BETA = 0x00000003,
  DSETUP_CB_MSG_CANTINSTALL_NOTWIN32 = 0x00000004,
  DSETUP_CB_MSG_CANTINSTALL_WRONGLANGUAGE = 0x00000005,
  DSETUP_CB_MSG_CANTINSTALL_WRONGPLATFORM = 0x00000006,
  DSETUP_CB_MSG_PREINSTALL_NT = 0x00000007,
  DSETUP_CB_MSG_NOTPREINSTALLEDONNT = 0x00000008,
  DSETUP_CB_MSG_SETUP_INIT_FAILED = 0x00000009,
  DSETUP_CB_MSG_INTERNAL_ERROR = 0x0000000A,
  DSETUP_CB_MSG_CHECK_DRIVER_UPGRADE = 0x0000000B,
  DSETUP_CB_MSG_OUTOFDISKSPACE = 0x0000000C,
  DSETUP_CB_MSG_BEGIN_INSTALL = 0x0000000D,
  DSETUP_CB_MSG_BEGIN_INSTALL_RUNTIME = 0x0000000E,
  DSETUP_CB_MSG_BEGIN_INSTALL_DRIVERS = 0x0000000F,
  DSETUP_CB_MSG_BEGIN_RESTORE_DRIVERS = 0x00000010,
  DSETUP_CB_MSG_FILECOPYERROR = 0x00000011,
  DSETUP_CB_UPGRADE_TYPE_MASK = 0x0000000F,
  DSETUP_CB_UPGRADE_KEEP = 0x00000001,
  DSETUP_CB_UPGRADE_SAFE = 0x00000002,
  DSETUP_CB_UPGRADE_FORCE = 0x00000004,
  DSETUP_CB_UPGRADE_UNKNOWN = 0x00000008,
  DSETUP_CB_UPGRADE_HASWARNINGS = 0x00000100,
  DSETUP_CB_UPGRADE_CANTBACKUP = 0x00000200,
  DSETUP_CB_UPGRADE_DEVICE_ACTIVE = 0x00000800,
  DSETUP_CB_UPGRADE_DEVICE_DISPLAY = 0x00001000,
  DSETUP_CB_UPGRADE_DEVICE_MEDIA = 0x00002000,
}

enum CONST_DSETUPERR {
  DSETUPERR_SUCCESS_RESTART = 0x00000001,
  DSETUPERR_SUCCESS = 0x00000000,
  DSETUPERR_BADWINDOWSVERSION = 0xFFFFFFFF,
  DSETUPERR_SOURCEFILENOTFOUND = 0xFFFFFFFE,
  DSETUPERR_BADSOURCESIZE = 0xFFFFFFFD,
  DSETUPERR_BADSOURCETIME = 0xFFFFFFFC,
  DSETUPERR_NOCOPY = 0xFFFFFFFB,
  DSETUPERR_OUTOFDISKSPACE = 0xFFFFFFFA,
  DSETUPERR_CANTFINDINF = 0xFFFFFFF9,
  DSETUPERR_CANTFINDDIR = 0xFFFFFFF8,
  DSETUPERR_INTERNAL = 0xFFFFFFF7,
  DSETUPERR_NTWITHNO3D = 0xFFFFFFF6,
  DSETUPERR_UNKNOWNOS = 0xFFFFFFF5,
  DSETUPERR_USERHITCANCEL = 0xFFFFFFF4,
  DSETUPERR_NOTPREINSTALLEDONNT = 0xFFFFFFF3,
}

enum CONST_D3DFORMAT {
  D3DFMT_UNKNOWN = 0x00000000,
  D3DFMT_R8G8B8 = 0x00000014,
  D3DFMT_A8R8G8B8 = 0x00000015,
  D3DFMT_X8R8G8B8 = 0x00000016,
  D3DFMT_R5G6B5 = 0x00000017,
  D3DFMT_X1R5G5B5 = 0x00000018,
  D3DFMT_A1R5G5B5 = 0x00000019,
  D3DFMT_A4R4G4B4 = 0x0000001A,
  D3DFMT_R3G3B2 = 0x0000001B,
  D3DFMT_A8 = 0x0000001C,
  D3DFMT_A8R3G3B2 = 0x0000001D,
  D3DFMT_X4R4G4B4 = 0x0000001E,
  D3DFMT_A8P8 = 0x00000028,
  D3DFMT_P8 = 0x00000029,
  D3DFMT_L8 = 0x00000032,
  D3DFMT_A8L8 = 0x00000033,
  D3DFMT_A4L4 = 0x00000034,
  D3DFMT_V8U8 = 0x0000003C,
  D3DFMT_L6V5U5 = 0x0000003D,
  D3DFMT_X8L8V8U8 = 0x0000003E,
  D3DFMT_Q8W8V8U8 = 0x0000003F,
  D3DFMT_V16U16 = 0x00000040,
  D3DFMT_W11V11U10 = 0x00000041,
  D3DFMT_UYVY = 0x59565955,
  D3DFMT_YUY2 = 0x32595559,
  D3DFMT_DXT1 = 0x31545844,
  D3DFMT_DXT2 = 0x32545844,
  D3DFMT_DXT3 = 0x33545844,
  D3DFMT_DXT4 = 0x34545844,
  D3DFMT_DXT5 = 0x35545844,
  D3DFMT_D16_LOCKABLE = 0x00000046,
  D3DFMT_D32 = 0x00000047,
  D3DFMT_D15S1 = 0x00000049,
  D3DFMT_D24S8 = 0x0000004B,
  D3DFMT_D24X8 = 0x0000004D,
  D3DFMT_D24X4S4 = 0x0000004F,
  D3DFMT_D16 = 0x00000050,
  D3DFMT_VERTEXDATA = 0x00000064,
  D3DFMT_INDEX16 = 0x00000065,
  D3DFMT_INDEX32 = 0x00000066,
  D3DFMT_FORCE_DWORD = 0x7FFFFFFF,
}

enum CONST_D3DDEVTYPE {
  D3DDEVTYPE_HAL = 0x00000001,
  D3DDEVTYPE_REF = 0x00000002,
  D3DDEVTYPE_SW = 0x00000003,
  D3DDEVTYPE_FORCE_DWORD = 0x7FFFFFFF,
}

enum CONST_D3DRESOURCETYPE {
  D3DRTYPE_SURFACE = 0x00000001,
  D3DRTYPE_VOLUME = 0x00000002,
  D3DRTYPE_TEXTURE = 0x00000003,
  D3DRTYPE_VOLUMETEXTURE = 0x00000004,
  D3DRTYPE_CUBETEXTURE = 0x00000005,
  D3DRTYPE_VERTEXBUFFER = 0x00000006,
  D3DRTYPE_INDEXBUFFER = 0x00000007,
  D3DRTYPE_FORCE_DWORD = 0x7FFFFFFF,
}

enum CONST_D3DMULTISAMPLE_TYPE {
  D3DMULTISAMPLE_NONE = 0x00000000,
  D3DMULTISAMPLE_2_SAMPLES = 0x00000002,
  D3DMULTISAMPLE_3_SAMPLES = 0x00000003,
  D3DMULTISAMPLE_4_SAMPLES = 0x00000004,
  D3DMULTISAMPLE_5_SAMPLES = 0x00000005,
  D3DMULTISAMPLE_6_SAMPLES = 0x00000006,
  D3DMULTISAMPLE_7_SAMPLES = 0x00000007,
  D3DMULTISAMPLE_8_SAMPLES = 0x00000008,
  D3DMULTISAMPLE_9_SAMPLES = 0x00000009,
  D3DMULTISAMPLE_10_SAMPLES = 0x0000000A,
  D3DMULTISAMPLE_11_SAMPLES = 0x0000000B,
  D3DMULTISAMPLE_12_SAMPLES = 0x0000000C,
  D3DMULTISAMPLE_13_SAMPLES = 0x0000000D,
  D3DMULTISAMPLE_14_SAMPLES = 0x0000000E,
  D3DMULTISAMPLE_15_SAMPLES = 0x0000000F,
  D3DMULTISAMPLE_16_SAMPLES = 0x00000010,
  D3DMULTISAMPLE_FORCE_DWORD = 0xFFFFFFFF,
}

enum CONST_D3DCREATEFLAGS {
  D3DCREATE_FPU_PRESERVE = 0x00000002,
  D3DCREATE_MULTITHREADED = 0x00000004,
  D3DCREATE_PUREDEVICE = 0x00000010,
  D3DCREATE_SOFTWARE_VERTEXPROCESSING = 0x00000020,
  D3DCREATE_HARDWARE_VERTEXPROCESSING = 0x00000040,
  D3DCREATE_MIXED_VERTEXPROCESSING = 0x00000080,
}

enum CONST_D3DSWAPEFFECT {
  D3DSWAPEFFECT_DISCARD = 0x00000001,
  D3DSWAPEFFECT_FLIP = 0x00000002,
  D3DSWAPEFFECT_COPY = 0x00000003,
  D3DSWAPEFFECT_COPY_VSYNC = 0x00000004,
  D3DSWAPEFFECT_FORCE_DWORD = 0x7FFFFFFF,
}

enum CONST_D3DPOOL {
  D3DPOOL_DEFAULT = 0x00000000,
  D3DPOOL_MANAGED = 0x00000001,
  D3DPOOL_SYSTEMMEM = 0x00000002,
  D3DPOOL_FORCE_DWORD = 0x7FFFFFFF,
}

enum CONST_D3DSCPFLAGS {
  D3DUCURSOR_DEFAULT = 0x00000000,
  D3DUCURSOR_IMMEDIATE_UPDATE = 0x00000001,
}

enum CONST_D3DBACKBUFFERTYPE {
  D3DBACKBUFFER_TYPE_MONO = 0x00000000,
  D3DBACKBUFFER_TYPE_LEFT = 0x00000001,
  D3DBACKBUFFER_TYPE_RIGHT = 0x00000002,
  D3DBACKBUFFER_TYPE_FORCE_DWORD = 0x7FFFFFFF,
}

enum CONST_D3DCUBEMAP_FACES {
  D3DCUBEMAP_FACE_POSITIVE_X = 0x00000000,
  D3DCUBEMAP_FACE_NEGATIVE_X = 0x00000001,
  D3DCUBEMAP_FACE_POSITIVE_Y = 0x00000002,
  D3DCUBEMAP_FACE_NEGATIVE_Y = 0x00000003,
  D3DCUBEMAP_FACE_POSITIVE_Z = 0x00000004,
  D3DCUBEMAP_FACE_NEGATIVE_Z = 0x00000005,
  D3DCUBEMAP_FACE_FORCE_DWORD = 0x7FFFFFFF,
}

enum CONST_D3DCLEARFLAGS {
  D3DCLEAR_TARGET = 0x00000001,
  D3DCLEAR_ZBUFFER = 0x00000002,
  D3DCLEAR_STENCIL = 0x00000004,
  D3DCLEAR_FORCE_DWORD = 0x7FFFFFFF,
}

enum CONST_D3DTRANSFORMSTATETYPE {
  D3DTS_WORLD = 0x00000100,
  D3DTS_VIEW = 0x00000002,
  D3DTS_PROJECTION = 0x00000003,
  D3DTS_WORLD1 = 0x00000101,
  D3DTS_WORLD2 = 0x00000102,
  D3DTS_WORLD3 = 0x00000103,
  D3DTS_TEXTURE0 = 0x00000010,
  D3DTS_TEXTURE1 = 0x00000011,
  D3DTS_TEXTURE2 = 0x00000012,
  D3DTS_TEXTURE3 = 0x00000013,
  D3DTS_TEXTURE4 = 0x00000014,
  D3DTS_TEXTURE5 = 0x00000015,
  D3DTS_TEXTURE6 = 0x00000016,
  D3DTS_TEXTURE7 = 0x00000017,
  D3DTS_FORCE_DWORD = 0x7FFFFFFF,
}

enum CONST_D3DLIGHTTYPE {
  D3DLIGHT_POINT = 0x00000001,
  D3DLIGHT_SPOT = 0x00000002,
  D3DLIGHT_DIRECTIONAL = 0x00000003,
  D3DLIGHT_FORCE_DWORD = 0x7FFFFFFF,
}

enum CONST_D3DRENDERSTATETYPE {
  D3DRS_ZENABLE = 0x00000007,
  D3DRS_FILLMODE = 0x00000008,
  D3DRS_SHADEMODE = 0x00000009,
  D3DRS_LINEPATTERN = 0x0000000A,
  D3DRS_ZWRITEENABLE = 0x0000000E,
  D3DRS_ALPHATESTENABLE = 0x0000000F,
  D3DRS_LASTPIXEL = 0x00000010,
  D3DRS_SRCBLEND = 0x00000013,
  D3DRS_DESTBLEND = 0x00000014,
  D3DRS_CULLMODE = 0x00000016,
  D3DRS_ZFUNC = 0x00000017,
  D3DRS_ALPHAREF = 0x00000018,
  D3DRS_ALPHAFUNC = 0x00000019,
  D3DRS_DITHERENABLE = 0x0000001A,
  D3DRS_ALPHABLENDENABLE = 0x0000001B,
  D3DRS_FOGENABLE = 0x0000001C,
  D3DRS_SPECULARENABLE = 0x0000001D,
  D3DRS_ZVISIBLE = 0x0000001E,
  D3DRS_FOGCOLOR = 0x00000022,
  D3DRS_FOGTABLEMODE = 0x00000023,
  D3DRS_FOGSTART = 0x00000024,
  D3DRS_FOGEND = 0x00000025,
  D3DRS_FOGDENSITY = 0x00000026,
  D3DRS_EDGEANTIALIAS = 0x00000028,
  D3DRS_ZBIAS = 0x0000002F,
  D3DRS_RANGEFOGENABLE = 0x00000030,
  D3DRS_STENCILENABLE = 0x00000034,
  D3DRS_STENCILFAIL = 0x00000035,
  D3DRS_STENCILZFAIL = 0x00000036,
  D3DRS_STENCILPASS = 0x00000037,
  D3DRS_STENCILFUNC = 0x00000038,
  D3DRS_STENCILREF = 0x00000039,
  D3DRS_STENCILMASK = 0x0000003A,
  D3DRS_STENCILWRITEMASK = 0x0000003B,
  D3DRS_TEXTUREFACTOR = 0x0000003C,
  D3DRS_WRAP0 = 0x00000080,
  D3DRS_WRAP1 = 0x00000081,
  D3DRS_WRAP2 = 0x00000082,
  D3DRS_WRAP3 = 0x00000083,
  D3DRS_WRAP4 = 0x00000084,
  D3DRS_WRAP5 = 0x00000085,
  D3DRS_WRAP6 = 0x00000086,
  D3DRS_WRAP7 = 0x00000087,
  D3DRS_CLIPPING = 0x00000088,
  D3DRS_LIGHTING = 0x00000089,
  D3DRS_AMBIENT = 0x0000008B,
  D3DRS_FOGVERTEXMODE = 0x0000008C,
  D3DRS_COLORVERTEX = 0x0000008D,
  D3DRS_LOCALVIEWER = 0x0000008E,
  D3DRS_NORMALIZENORMALS = 0x0000008F,
  D3DRS_DIFFUSEMATERIALSOURCE = 0x00000091,
  D3DRS_SPECULARMATERIALSOURCE = 0x00000092,
  D3DRS_AMBIENTMATERIALSOURCE = 0x00000093,
  D3DRS_EMISSIVEMATERIALSOURCE = 0x00000094,
  D3DRS_VERTEXBLEND = 0x00000097,
  D3DRS_CLIPPLANEENABLE = 0x00000098,
  D3DRS_SOFTWAREVERTEXPROCESSING = 0x00000099,
  D3DRS_POINTSIZE = 0x0000009A,
  D3DRS_POINTSIZE_MIN = 0x0000009B,
  D3DRS_POINTSPRITE_ENABLE = 0x0000009C,
  D3DRS_POINTSCALE_ENABLE = 0x0000009D,
  D3DRS_POINTSCALE_A = 0x0000009E,
  D3DRS_POINTSCALE_B = 0x0000009F,
  D3DRS_POINTSCALE_C = 0x000000A0,
  D3DRS_MULTISAMPLE_ANTIALIAS = 0x000000A1,
  D3DRS_MULTISAMPLE_MASK = 0x000000A2,
  D3DRS_PATCHEDGESTYLE = 0x000000A3,
  D3DRS_PATCHSEGMENTS = 0x000000A4,
  D3DRS_DEBUGMONITORTOKEN = 0x000000A5,
  D3DRS_POINT_SIZE_MAX = 0x000000A6,
  D3DRS_INDEXVERTEXBLENDENABLE = 0x000000A7,
  D3DRS_COLORWRITEENABLE = 0x000000A8,
  D3DRS_TWEENFACTOR = 0x000000AA,
  D3DRS_BLENDOP = 0x000000AB,
  D3DRS_FORCE_DWORD = 0x7FFFFFFF,
}

enum CONST_D3DSTATEBLOCKTYPE {
  D3DSBT_ALL = 0x00000001,
  D3DSBT_PIXELSTATE = 0x00000002,
  D3DSBT_VERTEXSTATE = 0x00000003,
  D3DSBT_FORCE_DWORD = 0xFFFFFFFF,
}

enum CONST_D3DTEXTURESTAGESTATETYPE {
  D3DTSS_COLOROP = 0x00000001,
  D3DTSS_COLORARG1 = 0x00000002,
  D3DTSS_COLORARG2 = 0x00000003,
  D3DTSS_ALPHAOP = 0x00000004,
  D3DTSS_ALPHAARG1 = 0x00000005,
  D3DTSS_ALPHAARG2 = 0x00000006,
  D3DTSS_BUMPENVMAT00 = 0x00000007,
  D3DTSS_BUMPENVMAT01 = 0x00000008,
  D3DTSS_BUMPENVMAT10 = 0x00000009,
  D3DTSS_BUMPENVMAT11 = 0x0000000A,
  D3DTSS_TEXCOORDINDEX = 0x0000000B,
  D3DTSS_ADDRESSU = 0x0000000D,
  D3DTSS_ADDRESSV = 0x0000000E,
  D3DTSS_BORDERCOLOR = 0x0000000F,
  D3DTSS_MAGFILTER = 0x00000010,
  D3DTSS_MINFILTER = 0x00000011,
  D3DTSS_MIPFILTER = 0x00000012,
  D3DTSS_MIPMAPLODBIAS = 0x00000013,
  D3DTSS_MAXMIPLEVEL = 0x00000014,
  D3DTSS_MAXANISOTROPY = 0x00000015,
  D3DTSS_BUMPENVLSCALE = 0x00000016,
  D3DTSS_BUMPENVLOFFSET = 0x00000017,
  D3DTSS_TEXTURETRANSFORMFLAGS = 0x00000018,
  D3DTSS_ADDRESSW = 0x00000019,
  D3DTSS_COLORARG0 = 0x0000001A,
  D3DTSS_ALPHAARG0 = 0x0000001B,
  D3DTSS_RESULTARG = 0x0000001C,
  D3DTSS_FORCE_DWORD = 0x7FFFFFFF,
}

enum CONST_D3DPRIMITIVETYPE {
  D3DPT_POINTLIST = 0x00000001,
  D3DPT_LINELIST = 0x00000002,
  D3DPT_LINESTRIP = 0x00000003,
  D3DPT_TRIANGLELIST = 0x00000004,
  D3DPT_TRIANGLESTRIP = 0x00000005,
  D3DPT_TRIANGLEFAN = 0x00000006,
  D3DPT_FORCE_DWORD = 0x7FFFFFFF,
}

enum CONST_D3DPMISCCAPSFLAGS {
  D3DPMISCCAPS_MASKZ = 0x00000002,
  D3DPMISCCAPS_LINEPATTERNREP = 0x00000004,
  D3DPMISCCAPS_CULLNONE = 0x00000010,
  D3DPMISCCAPS_CULLCW = 0x00000020,
  D3DPMISCCAPS_CULLCCW = 0x00000040,
  D3DPMISCCAPS_COLORWRITEENABLE = 0x00000080,
  D3DPMISCCAPS_CLIPPLANESCALEDPOINTS = 0x00000100,
  D3DPMISCCAPS_CLIPTLVERTS = 0x00000200,
  D3DPMISCCAPS_TSSARGTEMP = 0x00000400,
  D3DPMISCCAPS_BLENDOP = 0x00000800,
}

enum CONST_D3DLINECAPS {
  D3DLINECAPS_TEXTURE = 0x00000001,
  D3DLINECAPS_ZTEST = 0x00000002,
  D3DLINECAPS_BLEND = 0x00000004,
  D3DLINECAPS_ALPHACMP = 0x00000008,
  D3DLINECAPS_FOG = 0x00000010,
}

enum CONST_D3DPRASTERCAPSFLAGS {
  D3DPRASTERCAPS_DITHER = 0x00000001,
  D3DPRASTERCAPS_ROP2 = 0x00000002,
  D3DPRASTERCAPS_XOR = 0x00000004,
  D3DPRASTERCAPS_PAT = 0x00000008,
  D3DPRASTERCAPS_ZTEST = 0x00000010,
  D3DPRASTERCAPS_FOGVERTEX = 0x00000080,
  D3DPRASTERCAPS_FOGTABLE = 0x00000100,
  D3DPRASTERCAPS_ANTIALIASEDGES = 0x00001000,
  D3DPRASTERCAPS_MIPMAPLODBIAS = 0x00002000,
  D3DPRASTERCAPS_ZBIAS = 0x00004000,
  D3DPRASTERCAPS_ZBUFFERLESSHSR = 0x00008000,
  D3DPRASTERCAPS_FOGRANGE = 0x00010000,
  D3DPRASTERCAPS_ANISOTROPY = 0x00020000,
  D3DPRASTERCAPS_WBUFFER = 0x00040000,
  D3DPRASTERCAPS_WFOG = 0x00100000,
  D3DPRASTERCAPS_ZFOG = 0x00200000,
  D3DPRASTERCAPS_COLORPERSPECTIVE = 0x00400000,
  D3DPRASTERCAPS_STRETCHBLTMULTISAMPLE = 0x00800000,
}

enum CONST_D3DPCMPCAPSFLAGS {
  D3DPCMPCAPS_NEVER = 0x00000001,
  D3DPCMPCAPS_LESS = 0x00000002,
  D3DPCMPCAPS_EQUAL = 0x00000004,
  D3DPCMPCAPS_LESSEQUAL = 0x00000008,
  D3DPCMPCAPS_GREATER = 0x00000010,
  D3DPCMPCAPS_NOTEQUAL = 0x00000020,
  D3DPCMPCAPS_GREATEREQUAL = 0x00000040,
  D3DPCMPCAPS_ALWAYS = 0x00000080,
}

enum CONST_D3DPBLENDCAPSFLAGS {
  D3DPBLENDCAPS_ZERO = 0x00000001,
  D3DPBLENDCAPS_ONE = 0x00000002,
  D3DPBLENDCAPS_SRCCOLOR = 0x00000004,
  D3DPBLENDCAPS_INVSRCCOLOR = 0x00000008,
  D3DPBLENDCAPS_SRCALPHA = 0x00000010,
  D3DPBLENDCAPS_INVSRCALPHA = 0x00000020,
  D3DPBLENDCAPS_DESTALPHA = 0x00000040,
  D3DPBLENDCAPS_INVDESTALPHA = 0x00000080,
  D3DPBLENDCAPS_DESTCOLOR = 0x00000100,
  D3DPBLENDCAPS_INVDESTCOLOR = 0x00000200,
  D3DPBLENDCAPS_SRCALPHASAT = 0x00000400,
  D3DPBLENDCAPS_BOTHSRCALPHA = 0x00000800,
  D3DPBLENDCAPS_BOTHINVSRCALPHA = 0x00001000,
}

enum CONST_D3DPSHADECAPSFLAGS {
  D3DPSHADECAPS_COLORGOURAUDRGB = 0x00000008,
  D3DPSHADECAPS_SPECULARGOURAUDRGB = 0x00000200,
  D3DPSHADECAPS_ALPHAGOURAUDBLEND = 0x00004000,
  D3DPSHADECAPS_FOGGOURAUD = 0x00080000,
}

enum CONST_D3DPTEXTURECAPSFLAGS {
  D3DPTEXTURECAPS_PERSPECTIVE = 0x00000001,
  D3DPTEXTURECAPS_POW2 = 0x00000002,
  D3DPTEXTURECAPS_ALPHA = 0x00000004,
  D3DPTEXTURECAPS_SQUAREONLY = 0x00000020,
  D3DPTEXTURECAPS_TEXREPEATNOTSCALEDBYSIZE = 0x00000040,
  D3DPTEXTURECAPS_ALPHAPALETTE = 0x00000080,
  D3DPTEXTURECAPS_NONPOW2CONDITIONAL = 0x00000100,
  D3DPTEXTURECAPS_PROJECTED = 0x00000400,
  D3DPTEXTURECAPS_CUBEMAP = 0x00000800,
  D3DPTEXTURECAPS_VOLUMEMAP = 0x00002000,
  D3DPTEXTURECAPS_MIPMAP = 0x00004000,
  D3DPTEXTURECAPS_MIPVOLUMEMAP = 0x00008000,
  D3DPTEXTURECAPS_MIPCUBEMAP = 0x00010000,
  D3DPTEXTURECAPS_CUBEMAP_POW2 = 0x00020000,
  D3DPTEXTURECAPS_VOLUMEMAP_POW2 = 0x00040000,
}

enum CONST_D3DPTFILTERCAPSFLAGS {
  D3DPTFILTERCAPS_MINFPOINT = 0x00000100,
  D3DPTFILTERCAPS_MINFLINEAR = 0x00000200,
  D3DPTFILTERCAPS_MINFANISOTROPIC = 0x00000400,
  D3DPTFILTERCAPS_MIPFPOINT = 0x00010000,
  D3DPTFILTERCAPS_MIPFLINEAR = 0x00020000,
  D3DPTFILTERCAPS_MAGFPOINT = 0x01000000,
  D3DPTFILTERCAPS_MAGFLINEAR = 0x02000000,
  D3DPTFILTERCAPS_MAGFANISOTROPIC = 0x04000000,
  D3DPTFILTERCAPS_MAGFAFLATCUBIC = 0x08000000,
  D3DPTFILTERCAPS_MAGFGAUSSIANCUBIC = 0x10000000,
}

enum CONST_D3DPTBLENDCAPSFLAGS {
  D3DPTBLENDCAPS_DECAL = 0x00000001,
  D3DPTBLENDCAPS_MODULATE = 0x00000002,
  D3DPTBLENDCAPS_DECALALPHA = 0x00000004,
  D3DPTBLENDCAPS_MODULATEALPHA = 0x00000008,
  D3DPTBLENDCAPS_DECALMASK = 0x00000010,
  D3DPTBLENDCAPS_MODULATEMASK = 0x00000020,
  D3DPTBLENDCAPS_COPY = 0x00000040,
  D3DPTBLENDCAPS_ADD = 0x00000080,
}

enum CONST_D3DPTADDRESSCAPSFLAGS {
  D3DPTADDRESSCAPS_WRAP = 0x00000001,
  D3DPTADDRESSCAPS_MIRROR = 0x00000002,
  D3DPTADDRESSCAPS_CLAMP = 0x00000004,
  D3DPTADDRESSCAPS_BORDER = 0x00000008,
  D3DPTADDRESSCAPS_INDEPENDENTUV = 0x00000010,
  D3DPTADDRESSCAPS_MIRRORONCE = 0x00000020,
}

enum CONST_D3DSTENCILCAPFLAGS {
  D3DSTENCILCAPS_KEEP = 0x00000001,
  D3DSTENCILCAPS_ZERO = 0x00000002,
  D3DSTENCILCAPS_REPLACE = 0x00000004,
  D3DSTENCILCAPS_INCRSAT = 0x00000008,
  D3DSTENCILCAPS_DECRSAT = 0x00000010,
  D3DSTENCILCAPS_INVERT = 0x00000020,
  D3DSTENCILCAPS_INCR = 0x00000040,
  D3DSTENCILCAPS_DECR = 0x00000080,
}

enum CONST_D3DTEXOPCAPSFLAGS {
  D3DTEXOPCAPS_DISABLE = 0x00000001,
  D3DTEXOPCAPS_SELECTARG1 = 0x00000002,
  D3DTEXOPCAPS_SELECTARG2 = 0x00000004,
  D3DTEXOPCAPS_MODULATE = 0x00000008,
  D3DTEXOPCAPS_MODULATE2X = 0x00000010,
  D3DTEXOPCAPS_MODULATE4X = 0x00000020,
  D3DTEXOPCAPS_ADD = 0x00000040,
  D3DTEXOPCAPS_ADDSIGNED = 0x00000080,
  D3DTEXOPCAPS_ADDSIGNED2X = 0x00000100,
  D3DTEXOPCAPS_SUBTRACT = 0x00000200,
  D3DTEXOPCAPS_ADDSMOOTH = 0x00000400,
  D3DTEXOPCAPS_BLENDDIFFUSEALPHA = 0x00000800,
  D3DTEXOPCAPS_BLENDTEXTUREALPHA = 0x00001000,
  D3DTEXOPCAPS_BLENDFACTORALPHA = 0x00002000,
  D3DTEXOPCAPS_BLENDTEXTUREALPHAPM = 0x00004000,
  D3DTEXOPCAPS_BLENDCURRENTALPHA = 0x00008000,
  D3DTEXOPCAPS_PREMODULATE = 0x00010000,
  D3DTEXOPCAPS_MODULATEALPHA_ADDCOLOR = 0x00020000,
  D3DTEXOPCAPS_MODULATECOLOR_ADDALPHA = 0x00040000,
  D3DTEXOPCAPS_MODULATEINVALPHA_ADDCOLOR = 0x00080000,
  D3DTEXOPCAPS_MODULATEINVCOLOR_ADDALPHA = 0x00100000,
  D3DTEXOPCAPS_BUMPENVMAP = 0x00200000,
  D3DTEXOPCAPS_BUMPENVMAPLUMINANCE = 0x00400000,
  D3DTEXOPCAPS_DOTPRODUCT3 = 0x00800000,
  D3DTEXOPCAPS_MULTIPLYADD = 0x01000000,
  D3DTEXOPCAPS_LERP = 0x02000000,
}

enum CONST_D3DFVFCAPSFLAGS {
  D3DFVFCAPS_TEXCOORDCOUNTMASK = 0x0000FFFF,
  D3DFVFCAPS_DONOTSTRIPELEMENTS = 0x00080000,
  D3DFVFCAPS_PSIZE = 0x00100000,
}

enum CONST_D3DCAPSFLAGS {
  D3DCAPS_READ_SCANLINE = 0x00020000,
}

enum CONST_D3DCAPS2FLAGS {
  D3DCAPS2_NO2DDURING3DSCENE = 0x00000002,
  D3DCAPS2_FULLSCREENGAMMA = 0x00020000,
  D3DCAPS2_CANRENDERWINDOWED = 0x00080000,
  D3DCAPS2_CANCALIBRATEGAMMA = 0x00100000,
  D3DCAPS2_RESERVED = 0x02000000,
}

enum CONST_D3DCAPS3FLAGS {
  D3DCAPS3_RESERVED = 0x8000001F,
}

enum CONST_D3DPRESENT_INTERVAL_FLAGS {
  D3DPRESENT_INTERVAL_DEFAULT = 0x00000000,
  D3DPRESENT_INTERVAL_ONE = 0x00000001,
  D3DPRESENT_INTERVAL_TWO = 0x00000002,
  D3DPRESENT_INTERVAL_THREE = 0x00000004,
  D3DPRESENT_INTERVAL_FOUR = 0x00000008,
  D3DPRESENT_INTERVAL_IMMEDIATE = 0x80000000,
}

enum CONST_D3DCURSORCAPSFLAGS {
  D3DCURSORCAPS_COLOR = 0x00000001,
  D3DCURSORCAPS_LOWRES = 0x00000002,
}

enum CONST_D3DDEVCAPSFLAGS {
  D3DDEVCAPS_EXECUTESYSTEMMEMORY = 0x00000010,
  D3DDEVCAPS_EXECUTEVIDEOMEMORY = 0x00000020,
  D3DDEVCAPS_TLVERTEXSYSTEMMEMORY = 0x00000040,
  D3DDEVCAPS_TLVERTEXVIDEOMEMORY = 0x00000080,
  D3DDEVCAPS_TEXTURESYSTEMMEMORY = 0x00000100,
  D3DDEVCAPS_TEXTUREVIDEOMEMORY = 0x00000200,
  D3DDEVCAPS_DRAWPRIMTLVERTEX = 0x00000400,
  D3DDEVCAPS_CANRENDERAFTERFLIP = 0x00000800,
  D3DDEVCAPS_TEXTURENONLOCALVIDMEM = 0x00001000,
  D3DDEVCAPS_DRAWPRIMITIVES2 = 0x00002000,
  D3DDEVCAPS_SEPARATETEXTUREMEMORIES = 0x00004000,
  D3DDEVCAPS_DRAWPRIMITIVES2EX = 0x00008000,
  D3DDEVCAPS_HWTRANSFORMANDLIGHT = 0x00010000,
  D3DDEVCAPS_CANBLTSYSTONONLOCAL = 0x00020000,
  D3DDEVCAPS_HWRASTERIZATION = 0x00080000,
  D3DDEVCAPS_PUREDEVICE = 0x00100000,
  D3DDEVCAPS_QUINTICRTPATCHES = 0x00200000,
  D3DDEVCAPS_RTPATCHES = 0x00400000,
  D3DDEVCAPS_RTPATCHHANDLEZERO = 0x00800000,
  D3DDEVCAPS_NPATCHES = 0x01000000,
}

enum CONST_D3DVTXPCAPSFLAGS {
  D3DVTXPCAPS_TEXGEN = 0x00000001,
  D3DVTXPCAPS_MATERIALSOURCE7 = 0x00000002,
  D3DVTXPCAPS_DIRECTIONALLIGHTS = 0x00000008,
  D3DVTXPCAPS_POSITIONALLIGHTS = 0x00000010,
  D3DVTXPCAPS_LOCALVIEWER = 0x00000020,
  D3DVTXPCAPS_TWEENING = 0x00000040,
  D3DVTXPCAPS_NO_VSDT_UBYTE4 = 0x00000080,
}

enum CONST_D3DCLIPPLANEFLAGS {
  D3DCLIPPLANE0 = 0x00000001,
  D3DCLIPPLANE1 = 0x00000002,
  D3DCLIPPLANE2 = 0x00000004,
  D3DCLIPPLANE3 = 0x00000008,
  D3DCLIPPLANE4 = 0x00000010,
  D3DCLIPPLANE5 = 0x00000020,
}

enum CONST_D3DCLIPFLAGS {
  D3DCS_LEFT = 0x00000001,
  D3DCS_RIGHT = 0x00000002,
  D3DCS_TOP = 0x00000004,
  D3DCS_BOTTOM = 0x00000008,
  D3DCS_FRONT = 0x00000010,
  D3DCS_BACK = 0x00000020,
  D3DCS_PLANE0 = 0x00000040,
  D3DCS_PLANE1 = 0x00000080,
  D3DCS_PLANE2 = 0x00000100,
  D3DCS_PLANE3 = 0x00000200,
  D3DCS_PLANE4 = 0x00000400,
  D3DCS_PLANE5 = 0x00000800,
  D3DCS_ALL = 0x00000FFF,
}

enum CONST_D3DCSFLAGS {
  D3DCS_STATUS = 0x00000001,
  D3DCS_EXTENTS2 = 0x00000002,
  D3DCS_EXTENTS3 = 0x00000004,
}

enum CONST_D3DSHADEMODE {
  D3DSHADE_FLAT = 0x00000001,
  D3DSHADE_GOURAUD = 0x00000002,
  D3DSHADE_PHONG = 0x00000003,
  D3DSHADE_FORCE_DWORD = 0x7FFFFFFF,
}

enum CONST_D3DFILLMODE {
  D3DFILL_POINT = 0x00000001,
  D3DFILL_WIREFRAME = 0x00000002,
  D3DFILL_SOLID = 0x00000003,
  D3DFILL_FORCE_DWORD = 0x7FFFFFFF,
}

enum CONST_D3DBLEND {
  D3DBLEND_ZERO = 0x00000001,
  D3DBLEND_ONE = 0x00000002,
  D3DBLEND_SRCCOLOR = 0x00000003,
  D3DBLEND_INVSRCCOLOR = 0x00000004,
  D3DBLEND_SRCALPHA = 0x00000005,
  D3DBLEND_INVSRCALPHA = 0x00000006,
  D3DBLEND_DESTALPHA = 0x00000007,
  D3DBLEND_INVDESTALPHA = 0x00000008,
  D3DBLEND_DESTCOLOR = 0x00000009,
  D3DBLEND_INVDESTCOLOR = 0x0000000A,
  D3DBLEND_SRCALPHASAT = 0x0000000B,
  D3DBLEND_BOTHSRCALPHA = 0x0000000C,
  D3DBLEND_BOTHINVSRCALPHA = 0x0000000D,
  D3DBLEND_FORCE_DWORD = 0x7FFFFFFF,
}

enum CONST_D3DTEXTUREADDRESS {
  D3DTADDRESS_WRAP = 0x00000001,
  D3DTADDRESS_MIRROR = 0x00000002,
  D3DTADDRESS_CLAMP = 0x00000003,
  D3DTADDRESS_BORDER = 0x00000004,
  D3DTADDRESS_MIRRORONCE = 0x00000005,
  D3DTADDRESS_FORCE_DWORD = 0x7FFFFFFF,
}

enum CONST_D3DCULL {
  D3DCULL_NONE = 0x00000001,
  D3DCULL_CW = 0x00000002,
  D3DCULL_CCW = 0x00000003,
  D3DCULL_FORCE_DWORD = 0x7FFFFFFF,
}

enum CONST_D3DCMPFUNC {
  D3DCMP_NEVER = 0x00000001,
  D3DCMP_LESS = 0x00000002,
  D3DCMP_EQUAL = 0x00000003,
  D3DCMP_LESSEQUAL = 0x00000004,
  D3DCMP_GREATER = 0x00000005,
  D3DCMP_NOTEQUAL = 0x00000006,
  D3DCMP_GREATEREQUAL = 0x00000007,
  D3DCMP_ALWAYS = 0x00000008,
  D3DCMP_FORCE_DWORD = 0x7FFFFFFF,
}

enum CONST_D3DSTENCILOP {
  D3DSTENCILOP_KEEP = 0x00000001,
  D3DSTENCILOP_ZERO = 0x00000002,
  D3DSTENCILOP_REPLACE = 0x00000003,
  D3DSTENCILOP_INCRSAT = 0x00000004,
  D3DSTENCILOP_DECRSAT = 0x00000005,
  D3DSTENCILOP_INVERT = 0x00000006,
  D3DSTENCILOP_INCR = 0x00000007,
  D3DSTENCILOP_DECR = 0x00000008,
  D3DSTENCILOP_FORCE_DWORD = 0x7FFFFFFF,
}

enum CONST_D3DFOGMODE {
  D3DFOG_NONE = 0x00000000,
  D3DFOG_EXP = 0x00000001,
  D3DFOG_EXP2 = 0x00000002,
  D3DFOG_LINEAR = 0x00000003,
  D3DFOG_FORCE_DWORD = 0x7FFFFFFF,
}

enum CONST_D3DZBUFFERTYPE {
  D3DZB_FALSE = 0x00000000,
  D3DZB_TRUE = 0x00000001,
  D3DZB_USEW = 0x00000002,
  D3DZB_FORCE_DWORD = 0x7FFFFFFF,
}

enum CONST_D3DMATERIALCOLORSOURCE {
  D3DMCS_MATERIAL = 0x00000000,
  D3DMCS_COLOR1 = 0x00000001,
  D3DMCS_COLOR2 = 0x00000002,
  D3DMCS_FORCE_DWORD = 0x7FFFFFFF,
}

enum CONST_D3DCOLORWRITEENABLEFLAGS {
  D3DCOLORWRITEENABLE_RED = 0x00000001,
  D3DCOLORWRITEENABLE_GREEN = 0x00000002,
  D3DCOLORWRITEENABLE_BLUE = 0x00000004,
  D3DCOLORWRITEENABLE_ALPHA = 0x00000008,
}

enum CONST_D3DWRAPBIAS {
  D3DRENDERSTATE_WRAPBIAS = 0x00000080,
}

enum CONST_D3DWRAPFLAGS {
  D3DWRAP_U = 0x00000001,
  D3DWRAP_V = 0x00000002,
  D3DWRAP_W = 0x00000004,
  D3DWRAPCOORD_0 = 0x00000001,
  D3DWRAPCOORD_1 = 0x00000002,
  D3DWRAPCOORD_2 = 0x00000004,
  D3DWRAPCOORD_3 = 0x00000008,
}

enum CONST_D3DTSS_TCI_FLAGS {
  D3DTSS_TCI_PASSTHRU = 0x00000000,
  D3DTSS_TCI_CAMERASPACENORMAL = 0x00010000,
  D3DTSS_TCI_CAMERASPACEPOSITION = 0x00020000,
  D3DTSS_TCI_CAMERASPACEREFLECTIONVECTOR = 0x00030000,
}

enum CONST_D3DTEXTUREOP {
  D3DTOP_DISABLE = 0x00000001,
  D3DTOP_SELECTARG1 = 0x00000002,
  D3DTOP_SELECTARG2 = 0x00000003,
  D3DTOP_MODULATE = 0x00000004,
  D3DTOP_MODULATE2X = 0x00000005,
  D3DTOP_MODULATE4X = 0x00000006,
  D3DTOP_ADD = 0x00000007,
  D3DTOP_ADDSIGNED = 0x00000008,
  D3DTOP_ADDSIGNED2X = 0x00000009,
  D3DTOP_SUBTRACT = 0x0000000A,
  D3DTOP_ADDSMOOTH = 0x0000000B,
  D3DTOP_BLENDDIFFUSEALPHA = 0x0000000C,
  D3DTOP_BLENDTEXTUREALPHA = 0x0000000D,
  D3DTOP_BLENDFACTORALPHA = 0x0000000E,
  D3DTOP_BLENDTEXTUREALPHAPM = 0x0000000F,
  D3DTOP_BLENDCURRENTALPHA = 0x00000010,
  D3DTOP_PREMODULATE = 0x00000011,
  D3DTOP_MODULATEALPHA_ADDCOLOR = 0x00000012,
  D3DTOP_MODULATECOLOR_ADDALPHA = 0x00000013,
  D3DTOP_MODULATEINVALPHA_ADDCOLOR = 0x00000014,
  D3DTOP_MODULATEINVCOLOR_ADDALPHA = 0x00000015,
  D3DTOP_BUMPENVMAP = 0x00000016,
  D3DTOP_BUMPENVMAPLUMINANCE = 0x00000017,
  D3DTOP_DOTPRODUCT3 = 0x00000018,
  D3DTOP_MULTIPLYADD = 0x00000019,
  D3DTOP_LERP = 0x0000001A,
  D3DTOP_FORCE_DWORD = 0x7FFFFFFF,
}

enum CONST_D3DTAFLAGS {
  D3DTA_SELECTMASK = 0x0000000F,
  D3DTA_DIFFUSE = 0x00000000,
  D3DTA_CURRENT = 0x00000001,
  D3DTA_TEXTURE = 0x00000002,
  D3DTA_TFACTOR = 0x00000003,
  D3DTA_SPECULAR = 0x00000004,
  D3DTA_TEMP = 0x00000005,
  D3DTA_COMPLEMENT = 0x00000010,
  D3DTA_ALPHAREPLICATE = 0x00000020,
}

enum CONST_D3DTEXTUREFILTERTYPE {
  D3DTEXF_NONE = 0x00000000,
  D3DTEXF_POINT = 0x00000001,
  D3DTEXF_LINEAR = 0x00000002,
  D3DTEXF_ANISOTROPIC = 0x00000003,
  D3DTEXF_FLATCUBIC = 0x00000004,
  D3DTEXF_GAUSSIANCUBIC = 0x00000005,
  D3DTFG_FORCE_DWORD = 0x7FFFFFFF,
}

enum CONST_D3DFVFFLAGS {
  D3DFVF_VERTEX = 0x00000112,
  D3DFVF_RESERVED0 = 0x00000001,
  D3DFVF_POSITION_MASK = 0x0000000E,
  D3DFVF_XYZ = 0x00000002,
  D3DFVF_XYZRHW = 0x00000004,
  D3DFVF_XYZB1 = 0x00000006,
  D3DFVF_XYZB2 = 0x00000008,
  D3DFVF_XYZB3 = 0x0000000A,
  D3DFVF_XYZB4 = 0x0000000C,
  D3DFVF_XYZB5 = 0x0000000E,
  D3DFVF_NORMAL = 0x00000010,
  D3DFVF_PSIZE = 0x00000020,
  D3DFVF_DIFFUSE = 0x00000040,
  D3DFVF_SPECULAR = 0x00000080,
  D3DFVF_TEXCOUNT_MASK = 0x00000F00,
  D3DFVF_TEXCOUNT_SHIFT = 0x00000008,
  D3DFVF_TEX0 = 0x00000000,
  D3DFVF_TEX1 = 0x00000100,
  D3DFVF_TEX2 = 0x00000200,
  D3DFVF_TEX3 = 0x00000300,
  D3DFVF_TEX4 = 0x00000400,
  D3DFVF_TEX5 = 0x00000500,
  D3DFVF_TEX6 = 0x00000600,
  D3DFVF_TEX7 = 0x00000700,
  D3DFVF_TEX8 = 0x00000800,
  D3DFVF_LASTBETA_UBYTE4 = 0x00001000,
  D3DFVF_RESERVED2 = 0x0000E000,
}

enum CONST_D3DBASISTYPE {
  D3DBASIS_BEZIER = 0x00000000,
  D3DBASIS_BSPLINE = 0x00000001,
  D3DBASIS_INTERPOLATE = 0x00000002,
}

enum CONST_D3DORDERTYPE {
  D3DORDER_LINEAR = 0x00000001,
  D3DORDER_CUBIC = 0x00000003,
  D3DORDER_QUINTIC = 0x00000005,
}

enum CONST_D3DPATCHEDGESTYLE {
  D3DPATCHEDGE_DISCRETE = 0x00000000,
  D3DPATCHEDGE_CONTINUOUS = 0x00000001,
}

enum CONST_D3DDEVINFOIDFLAGS {
  D3DDEVINFOID_TEXTUREMANAGER = 0x00000001,
  D3DDEVINFOID_D3DTEXTUREMANAGER = 0x00000002,
  D3DDEVINFOID_TEXTURING = 0x00000003,
}

enum CONST_D3DVERTEXBLENDFLAGS {
  D3DVBF_DISABLE = 0x00000000,
  D3DVBF_1WEIGHT = 0x00000001,
  D3DVBF_2WEIGHTS = 0x00000002,
  D3DVBF = 0x00000003,
  D3DVBF_TWEENING = 0x000000FF,
  D3DVBF_0WEIGHT = 0x00000100,
}

enum CONST_D3DTEXTURETRANSFORMFLAGS {
  D3DTTFF_DISABLE = 0x00000000,
  D3DTTFF_COUNT1 = 0x00000001,
  D3DTTFF_COUNT2 = 0x00000002,
  D3DTTFF_COUNT3 = 0x00000003,
  D3DTTFF_COUNT4 = 0x00000004,
  D3DTTFF_PROJECTED = 0x00000100,
  D3DTTFF_FORCE_DWORD = 0x7FFFFFFF,
}

enum CONST_D3DFVFTEXTUREFORMATS {
  D3DFVF_TEXTUREFORMAT2 = 0x00000000,
  D3DFVF_TEXTUREFORMAT1 = 0x00000003,
  D3DFVF_TEXTUREFORMAT3 = 0x00000001,
  D3DFVF_TEXTUREFORMAT4 = 0x00000002,
  D3DFVF_TEXCOORDSIZE1_0 = 0x00030000,
  D3DFVF_TEXCOORDSIZE1_1 = 0x000C0000,
  D3DFVF_TEXCOORDSIZE1_2 = 0x00300000,
  D3DFVF_TEXCOORDSIZE1_3 = 0x00C00000,
  D3DFVF_TEXCOORDSIZE2_0 = 0x00000000,
  D3DFVF_TEXCOORDSIZE2_1 = 0x00000000,
  D3DFVF_TEXCOORDSIZE2_2 = 0x00000000,
  D3DFVF_TEXCOORDSIZE2_3 = 0x00000000,
  D3DFVF_TEXCOORDSIZE3_0 = 0x00010000,
  D3DFVF_TEXCOORDSIZE3_1 = 0x00040000,
  D3DFVF_TEXCOORDSIZE3_2 = 0x00100000,
  D3DFVF_TEXCOORDSIZE3_3 = 0x00400000,
  D3DFVF_TEXCOORDSIZE4_0 = 0x00020000,
  D3DFVF_TEXCOORDSIZE4_1 = 0x00080000,
  D3DFVF_TEXCOORDSIZE4_2 = 0x00200000,
  D3DFVF_TEXCOORDSIZE4_3 = 0x00800000,
}

enum CONST_D3D_POOL {
  D3D_POOL_LOCALVIDMEM = 0x00000001,
  D3D_POOL_NONLOCALVIDMEM = 0x00000002,
  D3D_POOL_SYSTEMMEM = 0x00000003,
  D3D_POOL_USERALLOCATED = 0x00000004,
  D3D_POOL_D3DMANAGED = 0x00000005,
  D3D_POOL_MANAGED = 0x00000006,
  D3D_POOL_FORCE_DWORD = 0xFFFFFFFF,
}

enum CONST_D3DPRESENT_RATE_FLAGS {
  D3DPRESENT_RATE_DEFAULT = 0x00000000,
  D3DPRESENT_RATE_UNLIMITED = 0x7FFFFFFF,
}

enum CONST_D3DUSAGEFLAGS {
  D3DUSAGE_RENDERTARGET = 0x00000001,
  D3DUSAGE_DEPTHSTENCIL = 0x00000002,
  D3DUSAGE_WRITEONLY = 0x00000008,
  D3DUSAGE_SOFTWAREPROCESSING = 0x00000010,
  D3DUSAGE_DONOTCLIP = 0x00000020,
  D3DUSAGE_POINTS = 0x00000040,
  D3DUSAGE_RTPATCHES = 0x00000080,
  D3DUSAGE_NPATCHES = 0x00000100,
  D3DUSAGE_DYNAMIC = 0x00000200,
  D3DUSAGE_FORCE_DWORD = 0x7FFFFFFF,
}

enum CONST_D3DLOCKFLAGS {
  D3DLOCK_READONLY = 0x00000010,
  D3DLOCK_DISCARD = 0x00002000,
  D3DLOCK_NOOVERWRITE = 0x00001000,
  D3DLOCK_NOSYSLOCK = 0x00000800,
  D3DLOCK_NO_DIRTY_UPDATE = 0x00008000,
}

enum CONST_D3DERR {
  D3DERR_WRONGTEXTUREFORMAT = 0x88760818,
  D3DERR_UNSUPPORTEDCOLOROPERATION = 0x88760819,
  D3DERR_UNSUPPORTEDCOLORARG = 0x8876081A,
  D3DERR_UNSUPPORTEDALPHAOPERATION = 0x8876081B,
  D3DERR_UNSUPPORTEDALPHAARG = 0x8876081C,
  D3DERR_TOOMANYOPERATIONS = 0x8876081D,
  D3DERR_CONFLICTINGTEXTUREFILTER = 0x8876081E,
  D3DERR_UNSUPPORTEDFACTORVALUE = 0x8876081F,
  D3DERR_CONFLICTINGRENDERSTATE = 0x88760821,
  D3DERR_UNSUPPORTEDTEXTUREFILTER = 0x88760822,
  D3DERR_CONFLICTINGTEXTUREPALETTE = 0x88760826,
  D3DERR_DRIVERINTERNALERROR = 0x88760827,
  D3DERR_NOTFOUND = 0x88760866,
  D3DERR_MOREDATA = 0x88760867,
  D3DERR_DEVICELOST = 0x88760868,
  D3DERR_DEVICENOTRESET = 0x88760869,
  D3DERR_NOTAVAILABLE = 0x8876086A,
  D3DERR_OUTOFVIDEOMEMORY = 0x8876017C,
  D3DERR_INVALIDDEVICE = 0x8876086B,
  D3DERR_INVALIDCALL = 0x8876086C,
  D3DERR_DRIVERINVALIDCALL = 0x8876086D,
}

enum CONST_D3DSPDFLAGS {
  D3DSPD_IUNKNOWN = 0x00000001,
}

enum CONST_D3DCONST {
  D3DCURRENT_DISPLAY_MODE = 0x00EFFFFF,
  D3DENUM_NO_WHQL_LEVEL = 0x00000002,
  D3DADAPTER_DEFAULT = 0x00000000,
  D3DPRESENT_BACK_BUFFERS_MAX = 0x00000003,
  D3DMAXNUMVERTICES = 0x0000FFFF,
  D3DMAXNUMPRIMITIVES = 0x0000FFFF,
  D3DPV_DONOTCOPYDATA = 0x00000001,
  VALID_D3DENUM_FLAGS = 0x00000003,
  D3DCURSOR_IMMEDIATE_UPDATE = 0x00000001,
  D3DPRESENTFLAG_LOCKABLE_BACKBUFFER = 0x00000001,
  D3D_OK = 0x00000000,
  D3DMAXUSERCLIPPLANES = 0x00000020,
}

enum CONST_D3DBLENDOP {
  D3DBLENDOP_ADD = 0x00000001,
  D3DBLENDOP_SUBTRACT = 0x00000002,
  D3DBLENDOP_REVSUBTRACT = 0x00000003,
  D3DBLENDOP_MIN = 0x00000004,
  D3DBLENDOP_MAX = 0x00000005,
  D3DBLENDOP_FORCE_DWORD = 0x7FFFFFFF,
}

enum CONST_D3DSGRFLAGS {
  D3DSGR_NO_CALIBRATION = 0x00000000,
  D3DSGR_CALIBRATE = 0x00000001,
}

enum CONST_D3D_TYPE {
  D3D_TYPE_SURFACE = 0x00000001,
  D3D_TYPE_VOLUME = 0x00000002,
  D3D_TYPE_MIPMAP = 0x00000003,
  D3D_TYPE_MIPVOLUME = 0x00000004,
  D3D_TYPE_CUBEMAP = 0x00000005,
  D3D_TYPE_VERTEXBUFFER = 0x00000006,
  D3D_TYPE_OPTIMIZEDVERTEXBUFFER = 0x00000007,
  D3D_TYPE_INDEXBUFFER = 0x00000008,
  D3D_TYPE_FORCE_DWORD = 0x7FFFFFFF,
}

enum CONST_D3DDEBUGMONITORTOKENS {
  D3DDMT_ENABLE = 0x00000000,
  D3DDMT_DISABLE = 0x00000001,
  D3DDMT_FORCEDWORD = 0x7FFFFFFF,
}

enum CONST_DSBCAPSFLAGS {
  DSBCAPS_PRIMARYBUFFER = 0x00000001,
  DSBCAPS_STATIC = 0x00000002,
  DSBCAPS_LOCHARDWARE = 0x00000004,
  DSBCAPS_LOCSOFTWARE = 0x00000008,
  DSBCAPS_CTRL3D = 0x00000010,
  DSBCAPS_CTRLFREQUENCY = 0x00000020,
  DSBCAPS_CTRLPAN = 0x00000040,
  DSBCAPS_CTRLVOLUME = 0x00000080,
  DSBCAPS_CTRLPOSITIONNOTIFY = 0x00000100,
  DSBCAPS_CTRLFX = 0x00000200,
  DSBCAPS_CTRLCHANNELVOLUME = 0x00000400,
  DSBCAPS_STICKYFOCUS = 0x00004000,
  DSBCAPS_GLOBALFOCUS = 0x00008000,
  DSBCAPS_GETCURRENTPOSITION2 = 0x00010000,
  DSBCAPS_MUTE3DATMAXDISTANCE = 0x00020000,
  DSBCAPS_LOCDEFER = 0x00040000,
}

enum CONST_DS3DMODEFLAGS {
  DS3DMODE_NORMAL = 0x00000000,
  DS3DMODE_HEADRELATIVE = 0x00000001,
  DS3DMODE_DISABLE = 0x00000002,
}

enum CONST_DS3DAPPLYFLAGS {
  DS3D_IMMEDIATE = 0x00000000,
  DS3D_DEFERRED = 0x00000001,
}

enum CONST_DSBSTATUSFLAGS {
  DSBSTATUS_PLAYING = 0x00000001,
  DSBSTATUS_BUFFERLOST = 0x00000002,
  DSBSTATUS_LOOPING = 0x00000004,
  DSBSTATUS_LOCHARDWARE = 0x00000008,
  DSBSTATUS_LOCSOFTWARE = 0x00000010,
  DSBSTATUS_TERMINATED = 0x00000020,
}

enum CONST_DSBLOCKFLAGS {
  DSBLOCK_DEFAULT = 0x00000000,
  DSBLOCK_FROMWRITECURSOR = 0x00000001,
  DSBLOCK_ENTIREBUFFER = 0x00000002,
}

enum CONST_DSBPLAYFLAGS {
  DSBPLAY_DEFAULT = 0x00000000,
  DSBPLAY_LOOPING = 0x00000001,
  DSBPLAY_LOCHARDWARE = 0x00000002,
  DSBPLAY_LOCSOFTWARE = 0x00000004,
  DSBPLAY_TERMINATEBY_TIME = 0x00000008,
  DSBPLAY_TERMINATEBY_DISTANCE = 0x00000010,
  DSBPLAY_TERMINATEBY_PRIORITY = 0x00000020,
}

enum CONST_DSCAPSFLAGS {
  DSCAPS_PRIMARYMONO = 0x00000001,
  DSCAPS_PRIMARYSTEREO = 0x00000002,
  DSCAPS_PRIMARY8BIT = 0x00000004,
  DSCAPS_PRIMARY16BIT = 0x00000008,
  DSCAPS_CONTINUOUSRATE = 0x00000010,
  DSCAPS_EMULDRIVER = 0x00000020,
  DSCAPS_CERTIFIED = 0x00000040,
  DSCAPS_SECONDARYMONO = 0x00000100,
  DSCAPS_SECONDARYSTEREO = 0x00000200,
  DSCAPS_SECONDARY8BIT = 0x00000400,
  DSCAPS_SECONDARY16BIT = 0x00000800,
}

enum CONST_DSSCLFLAGS {
  DSSCL_NORMAL = 0x00000001,
  DSSCL_PRIORITY = 0x00000002,
  DSSCL_WRITEPRIMARY = 0x00000004,
}

enum CONST_DSSPEAKERFLAGS {
  DSSPEAKER_HEADPHONE = 0x00000001,
  DSSPEAKER_MONO = 0x00000002,
  DSSPEAKER_QUAD = 0x00000003,
  DSSPEAKER_STEREO = 0x00000004,
  DSSPEAKER_SURROUND = 0x00000005,
  DSSPEAKER_GEOMETRY_MIN = 0x00000005,
  DSSPEAKER_GEOMETRY_NARROW = 0x0000000A,
  DSSPEAKER_GEOMETRY_WIDE = 0x00000014,
  DSSPEAKER_GEOMETRY_MAX = 0x000000B4,
}

enum CONST_DSCBCAPSFLAGS {
  DSCBCAPS_DEFAULT = 0x00000000,
  DSCBCAPS_WAVEMAPPED = 0x80000000,
}

enum CONST_DSCBSTATUSFLAGS {
  DSCBSTATUS_CAPTURING = 0x00000001,
  DSCBSTATUS_LOOPING = 0x00000002,
}

enum CONST_DSCBSTARTFLAGS {
  DSCBSTART_DEFAULT = 0x00000000,
  DSCBSTART_LOOPING = 0x00000001,
}

enum CONST_DSCBLOCKFLAGS {
  DSCBLOCK_DEFAULT = 0x00000000,
  DSCBLOCK_ENTIREBUFFER = 0x00000001,
}

enum CONST_DSCCAPSFLAGS {
  DSCCAPS_DEFAULT = 0x00000000,
  DSCCAPS_EMULDRIVER = 0x00000020,
}

enum CONST_WAVEFORMATFLAGS {
  WAVE_FORMAT_1M08 = 0x00000001,
  WAVE_FORMAT_1S08 = 0x00000002,
  WAVE_FORMAT_1M16 = 0x00000004,
  WAVE_FORMAT_1S16 = 0x00000008,
  WAVE_FORMAT_2M08 = 0x00000010,
  WAVE_FORMAT_2S08 = 0x00000020,
  WAVE_FORMAT_2M16 = 0x00000040,
  WAVE_FORMAT_2S16 = 0x00000080,
  WAVE_FORMAT_4M08 = 0x00000100,
  WAVE_FORMAT_4S08 = 0x00000200,
  WAVE_FORMAT_4M16 = 0x00000400,
  WAVE_FORMAT_4S16 = 0x00000800,
}

enum CONST_DSFXGARGLE_RATEHZ {
  DSFXGARGLE_RATEHZ_MIN = 0x00000001,
  DSFXGARGLE_RATEHZ_MAX = 0x000003E8,
}

enum CONST_DSFXGARGLE_WAVE {
  DSFXGARGLE_WAVE_TRIANGLE = 0x00000000,
  DSFXGARGLE_WAVE_SQUARE = 0x00000001,
}

enum CONST_DSFX_WAVE {
  DSFX_WAVE_TRIANGLE = 0x00000000,
  DSFX_WAVE_SIN = 0x00000001,
}

enum CONST_DSFX_PHASE {
  DSFX_PHASE_MIN = 0x00000000,
  DSFX_PHASE_MAX = 0x00000004,
  DSFX_PHASE_NEG_180 = 0x00000000,
  DSFX_PHASE_NEG_90 = 0x00000001,
  DSFX_PHASE_ZERO = 0x00000002,
  DSFX_PHASE_90 = 0x00000003,
  DSFX_PHASE_180 = 0x00000004,
}

enum CONST_DSFX_PANDELAY {
  DSFX_PANDELAY_MIN = 0x00000000,
  DSFX_PANDELAY_MAX = 0x00000001,
}

enum CONST_DSFX_I3DL2_ENVIRONMENT_PRESETS {
  DSFX_I3DL2_ENVIRONMENT_PRESET_DEFAULT = 0x00000000,
  DSFX_I3DL2_ENVIRONMENT_PRESET_GENERIC = 0x00000001,
  DSFX_I3DL2_ENVIRONMENT_PRESET_PADDEDCELL = 0x00000002,
  DSFX_I3DL2_ENVIRONMENT_PRESET_ROOM = 0x00000003,
  DSFX_I3DL2_ENVIRONMENT_PRESET_BATHROOM = 0x00000004,
  DSFX_I3DL2_ENVIRONMENT_PRESET_LIVINGROOM = 0x00000005,
  DSFX_I3DL2_ENVIRONMENT_PRESET_STONEROOM = 0x00000006,
  DSFX_I3DL2_ENVIRONMENT_PRESET_AUDITORIUM = 0x00000007,
  DSFX_I3DL2_ENVIRONMENT_PRESET_CONCERTHALL = 0x00000008,
  DSFX_I3DL2_ENVIRONMENT_PRESET_CAVE = 0x00000009,
  DSFX_I3DL2_ENVIRONMENT_PRESET_ARENA = 0x0000000A,
  DSFX_I3DL2_ENVIRONMENT_PRESET_HANGAR = 0x0000000B,
  DSFX_I3DL2_ENVIRONMENT_PRESET_CARPETEDHALLWAY = 0x0000000C,
  DSFX_I3DL2_ENVIRONMENT_PRESET_HALLWAY = 0x0000000D,
  DSFX_I3DL2_ENVIRONMENT_PRESET_STONECORRIDOR = 0x0000000E,
  DSFX_I3DL2_ENVIRONMENT_PRESET_ALLEY = 0x0000000F,
  DSFX_I3DL2_ENVIRONMENT_PRESET_FOREST = 0x00000010,
  DSFX_I3DL2_ENVIRONMENT_PRESET_CITY = 0x00000011,
  DSFX_I3DL2_ENVIRONMENT_PRESET_MOUNTAINS = 0x00000012,
  DSFX_I3DL2_ENVIRONMENT_PRESET_QUARRY = 0x00000013,
  DSFX_I3DL2_ENVIRONMENT_PRESET_PLAIN = 0x00000014,
  DSFX_I3DL2_ENVIRONMENT_PRESET_PARKINGLOT = 0x00000015,
  DSFX_I3DL2_ENVIRONMENT_PRESET_SEWERPIPE = 0x00000016,
  DSFX_I3DL2_ENVIRONMENT_PRESET_UNDERWATER = 0x00000017,
  DSFX_I3DL2_ENVIRONMENT_PRESET_SMALLROOM = 0x00000018,
  DSFX_I3DL2_ENVIRONMENT_PRESET_MEDIUMROOM = 0x00000019,
  DSFX_I3DL2_ENVIRONMENT_PRESET_LARGEROOM = 0x0000001A,
  DSFX_I3DL2_ENVIRONMENT_PRESET_MEDIUMHALL = 0x0000001B,
  DSFX_I3DL2_ENVIRONMENT_PRESET_LARGEHALL = 0x0000001C,
  DSFX_I3DL2_ENVIRONMENT_PRESET_PLATE = 0x0000001D,
}

enum CONST_DSFX_I3DL2REVERB_QUALITY {
  DSFX_I3DL2REVERB_QUALITY_MIN = 0x00000000,
  DSFX_I3DL2REVERB_QUALITY_MAX = 0x00000003,
  DSFX_I3DL2REVERB_QUALITY_DEFAULT = 0x00000002,
}

enum CONST_DMUS_NOTIFICATION_TYPE {
  DMUS_NOTIFY_ON_RECOMPOSE = 0x00000000,
  DMUS_NOTIFY_ON_CHORD = 0x00000001,
  DMUS_NOTIFY_ON_COMMAND = 0x00000002,
  DMUS_NOTIFY_ON_MEASUREANDBEAT = 0x00000003,
  DMUS_NOTIFY_ON_PERFORMANCE = 0x00000004,
  DMUS_NOTIFY_ON_SEGMENT = 0x00000005,
}

enum CONST_DMUS_AUDIO {
  DMUS_AUDIOF_3D = 0x00000001,
  DMUS_AUDIOF_ENVIRON = 0x00000002,
  DMUS_AUDIOF_EAX = 0x00000004,
  DMUS_AUDIOF_DMOS = 0x00000008,
  DMUS_AUDIOF_STREAMING = 0x00000010,
  DMUS_AUDIOF_BUFFERS = 0x00000020,
  DMUS_AUDIOF_ALL = 0x0000003F,
}

enum CONST_DMUS_AUDIOPARAMS {
  DMUS_AUDIOPARAMS_FEATURES = 0x00000001,
  DMUS_AUDIOPARAMS_VOICES = 0x00000002,
  DMUS_AUDIOPARAMS_SAMPLERATE = 0x00000004,
  DMUS_AUDIOPARAMS_DEFAULTSYNTH = 0x00000008,
}

enum CONST_DMUSIC_STANDARD_AUDIO_PATH {
  DMUS_APATH_SHARED_STEREOPLUSREVERB = 0x00000001,
  DMUS_APATH_DYNAMIC_3D = 0x00000006,
  DMUS_APATH_DYNAMIC_MONO = 0x00000007,
  DMUS_APATH_DYNAMIC_STEREO = 0x00000008,
}

enum CONST_DMUS_SEGF_FLAGS {
  DMUS_SEGF_REFTIME = 0x00000040,
  DMUS_SEGF_SECONDARY = 0x00000080,
  DMUS_SEGF_QUEUE = 0x00000100,
  DMUS_SEGF_CONTROL = 0x00000200,
  DMUS_SEGF_AFTERPREPARETIME = 0x00000400,
  DMUS_SEGF_GRID = 0x00000800,
  DMUS_SEGF_BEAT = 0x00001000,
  DMUS_SEGF_MEASURE = 0x00002000,
  DMUS_SEGF_DEFAULT = 0x00004000,
  DMUS_SEGF_NOINVALIDATE = 0x00008000,
  DMUS_SEGF_ALIGN = 0x00010000,
  DMUS_SEGF_VALID_START_BEAT = 0x00020000,
  DMUS_SEGF_VALID_START_GRID = 0x00040000,
  DMUS_SEGF_VALID_START_TICK = 0x00080000,
  DMUS_SEGF_AUTOTRANSITION = 0x00100000,
  DMUS_SEGF_AFTERQUEUETIME = 0x00200000,
  DMUS_SEGF_AFTERLATENCYTIME = 0x00400000,
  DMUS_SEGF_SEGMENTEND = 0x00800000,
  DMUS_SEGF_MARKER = 0x01000000,
  DMUS_SEGF_TIMESIG_ALWAYS = 0x02000000,
  DMUS_SEGF_USE_AUDIOPATH = 0x04000000,
  DMUS_SEGF_VALID_START_MEASURE = 0x08000000,
}

enum CONST_DMUSIC_PATH {
  DMUS_PATH_SEGMENT = 0x00001000,
  DMUS_PATH_SEGMENT_TRACK = 0x00001100,
  DMUS_PATH_SEGMENT_GRAPH = 0x00001200,
  DMUS_PATH_SEGMENT_TOOL = 0x00001300,
  DMUS_PATH_AUDIOPATH = 0x00002000,
  DMUS_PATH_AUDIOPATH_GRAPH = 0x00002200,
  DMUS_PATH_AUDIOPATH_TOOL = 0x00002300,
  DMUS_PATH_PERFORMANCE = 0x00003000,
  DMUS_PATH_PERFORMANCE_GRAPH = 0x00003200,
  DMUS_PATH_PERFORMANCE_TOOL = 0x00003300,
  DMUS_PATH_PORT = 0x00004000,
  DMUS_PATH_BUFFER = 0x00006000,
  DMUS_PATH_BUFFER_DMO = 0x00006100,
  DMUS_PATH_MIXIN_BUFFER = 0x00007000,
  DMUS_PATH_MIXIN_BUFFER_DMO = 0x00007100,
  DMUS_PATH_PRIMARY_BUFFER = 0x00008000,
}

enum CONST_DSFX_WAVESREVERB_INGAIN {
  DSFX_WAVESREVERB_INGAIN_MIN = 0xFFFFFFA0,
  DSFX_WAVESREVERB_INGAIN_MAX = 0x00000000,
}

enum CONST_DSFX_WAVESREVERB_REVERBMIX {
  DSFX_WAVESREVERB_REVERBMIX_MIN = 0xFFFFFFA0,
  DSFX_WAVESREVERB_REVERBMIX_MAX = 0x00000000,
}

enum CONST_DSFX_I3DL2REVERB_ROOM {
  DSFX_I3DL2REVERB_ROOM_MIN = 0xFFFFD8F0,
  DSFX_I3DL2REVERB_ROOM_MAX = 0x00000000,
  DSFX_I3DL2REVERB_ROOM_DEFAULT = 0xFFFFD8F0,
}

enum CONST_DSFX_I3DL2REVERB_ROOMHF {
  DSFX_I3DL2REVERB_ROOMHF_MIN = 0xFFFFD8F0,
  DSFX_I3DL2REVERB_ROOMHF_MAX = 0x00000000,
  DSFX_I3DL2REVERB_ROOMHF_DEFAULT = 0x00000000,
}

enum CONST_DSFX_I3DL2REVERB_ROOMROLLOFFFACTOR {
  DSFX_I3DL2REVERB_ROOMROLLOFFFACTOR_MIN = 0x00000000,
  DSFX_I3DL2REVERB_ROOMROLLOFFFACTOR_MAX = 0x00000001,
  DSFX_I3DL2REVERB_ROOMROLLOFFFACTOR_DEFAULT = 0x00000000,
}

enum CONST_DSFX_I3DL2REVERB_REFLECTIONS {
  DSFX_I3DL2REVERB_REFLECTIONS_MIN = 0xFFFFD8F0,
  DSFX_I3DL2REVERB_REFLECTIONS_MAX = 0x000003E8,
  DSFX_I3DL2REVERB_REFLECTIONS_DEFAULT = 0xFFFFD8F0,
}

enum CONST_DSFX_I3DL2REVERB_REVERB {
  DSFX_I3DL2REVERB_REVERB_MIN = 0xFFFFD8F0,
  DSFX_I3DL2REVERB_REVERB_MAX = 0x000007D0,
  DSFX_I3DL2REVERB_REVERB_DEFAULT = 0xFFFFD8F0,
}

enum CONST_DSFX_I3DL2REVERB_DIFFUSION {
  DSFX_I3DL2REVERB_DIFFUSION_MIN = 0x00000000,
  DSFX_I3DL2REVERB_DIFFUSION_MAX = 0x00000064,
  DSFX_I3DL2REVERB_DIFFUSION_DEFAULT = 0x00000064,
}

enum CONST_DSFX_I3DL2REVERB_DENSITY {
  DSFX_I3DL2REVERB_DENSITY_MIN = 0x00000000,
  DSFX_I3DL2REVERB_DENSITY_MAX = 0x00000064,
  DSFX_I3DL2REVERB_DENSITY_DEFAULT = 0x00000064,
}

enum CONST_DSFX_I3DL2REVERB_HFREFERENCE {
  DSFX_I3DL2REVERB_HFREFERENCE_MIN = 0x00000014,
  DSFX_I3DL2REVERB_HFREFERENCE_MAX = 0x00004E20,
  DSFX_I3DL2REVERB_HFREFERENCE_DEFAULT = 0x00001388,
}

enum CONST_DSFXCOMPRESSOR_GAIN {
  DSFXCOMPRESSOR_GAIN_MIN = 0xFFFFFFC4,
  DSFXCOMPRESSOR_GAIN_MAX = 0x0000003C,
}

enum CONST_DSFXCOMPRESSOR_ATTACK {
  DSFXCOMPRESSOR_ATTACK_MIN = 0x00000001,
  DSFXCOMPRESSOR_ATTACK_MAX = 0x000001F4,
}

enum CONST_DSFXCOMPRESSOR_RELEASE {
  DSFXCOMPRESSOR_RELEASE_MIN = 0x00000032,
  DSFXCOMPRESSOR_RELEASE_MAX = 0x00000BB8,
}

enum CONST_DSFXCOMPRESSOR_THRESHOLD {
  DSFXCOMPRESSOR_THRESHOLD_MIN = 0xFFFFFFC4,
  DSFXCOMPRESSOR_THRESHOLD_MAX = 0x00000000,
}

enum CONST_DSFXCOMPRESSOR_RATIO {
  DSFXCOMPRESSOR_RATIO_MIN = 0x00000001,
  DSFXCOMPRESSOR_RATIO_MAX = 0x00000064,
}

enum CONST_DSFXCOMPRESSOR_PREDELAY {
  DSFXCOMPRESSOR_PREDELAY_MIN = 0x00000000,
  DSFXCOMPRESSOR_PREDELAY_MAX = 0x00000004,
}

enum CONST_DSFXDISTORTION_GAIN {
  DSFXDISTORTION_GAIN_MIN = 0xFFFFFFC4,
  DSFXDISTORTION_GAIN_MAX = 0x00000000,
}

enum CONST_DSFXDISTORTION_EDGE {
  DSFXDISTORTION_EDGE_MIN = 0x00000000,
  DSFXDISTORTION_EDGE_MAX = 0x00000064,
}

enum CONST_DSFXPARAMEQ_CENTER {
  DSFXPARAMEQ_CENTER_MIN = 0x00000050,
  DSFXPARAMEQ_CENTER_MAX = 0x00003E80,
}

enum CONST_DSFXPARAMEQ_BANDWIDTH {
  DSFXPARAMEQ_BANDWIDTH_MIN = 0x00000001,
  DSFXPARAMEQ_BANDWIDTH_MAX = 0x00000024,
}

enum CONST_DSFXPARAMEQ_GAIN {
  DSFXPARAMEQ_GAIN_MIN = 0xFFFFFFF1,
  DSFXPARAMEQ_GAIN_MAX = 0x0000000F,
}

enum CONST_DSFXDISTORTION_POSTEQCENTERFREQUENCY {
  DSFXDISTORTION_POSTEQCENTERFREQUENCY_MIN = 0x00000064,
  DSFXDISTORTION_POSTEQCENTERFREQUENCY_MAX = 0x00001F40,
}

enum CONST_DSFXDISTORTION_POSTEQBANDWIDTH {
  DSFXDISTORTION_POSTEQBANDWIDTH_MIN = 0x00000064,
  DSFXDISTORTION_POSTEQBANDWIDTH_MAX = 0x00001F40,
}

enum CONST_DSFXDISTORTION_PRELOWPASSCUTOFF {
  DSFXDISTORTION_PRELOWPASSCUTOFF_MIN = 0x00000064,
  DSFXDISTORTION_PRELOWPASSCUTOFF_MAX = 0x00001F40,
}

enum CONST_DSFX_LEFTRIGHTDELAY {
  DSFX_LEFTRIGHTDELAY_MIN = 0x00000001,
  DSFX_LEFTRIGHTDELAY_MAX = 0x000007D0,
}

enum CONST_DSFX_WETDRY {
  DSFX_WETDRYMIX_MIN = 0x00000000,
  DSFX_WETDRYMIX_MAX = 0x00000064,
}

enum CONST_DSFX_DEPTH {
  DSFX_DEPTH_MIN = 0x00000000,
  DSFX_DEPTH_MAX = 0x00000064,
}

enum CONST_DSFX_FEEDBACK {
  DSFX_FEEDBACK_MIN = 0xFFFFFF9D,
  DSFX_FEEDBACK_MAX = 0x00000063,
}

enum CONST_DSFXECHO_FEEDBACK {
  DSFXECHO_FEEDBACK_MIN = 0x00000000,
  DSFXECHO_FEEDBACK_MAX = 0x00000064,
}

enum CONST_DSFX_FREQUENCY {
  DSFX_FREQUENCY_MIN = 0x00000000,
  DSFX_FREQUENCY_MAX = 0x0000000A,
}

enum CONST_DSFX_DELAY {
  DSFX_DELAY_MIN = 0x00000000,
  DSFX_DELAY_MAX = 0x00000014,
}

enum CONST_DSFX_FLANGER_DELAY {
  DSFX_FLANGER_DELAY_MIN = 0x00000000,
  DSFX_FLANGER_DELAY_MAX = 0x00000004,
}

enum CONST_DSOUNDFX {
  DSFXR_PRESENT = 0x00000000,
  DSFX_LOCHARDWARE = 0x00000001,
  DSFX_LOCSOFTWARE = 0x00000002,
  DSFXR_LOCHARDWARE = 0x00000001,
  DSFXR_LOCSOFTWARE = 0x00000002,
  DSFXR_UNALLOCATED = 0x00000003,
  DSFXR_FAILED = 0x00000004,
  DSFXR_UNKNOWN = 0x00000005,
}

enum CONST_DSOUND {
  DS3D_MINDISTANCEFACTOR = 0x00000000,
  DS3D_MAXDISTANCEFACTOR = 0x0000000A,
  DS3D_DEFAULTDISTANCEFACTOR = 0x00000001,
  DS3D_MINROLLOFFFACTOR = 0x00000000,
  DS3D_MAXROLLOFFFACTOR = 0x0000000A,
  DS3D_DEFAULTROLLOFFFACTOR = 0x00000001,
  DS3D_MINDOPPLERFACTOR = 0x00000000,
  DS3D_MAXDOPPLERFACTOR = 0x0000000A,
  DS3D_DEFAULTDOPPLERFACTOR = 0x00000001,
  DS3D_DEFAULTMINDISTANCE = 0x00000001,
  DS3D_DEFAULTMAXDISTANCE = 0x3B9ACA00,
  DS3D_MINCONEANGLE = 0x00000000,
  DS3D_MAXCONEANGLE = 0x00000168,
  DS3D_DEFAULTCONEANGLE = 0x00000168,
  DS3D_DEFAULTCONEOUTSIDEVOLUME = 0x00000000,
  DSBFREQUENCY_MIN = 0x00000064,
  DSBFREQUENCY_MAX = 0x000186A0,
  DSBFREQUENCY_ORIGINAL = 0x00000000,
  DSBPAN_LEFT = 0xFFFFD8F0,
  DSBPAN_CENTER = 0x00000000,
  DSBPAN_RIGHT = 0x00002710,
  DSBVOLUME_MIN = 0xFFFFD8F0,
  DSBVOLUME_MAX = 0x00000000,
  DSBSIZE_MIN = 0x00000004,
  DSBSIZE_MAX = 0x0FFFFFFF,
  DSBPN_OFFSETSTOP = 0xFFFFFFFF,
  WAVE_FORMAT_PCM = 0x00000001,
}

enum CONST_DMUS_PCHANNEL {
  DMUS_PCHANNEL_ALL = 0xFFFFFFFB,
  DMUS_PCHANNEL_BROADCAST_PERFORMANCE = 0xFFFFFFFF,
  DMUS_PCHANNEL_BROADCAST_AUDIOPATH = 0xFFFFFFFE,
  DMUS_PCHANNEL_BROADCAST_SEGMENT = 0xFFFFFFFD,
  DMUS_PCHANNEL_BROADCAST_GROUPS = 0xFFFFFFFC,
}

enum CONST_DMUS {
  DMUS_MAXSUBCHORD = 0x00000008,
  DMUS_TEMPO_MAX = 0x000003E8,
  DMUS_TEMPO_MIN = 0x00000001,
}

enum CONST_DMUS_CURVES {
  DMUS_CURVES_LINEAR = 0x00000000,
  DMUS_CURVES_INSTANT = 0x00000001,
  DMUS_CURVES_EXP = 0x00000002,
  DMUS_CURVES_LOG = 0x00000003,
  DMUS_CURVES_SINE = 0x00000004,
}

enum CONST_DMUS_CURVET {
  DMUS_CURVET_PBCURVE = 0x00000003,
  DMUS_CURVET_CCCURVE = 0x00000004,
  DMUS_CURVET_MATCURVE = 0x00000005,
  DMUS_CURVET_PATCURVE = 0x00000006,
  DMUS_CURVET_RPNCURVE = 0x00000007,
  DMUS_CURVET_NRPNCURVE = 0x00000008,
}

enum CONST_DMUS_NOTIFICATION_SUBTYPE {
  DMUS_NOTIFICATION_MUSICSTARTED = 0x00000000,
  DMUS_NOTIFICATION_MUSICSTOPPED = 0x00000001,
  DMUS_NOTIFICATION_MEASUREBEAT = 0x00000000,
  DMUS_NOTIFICATION_CHORD = 0x00000000,
  DMUS_NOTIFICATION_GROOVE = 0x00000000,
  DMUS_NOTIFICATION_EMBELLISHMENT = 0x00000001,
  DMUS_NOTIFICATION_SEGSTART = 0x00000000,
  DMUS_NOTIFICATION_SEGEND = 0x00000001,
  DMUS_NOTIFICATION_SEGALMOSTEND = 0x00000002,
  DMUS_NOTIFICATION_SEGLOOP = 0x00000003,
  DMUS_NOTIFICATION_SEGABORT = 0x00000004,
  DMUS_NOTIFICATION_MUSICALMOSTEND = 0x00000002,
  DMUS_NOTIFICATION_RECOMPOSE = 0x00000000,
}

enum CONST_DMUS_COMMANDT_TYPES {
  DMUS_COMMANDT_GROOVE = 0x00000000,
  DMUS_COMMANDT_FILL = 0x00000001,
  DMUS_COMMANDT_INTRO = 0x00000002,
  DMUS_COMMANDT_BREAK = 0x00000003,
  DMUS_COMMANDT_END = 0x00000004,
  DMUS_COMMANDT_ENDANDINTRO = 0x00000005,
}

enum CONST_DMUS_SHAPET_TYPES {
  DMUS_SHAPET_FALLING = 0x00000000,
  DMUS_SHAPET_LEVEL = 0x00000001,
  DMUS_SHAPET_LOOPABLE = 0x00000002,
  DMUS_SHAPET_LOUD = 0x00000003,
  DMUS_SHAPET_QUIET = 0x00000004,
  DMUS_SHAPET_PEAKING = 0x00000005,
  DMUS_SHAPET_RANDOM = 0x00000006,
  DMUS_SHAPET_RISING = 0x00000007,
  DMUS_SHAPET_SONG = 0x00000008,
}

enum CONST_DMUS_COMPOSEF_FLAGS {
  DMUS_COMPOSEF_NONE = 0x00000000,
  DMUS_COMPOSEF_ALIGN = 0x00000001,
  DMUS_COMPOSEF_OVERLAP = 0x00000002,
  DMUS_COMPOSEF_IMMEDIATE = 0x00000004,
  DMUS_COMPOSEF_GRID = 0x00000008,
  DMUS_COMPOSEF_BEAT = 0x00000010,
  DMUS_COMPOSEF_MEASURE = 0x00000020,
  DMUS_COMPOSEF_AFTERPREPARETIME = 0x00000040,
  DMUS_COMPOSEF_MODULATE = 0x00001000,
  DMUS_COMPOSEF_LONG = 0x00002000,
  DMUS_COMPOSEF_VALID_START_BEAT = 0x00000080,
  DMUS_COMPOSEF_VALID_START_GRID = 0x00000100,
  DMUS_COMPOSEF_VALID_START_TICK = 0x00000200,
  DMUS_COMPOSEF_SEGMENTEND = 0x00000400,
  DMUS_COMPOSEF_MARKER = 0x00000800,
  DMUS_COMPOSEF_ENTIRE_TRANSITION = 0x00004000,
  DMUS_COMPOSEF_1BAR_TRANSITION = 0x00008000,
  DMUS_COMPOSEF_ENTIRE_ADDITION = 0x00010000,
  DMUS_COMPOSEF_1BAR_ADDITION = 0x00020000,
  DMUS_COMPOSEF_VALID_START_MEASURE = 0x00040000,
  DMUS_COMPOSEF_DEFAULT = 0x00080000,
  DMUS_COMPOSEF_NOINVALIDATE = 0x00100000,
  DMUS_COMPOSEF_USE_AUDIOPATH = 0x00200000,
}

enum CONST_DMUS_PMSGF_FLAGS {
  DMUS_PMSGF_REFTIME = 0x00000001,
  DMUS_PMSGF_MUSICTIME = 0x00000002,
  DMUS_PMSGF_TOOL_IMMEDIATE = 0x00000004,
  DMUS_PMSGF_TOOL_QUEUE = 0x00000008,
  DMUS_PMSGF_TOOL_ATTIME = 0x00000010,
  DMUS_PMSGF_TOOL_FLUSH = 0x00000020,
  DMUS_PMSGF_LOCKTOREFTIME = 0x00000040,
  DMUS_PMSGF_DX8 = 0x00000080,
}

enum CONST_DMUS_NOTEF_FLAGS {
  DMUS_NOTEF_NOTEON = 0x00000001,
}

enum CONST_DMUS_PLAYMODE_FLAGS {
  DMUS_PLAYMODE_KEY_ROOT = 0x00000001,
  DMUS_PLAYMODE_CHORD_ROOT = 0x00000002,
  DMUS_PLAYMODE_SCALE_INTERVALS = 0x00000004,
  DMUS_PLAYMODE_CHORD_INTERVALS = 0x00000008,
  DMUS_PLAYMODE_NONE = 0x00000010,
  DMUS_PLAYMODE_FIXED = 0x00000000,
  DMUS_PLAYMODE_FIXEDTOKEY = 0x00000001,
  DMUS_PLAYMODE_FIXEDTOCHORD = 0x00000002,
  DMUS_PLAYMODE_PEDALPOINT = 0x00000005,
  DMUS_PLAYMODE_MELODIC = 0x00000006,
  DMUS_PLAYMODE_NORMALCHORD = 0x0000000A,
  DMUS_PLAYMODE_ALWAYSPLAY = 0x0000000E,
}

enum CONST_DMUS_CURVE_FLAGS {
  DMUS_CURVE_RESET = 0x00000001,
  DMUS_CURVE_START_FROM_CURRENT = 0x00000002,
}

enum CONST_DSOUNDERR {
  DS_OK = 0x00000000,
  DSERR_ALLOCATED = 0x8878000A,
  DSERR_CONTROLUNAVAIL = 0x8878001E,
  DSERR_INVALIDPARAM = 0x80070057,
  DSERR_INVALIDCALL = 0x88780032,
  DSERR_GENERIC = 0x80004005,
  DSERR_PRIOLEVELNEEDED = 0x88780046,
  DSERR_OUTOFMEMORY = 0x00000007,
  DSERR_BADFORMAT = 0x88780064,
  DSERR_UNSUPPORTED = 0x80004001,
  DSERR_NODRIVER = 0x88780078,
  DSERR_ALREADYINITIALIZED = 0x88780082,
  DSERR_BUFFERLOST = 0x88780096,
  DSERR_OTHERAPPHASPRIO = 0x887800A0,
  DSERR_UNINITIALIZED = 0x887800AA,
  DSERR_NOINTERFACE = 0x000001AE,
  DSERR_BUFFERTOOSMALL = 0x887800B4,
  DSERR_DS8_REQUIRED = 0x887800BE,
  DSERR_OBJECTNOTFOUND = 0x88781161,
}

enum CONST_DMUSERR {
  DMUS_E_DRIVER_FAILED = 0x88781101,
  DMUS_E_PORTS_OPEN = 0x88781102,
  DMUS_E_DEVICE_IN_USE = 0x88781103,
  DMUS_E_INSUFFICIENTBUFFER = 0x88781104,
  DMUS_E_BUFFERNOTSET = 0x88781105,
  DMUS_E_BUFFERNOTAVAILABLE = 0x88781106,
  DMUS_E_NOTADLSCOL = 0x88781108,
  DMUS_E_INVALIDOFFSET = 0x88781109,
  DMUS_E_ALREADY_LOADED = 0x88781111,
  DMUS_E_INVALIDPOS = 0x88781113,
  DMUS_E_INVALIDPATCH = 0x88781114,
  DMUS_E_CANNOTSEEK = 0x88781115,
  DMUS_E_CANNOTWRITE = 0x88781116,
  DMUS_E_CHUNKNOTFOUND = 0x88781117,
  DMUS_E_INVALID_DOWNLOADID = 0x88781119,
  DMUS_E_NOT_DOWNLOADED_TO_PORT = 0x88781120,
  DMUS_E_ALREADY_DOWNLOADED = 0x88781121,
  DMUS_E_UNKNOWN_PROPERTY = 0x88781122,
  DMUS_E_SET_UNSUPPORTED = 0x88781123,
  DMUS_E_GET_UNSUPPORTED = 0x88781124,
  DMUS_E_NOTMONO = 0x88781125,
  DMUS_E_BADARTICULATION = 0x88781126,
  DMUS_E_BADINSTRUMENT = 0x88781127,
  DMUS_E_BADWAVELINK = 0x88781128,
  DMUS_E_NOARTICULATION = 0x88781129,
  DMUS_E_NOTPCM = 0x8878112A,
  DMUS_E_BADWAVE = 0x8878112B,
  DMUS_E_BADOFFSETTABLE = 0x8878112C,
  DMUS_E_UNKNOWNDOWNLOAD = 0x8878112D,
  DMUS_E_NOSYNTHSINK = 0x8878112E,
  DMUS_E_ALREADYOPEN = 0x8878112F,
  DMUS_E_ALREADYCLOSED = 0x88781130,
  DMUS_E_SYNTHNOTCONFIGURED = 0x88781131,
  DMUS_E_SYNTHACTIVE = 0x88781132,
  DMUS_E_CANNOTREAD = 0x88781133,
  DMUS_E_DMUSIC_RELEASED = 0x88781134,
  DMUS_E_BUFFER_EMPTY = 0x88781135,
  DMUS_E_BUFFER_FULL = 0x88781136,
  DMUS_E_PORT_NOT_CAPTURE = 0x88781137,
  DMUS_E_PORT_NOT_RENDER = 0x88781138,
  DMUS_E_DSOUND_NOT_SET = 0x88781139,
  DMUS_E_ALREADY_ACTIVATED = 0x8878113A,
  DMUS_E_INVALIDBUFFER = 0x8878113B,
  DMUS_E_WAVEFORMATNOTSUPPORTED = 0x8878113C,
  DMUS_E_SYNTHINACTIVE = 0x8878113D,
  DMUS_E_DSOUND_ALREADY_SET = 0x8878113E,
  DMUS_E_INVALID_EVENT = 0x8878113F,
  DMUS_E_UNSUPPORTED_STREAM = 0x88781150,
  DMUS_E_ALREADY_INITED = 0x88781151,
  DMUS_E_INVALID_BAND = 0x88781152,
  DMUS_E_TRACK_HDR_NOT_FIRST_CK = 0x88781155,
  DMUS_E_TOOL_HDR_NOT_FIRST_CK = 0x88781156,
  DMUS_E_INVALID_TRACK_HDR = 0x88781157,
  DMUS_E_INVALID_TOOL_HDR = 0x88781158,
  DMUS_E_ALL_TOOLS_FAILED = 0x88781159,
  DMUS_E_ALL_TRACKS_FAILED = 0x88781160,
  DMUS_E_NOT_FOUND = 0x88781161,
  DMUS_E_NOT_INIT = 0x88781162,
  DMUS_E_TYPE_DISABLED = 0x88781163,
  DMUS_E_TYPE_UNSUPPORTED = 0x88781164,
  DMUS_E_TIME_PAST = 0x88781165,
  DMUS_E_TRACK_NOT_FOUND = 0x88781166,
  DMUS_E_NO_MASTER_CLOCK = 0x88781170,
  DMUS_E_LOADER_NOCLASSID = 0x88781180,
  DMUS_E_LOADER_BADPATH = 0x88781181,
  DMUS_E_LOADER_FAILEDOPEN = 0x88781182,
  DMUS_E_LOADER_FORMATNOTSUPPORTED = 0x88781183,
  DMUS_E_LOADER_FAILEDCREATE = 0x88781184,
  DMUS_E_LOADER_OBJECTNOTFOUND = 0x88781185,
  DMUS_E_LOADER_NOFILENAME = 0x88781186,
  DMUS_E_INVALIDFILE = 0x88781200,
  DMUS_E_ALREADY_EXISTS = 0x88781201,
  DMUS_E_OUT_OF_RANGE = 0x88781202,
  DMUS_E_SEGMENT_INIT_FAILED = 0x88781203,
  DMUS_E_ALREADY_SENT = 0x88781204,
  DMUS_E_CANNOT_FREE = 0x88781205,
  DMUS_E_CANNOT_OPEN_PORT = 0x88781206,
  DMUS_E_CANNOT_CONVERT = 0x88781207,
  DMUS_E_DESCEND_CHUNK_FAIL = 0x88781210,
  DMUS_E_NOT_LOADED = 0x88781211,
  DMUS_E_INVALID_SEGMENTTRIGGERTRACK = 0x88781220,
  DMUS_E_INVALID_LYRICSTRACK = 0x88781221,
  DMUS_E_INVALID_PARAMCONTROLTRACK = 0x88781222,
  DMUS_E_AUDIOPATHS_NOT_VALID = 0x88781226,
  DMUS_E_AUDIOPATHS_IN_USE = 0x88781227,
  DMUS_E_NO_AUDIOPATH_CONFIG = 0x88781228,
  DMUS_E_AUDIOPATH_INACTIVE = 0x88781229,
  DMUS_E_AUDIOPATH_NOBUFFER = 0x8878122A,
  DMUS_E_AUDIOPATH_NOPORT = 0x8878122B,
  DMUS_E_NO_AUDIOPATH = 0x8878122C,
  DMUS_E_FAIL = 0x80070057,
  DMUS_E_INVALIDARG = 0x00000005,
  DMUS_E_NOINTERFACE = 0x000001AE,
  DMUS_E_OUTOFMEMORY = 0x00000007,
  DMUS_E_NOTIMPL = 0x000001BD,
}

enum CONST_DIDFTFLAGS {
  DIDFT_ALL = 0x00000000,
  DIDFT_RELAXIS = 0x00000001,
  DIDFT_ABSAXIS = 0x00000002,
  DIDFT_AXIS = 0x00000003,
  DIDFT_PSHBUTTON = 0x00000004,
  DIDFT_TGLBUTTON = 0x00000008,
  DIDFT_BUTTON = 0x0000000C,
  DIDFT_POV = 0x00000010,
  DIDFT_COLLECTION = 0x00000040,
  DIDFT_NODATA = 0x00000080,
  DIDFT_ANYINSTANCE = 0x00FFFF00,
  DIDFT_INSTANCEMASK = 0x00FFFF00,
  DIDFT_FFACTUATOR = 0x01000000,
  DIDFT_FFEFFECTTRIGGER = 0x02000000,
  DIDFT_NOCOLLECTION = 0x00FFFF00,
  DIDFT_VENDORDEFINED = 0x04000000,
  DIDFT_ALIAS = 0x08000000,
  DIDFT_OUTPUT = 0x10000000,
}

enum CONST_DIDEVICEOBJINSTANCEFLAGS {
  DIDOI_FFACTUATOR = 0x00000001,
  DIDOI_FFEFFECTTRIGGER = 0x00000002,
  DIDOI_POLLED = 0x00008000,
  DIDOI_ASPECTPOSITION = 0x00000100,
  DIDOI_ASPECTVELOCITY = 0x00000200,
  DIDOI_ASPECTACCEL = 0x00000300,
  DIDOI_ASPECTFORCE = 0x00000400,
  DIDOI_ASPECTMASK = 0x00000F00,
  DIDOI_GUIDISUSAGE = 0x00010000,
}

enum CONST_DIDEVCAPSFLAGS {
  DIDC_ATTACHED = 0x00000001,
  DIDC_POLLEDDEVICE = 0x00000002,
  DIDC_EMULATED = 0x00000004,
  DIDC_POLLEDDATAFORMAT = 0x00000008,
  DIDC_FORCEFEEDBACK = 0x00000100,
  DIDC_FFATTACK = 0x00000200,
  DIDC_FFFADE = 0x00000400,
  DIDC_SATURATION = 0x00000800,
  DIDC_POSNEGCOEFFICIENTS = 0x00001000,
  DIDC_POSNEGSATURATION = 0x00002000,
  DIDC_DEADBAND = 0x00004000,
  DIDC_STARTDELAY = 0x00008000,
  DIDC_ALIAS = 0x00010000,
  DIDC_PHANTOM = 0x00020000,
  DIDC_HIDDEN = 0x00040000,
}

enum CONST_DIDGDDFLAGS {
  DIGDD_DEFAULT = 0x00000000,
  DIGDD_PEEK = 0x00000001,
}

enum CONST_DIPHFLAGS {
  DIPH_DEVICE = 0x00000000,
  DIPH_BYOFFSET = 0x00000001,
  DIPH_BYID = 0x00000002,
  DIPH_BYUSAGE = 0x00000003,
}

enum CONST_DISCLFLAGS {
  DISCL_EXCLUSIVE = 0x00000001,
  DISCL_NONEXCLUSIVE = 0x00000002,
  DISCL_FOREGROUND = 0x00000004,
  DISCL_BACKGROUND = 0x00000008,
  DISCL_NOWINKEY = 0x00000010,
}

enum CONST_DICOMMONDATAFORMATS {
  DIFORMAT_KEYBOARD = 0x00000001,
  DIFORMAT_MOUSE = 0x00000002,
  DIFORMAT_JOYSTICK = 0x00000003,
  DIFORMAT_JOYSTICK2 = 0x00000004,
  DIFORMAT_MOUSE2 = 0x00000005,
}

enum CONST_DIDATAFORMATFLAGS {
  DIDF_ABSAXIS = 0x00000001,
  DIDF_RELAXIS = 0x00000002,
}

enum CONST_DICONDITIONFLAGS {
  DICONDITION_USE_BOTH_AXES = 0x00000001,
  DICONDITION_USE_DIRECTION = 0x00000002,
}

enum CONST_DIEPFLAGS {
  DIEP_DURATION = 0x00000001,
  DIEP_SAMPLEPERIOD = 0x00000002,
  DIEP_GAIN = 0x00000004,
  DIEP_TRIGGERBUTTON = 0x00000008,
  DIEP_TRIGGERREPEATINTERVAL = 0x00000010,
  DIEP_AXES = 0x00000020,
  DIEP_DIRECTION = 0x00000040,
  DIEP_ENVELOPE = 0x00000080,
  DIEP_TYPESPECIFICPARAMS = 0x00000100,
  DIEP_ALLPARAMS = 0x000003FF,
  DIEP_START = 0x20000000,
  DIEP_NORESTART = 0x40000000,
  DIEP_NODOWNLOAD = 0x80000000,
  DIEP_STARTDELAY = 0x00000200,
}

enum CONST_DISDDFLAGS {
  DISDD_DEFAULT = 0x00000000,
  DISDD_CONTINUE = 0x00000001,
}

enum CONST_DISFFCFLAGS {
  DISFFC_RESET = 0x00000001,
  DISFFC_STOPALL = 0x00000002,
  DISFFC_PAUSE = 0x00000004,
  DISFFC_CONTINUE = 0x00000008,
  DISFFC_SETACTUATORSON = 0x00000010,
  DISFFC_SETACTUATORSOFF = 0x00000020,
}

enum CONST_DIGFFSFLAGS {
  DIGFFS_EMPTY = 0x00000001,
  DIGFFS_STOPPED = 0x00000002,
  DIGFFS_PAUSED = 0x00000004,
  DIGFFS_ACTUATORSON = 0x00000010,
  DIGFFS_ACTUATORSOFF = 0x00000020,
  DIGFFS_POWERON = 0x00000040,
  DIGFFS_POWEROFF = 0x00000080,
  DIGFFS_SAFETYSWITCHON = 0x00000100,
  DIGFFS_SAFETYSWITCHOFF = 0x00000200,
  DIGFFS_USERFFSWITCHON = 0x00000400,
  DIGFFS_USERFFSWITCHOFF = 0x00000800,
  DIGFFS_DEVICELOST = 0x80000000,
}

enum CONST_DIEFTFLAGS {
  DIEFT_ALL = 0x00000000,
  DIEFT_CONSTANTFORCE = 0x00000001,
  DIEFT_RAMPFORCE = 0x00000002,
  DIEFT_PERIODIC = 0x00000003,
  DIEFT_CONDITION = 0x00000004,
  DIEFT_CUSTOMFORCE = 0x00000005,
  DIEFT_HARDWARE = 0x000000FF,
  DIEFT_FFATTACK = 0x00000200,
  DIEFT_FFFADE = 0x00000400,
  DIEFT_SATURATION = 0x00000800,
  DIEFT_POSNEGCOEFFICIENTS = 0x00001000,
  DIEFT_POSNEGSATURATION = 0x00002000,
  DIEFT_DEADBAND = 0x00004000,
  DIEFT_STARTDELAY = 0x00008000,
}

enum CONST_DI8DEVICETYPE {
  DI8DEVCLASS_ALL = 0x00000000,
  DI8DEVCLASS_DEVICE = 0x00000001,
  DI8DEVCLASS_POINTER = 0x00000002,
  DI8DEVCLASS_KEYBOARD = 0x00000003,
  DI8DEVCLASS_GAMECTRL = 0x00000004,
  DI8DEVTYPE_DEVICE = 0x00000011,
  DI8DEVTYPE_MOUSE = 0x00000012,
  DI8DEVTYPE_KEYBOARD = 0x00000013,
  DI8DEVTYPE_JOYSTICK = 0x00000014,
  DI8DEVTYPE_GAMEPAD = 0x00000015,
  DI8DEVTYPE_DRIVING = 0x00000016,
  DI8DEVTYPE_FLIGHT = 0x00000017,
  DI8DEVTYPE_1STPERSON = 0x00000018,
  DI8DEVTYPE_DEVICECTRL = 0x00000019,
  DI8DEVTYPE_SCREENPOINTER = 0x0000001A,
  DI8DEVTYPE_REMOTE = 0x0000001B,
  DI8DEVTYPE_SUPPLEMENTAL = 0x0000001C,
  DI8DEVTYPE_FORCEDWORD = 0x7F000000,
}

enum CONST_DIENUMDEVICESFLAGS {
  DIEDFL_ALLDEVICES = 0x00000000,
  DIEDFL_ATTACHEDONLY = 0x00000001,
  DIEDFL_FORCEFEEDBACK = 0x00000100,
  DIEDFL_INCLUDEALIASES = 0x00010000,
  DIEDFL_INCLUDEPHANTOMS = 0x00020000,
  DIEDFL_INCLUDEHIDDEN = 0x00040000,
}

enum CONST_DIGENRE {
  DIVIRTUAL_DRIVING_RACE = 0x01000000,
  DIAXIS_DRIVINGR_STEER = 0x01008A01,
  DIAXIS_DRIVINGR_ACCELERATE = 0x01039202,
  DIAXIS_DRIVINGR_BRAKE = 0x01041203,
  DIBUTTON_DRIVINGR_SHIFTUP = 0x01000C01,
  DIBUTTON_DRIVINGR_SHIFTDOWN = 0x01000C02,
  DIBUTTON_DRIVINGR_VIEW = 0x01001C03,
  DIBUTTON_DRIVINGR_MENU = 0x010004FD,
  DIAXIS_DRIVINGR_ACCEL_AND_BRAKE = 0x01014A04,
  DIHATSWITCH_DRIVINGR_GLANCE = 0x01004601,
  DIBUTTON_DRIVINGR_BRAKE = 0x01004C04,
  DIBUTTON_DRIVINGR_DASHBOARD = 0x01004405,
  DIBUTTON_DRIVINGR_AIDS = 0x01004406,
  DIBUTTON_DRIVINGR_MAP = 0x01004407,
  DIBUTTON_DRIVINGR_BOOST = 0x01004408,
  DIBUTTON_DRIVINGR_PIT = 0x01004409,
  DIBUTTON_DRIVINGR_ACCELERATE_LINK = 0x0103D4E0,
  DIBUTTON_DRIVINGR_STEER_LEFT_LINK = 0x0100CCE4,
  DIBUTTON_DRIVINGR_STEER_RIGHT_LINK = 0x0100CCEC,
  DIBUTTON_DRIVINGR_GLANCE_LEFT_LINK = 0x0107C4E4,
  DIBUTTON_DRIVINGR_GLANCE_RIGHT_LINK = 0x0107C4EC,
  DIBUTTON_DRIVINGR_DEVICE = 0x010044FE,
  DIBUTTON_DRIVINGR_PAUSE = 0x010044FC,
  DIVIRTUAL_DRIVING_COMBAT = 0x02000000,
  DIAXIS_DRIVINGC_STEER = 0x02008A01,
  DIAXIS_DRIVINGC_ACCELERATE = 0x02039202,
  DIAXIS_DRIVINGC_BRAKE = 0x02041203,
  DIBUTTON_DRIVINGC_FIRE = 0x02000C01,
  DIBUTTON_DRIVINGC_WEAPONS = 0x02000C02,
  DIBUTTON_DRIVINGC_TARGET = 0x02000C03,
  DIBUTTON_DRIVINGC_MENU = 0x020004FD,
  DIAXIS_DRIVINGC_ACCEL_AND_BRAKE = 0x02014A04,
  DIHATSWITCH_DRIVINGC_GLANCE = 0x02004601,
  DIBUTTON_DRIVINGC_SHIFTUP = 0x02004C04,
  DIBUTTON_DRIVINGC_SHIFTDOWN = 0x02004C05,
  DIBUTTON_DRIVINGC_DASHBOARD = 0x02004406,
  DIBUTTON_DRIVINGC_AIDS = 0x02004407,
  DIBUTTON_DRIVINGC_BRAKE = 0x02004C08,
  DIBUTTON_DRIVINGC_FIRESECONDARY = 0x02004C09,
  DIBUTTON_DRIVINGC_ACCELERATE_LINK = 0x0203D4E0,
  DIBUTTON_DRIVINGC_STEER_LEFT_LINK = 0x0200CCE4,
  DIBUTTON_DRIVINGC_STEER_RIGHT_LINK = 0x0200CCEC,
  DIBUTTON_DRIVINGC_GLANCE_LEFT_LINK = 0x0207C4E4,
  DIBUTTON_DRIVINGC_GLANCE_RIGHT_LINK = 0x0207C4EC,
  DIBUTTON_DRIVINGC_DEVICE = 0x020044FE,
  DIBUTTON_DRIVINGC_PAUSE = 0x020044FC,
  DIVIRTUAL_DRIVING_TANK = 0x03000000,
  DIAXIS_DRIVINGT_STEER = 0x03008A01,
  DIAXIS_DRIVINGT_BARREL = 0x03010202,
  DIAXIS_DRIVINGT_ACCELERATE = 0x03039203,
  DIAXIS_DRIVINGT_ROTATE = 0x03020204,
  DIBUTTON_DRIVINGT_FIRE = 0x03000C01,
  DIBUTTON_DRIVINGT_WEAPONS = 0x03000C02,
  DIBUTTON_DRIVINGT_TARGET = 0x03000C03,
  DIBUTTON_DRIVINGT_MENU = 0x030004FD,
  DIHATSWITCH_DRIVINGT_GLANCE = 0x03004601,
  DIAXIS_DRIVINGT_BRAKE = 0x03045205,
  DIAXIS_DRIVINGT_ACCEL_AND_BRAKE = 0x03014A06,
  DIBUTTON_DRIVINGT_VIEW = 0x03005C04,
  DIBUTTON_DRIVINGT_DASHBOARD = 0x03005C05,
  DIBUTTON_DRIVINGT_BRAKE = 0x03004C06,
  DIBUTTON_DRIVINGT_FIRESECONDARY = 0x03004C07,
  DIBUTTON_DRIVINGT_ACCELERATE_LINK = 0x0303D4E0,
  DIBUTTON_DRIVINGT_STEER_LEFT_LINK = 0x0300CCE4,
  DIBUTTON_DRIVINGT_STEER_RIGHT_LINK = 0x0300CCEC,
  DIBUTTON_DRIVINGT_BARREL_UP_LINK = 0x030144E0,
  DIBUTTON_DRIVINGT_BARREL_DOWN_LINK = 0x030144E8,
  DIBUTTON_DRIVINGT_ROTATE_LEFT_LINK = 0x030244E4,
  DIBUTTON_DRIVINGT_ROTATE_RIGHT_LINK = 0x030244EC,
  DIBUTTON_DRIVINGT_GLANCE_LEFT_LINK = 0x0307C4E4,
  DIBUTTON_DRIVINGT_GLANCE_RIGHT_LINK = 0x0307C4EC,
  DIBUTTON_DRIVINGT_DEVICE = 0x030044FE,
  DIBUTTON_DRIVINGT_PAUSE = 0x030044FC,
  DIVIRTUAL_FLYING_CIVILIAN = 0x04000000,
  DIAXIS_FLYINGC_BANK = 0x04008A01,
  DIAXIS_FLYINGC_PITCH = 0x04010A02,
  DIAXIS_FLYINGC_THROTTLE = 0x04039203,
  DIBUTTON_FLYINGC_VIEW = 0x04002401,
  DIBUTTON_FLYINGC_DISPLAY = 0x04002402,
  DIBUTTON_FLYINGC_GEAR = 0x04002C03,
  DIBUTTON_FLYINGC_MENU = 0x040004FD,
  DIHATSWITCH_FLYINGC_GLANCE = 0x04004601,
  DIAXIS_FLYINGC_BRAKE = 0x04046A04,
  DIAXIS_FLYINGC_RUDDER = 0x04025205,
  DIAXIS_FLYINGC_FLAPS = 0x04055A06,
  DIBUTTON_FLYINGC_FLAPSUP = 0x04006404,
  DIBUTTON_FLYINGC_FLAPSDOWN = 0x04006405,
  DIBUTTON_FLYINGC_BRAKE_LINK = 0x04046CE0,
  DIBUTTON_FLYINGC_FASTER_LINK = 0x0403D4E0,
  DIBUTTON_FLYINGC_SLOWER_LINK = 0x0403D4E8,
  DIBUTTON_FLYINGC_GLANCE_LEFT_LINK = 0x0407C4E4,
  DIBUTTON_FLYINGC_GLANCE_RIGHT_LINK = 0x0407C4EC,
  DIBUTTON_FLYINGC_GLANCE_UP_LINK = 0x0407C4E0,
  DIBUTTON_FLYINGC_GLANCE_DOWN_LINK = 0x0407C4E8,
  DIBUTTON_FLYINGC_DEVICE = 0x040044FE,
  DIBUTTON_FLYINGC_PAUSE = 0x040044FC,
  DIVIRTUAL_FLYING_MILITARY = 0x05000000,
  DIAXIS_FLYINGM_BANK = 0x05008A01,
  DIAXIS_FLYINGM_PITCH = 0x05010A02,
  DIAXIS_FLYINGM_THROTTLE = 0x05039203,
  DIBUTTON_FLYINGM_FIRE = 0x05000C01,
  DIBUTTON_FLYINGM_WEAPONS = 0x05000C02,
  DIBUTTON_FLYINGM_TARGET = 0x05000C03,
  DIBUTTON_FLYINGM_MENU = 0x050004FD,
  DIHATSWITCH_FLYINGM_GLANCE = 0x05004601,
  DIBUTTON_FLYINGM_COUNTER = 0x05005C04,
  DIAXIS_FLYINGM_RUDDER = 0x05024A04,
  DIAXIS_FLYINGM_BRAKE = 0x05046205,
  DIBUTTON_FLYINGM_VIEW = 0x05006405,
  DIBUTTON_FLYINGM_DISPLAY = 0x05006406,
  DIAXIS_FLYINGM_FLAPS = 0x05055206,
  DIBUTTON_FLYINGM_FLAPSUP = 0x05005407,
  DIBUTTON_FLYINGM_FLAPSDOWN = 0x05005408,
  DIBUTTON_FLYINGM_FIRESECONDARY = 0x05004C09,
  DIBUTTON_FLYINGM_GEAR = 0x0500640A,
  DIBUTTON_FLYINGM_BRAKE_LINK = 0x050464E0,
  DIBUTTON_FLYINGM_FASTER_LINK = 0x0503D4E0,
  DIBUTTON_FLYINGM_SLOWER_LINK = 0x0503D4E8,
  DIBUTTON_FLYINGM_GLANCE_LEFT_LINK = 0x0507C4E4,
  DIBUTTON_FLYINGM_GLANCE_RIGHT_LINK = 0x0507C4EC,
  DIBUTTON_FLYINGM_GLANCE_UP_LINK = 0x0507C4E0,
  DIBUTTON_FLYINGM_GLANCE_DOWN_LINK = 0x0507C4E8,
  DIBUTTON_FLYINGM_DEVICE = 0x050044FE,
  DIBUTTON_FLYINGM_PAUSE = 0x050044FC,
  DIVIRTUAL_FLYING_HELICOPTER = 0x06000000,
  DIAXIS_FLYINGH_BANK = 0x06008A01,
  DIAXIS_FLYINGH_PITCH = 0x06010A02,
  DIAXIS_FLYINGH_COLLECTIVE = 0x06018A03,
  DIBUTTON_FLYINGH_FIRE = 0x06001401,
  DIBUTTON_FLYINGH_WEAPONS = 0x06001402,
  DIBUTTON_FLYINGH_TARGET = 0x06001403,
  DIBUTTON_FLYINGH_MENU = 0x060004FD,
  DIHATSWITCH_FLYINGH_GLANCE = 0x06004601,
  DIAXIS_FLYINGH_TORQUE = 0x06025A04,
  DIAXIS_FLYINGH_THROTTLE = 0x0603DA05,
  DIBUTTON_FLYINGH_COUNTER = 0x06005404,
  DIBUTTON_FLYINGH_VIEW = 0x06006405,
  DIBUTTON_FLYINGH_GEAR = 0x06006406,
  DIBUTTON_FLYINGH_FIRESECONDARY = 0x06004C07,
  DIBUTTON_FLYINGH_FASTER_LINK = 0x0603DCE0,
  DIBUTTON_FLYINGH_SLOWER_LINK = 0x0603DCE8,
  DIBUTTON_FLYINGH_GLANCE_LEFT_LINK = 0x0607C4E4,
  DIBUTTON_FLYINGH_GLANCE_RIGHT_LINK = 0x0607C4EC,
  DIBUTTON_FLYINGH_GLANCE_UP_LINK = 0x0607C4E0,
  DIBUTTON_FLYINGH_GLANCE_DOWN_LINK = 0x0607C4E8,
  DIBUTTON_FLYINGH_DEVICE = 0x060044FE,
  DIBUTTON_FLYINGH_PAUSE = 0x060044FC,
  DIVIRTUAL_SPACESIM = 0x07000000,
  DIAXIS_SPACESIM_LATERAL = 0x07008201,
  DIAXIS_SPACESIM_MOVE = 0x07010202,
  DIAXIS_SPACESIM_THROTTLE = 0x07038203,
  DIBUTTON_SPACESIM_FIRE = 0x07000401,
  DIBUTTON_SPACESIM_WEAPONS = 0x07000402,
  DIBUTTON_SPACESIM_TARGET = 0x07000403,
  DIBUTTON_SPACESIM_MENU = 0x070004FD,
  DIHATSWITCH_SPACESIM_GLANCE = 0x07004601,
  DIAXIS_SPACESIM_CLIMB = 0x0701C204,
  DIAXIS_SPACESIM_ROTATE = 0x07024205,
  DIBUTTON_SPACESIM_VIEW = 0x07004404,
  DIBUTTON_SPACESIM_DISPLAY = 0x07004405,
  DIBUTTON_SPACESIM_RAISE = 0x07004406,
  DIBUTTON_SPACESIM_LOWER = 0x07004407,
  DIBUTTON_SPACESIM_GEAR = 0x07004408,
  DIBUTTON_SPACESIM_FIRESECONDARY = 0x07004409,
  DIBUTTON_SPACESIM_LEFT_LINK = 0x0700C4E4,
  DIBUTTON_SPACESIM_RIGHT_LINK = 0x0700C4EC,
  DIBUTTON_SPACESIM_FORWARD_LINK = 0x070144E0,
  DIBUTTON_SPACESIM_BACKWARD_LINK = 0x070144E8,
  DIBUTTON_SPACESIM_FASTER_LINK = 0x0703C4E0,
  DIBUTTON_SPACESIM_SLOWER_LINK = 0x0703C4E8,
  DIBUTTON_SPACESIM_TURN_LEFT_LINK = 0x070244E4,
  DIBUTTON_SPACESIM_TURN_RIGHT_LINK = 0x070244EC,
  DIBUTTON_SPACESIM_GLANCE_LEFT_LINK = 0x0707C4E4,
  DIBUTTON_SPACESIM_GLANCE_RIGHT_LINK = 0x0707C4EC,
  DIBUTTON_SPACESIM_GLANCE_UP_LINK = 0x0707C4E0,
  DIBUTTON_SPACESIM_GLANCE_DOWN_LINK = 0x0707C4E8,
  DIBUTTON_SPACESIM_DEVICE = 0x070044FE,
  DIBUTTON_SPACESIM_PAUSE = 0x070044FC,
  DIVIRTUAL_FIGHTING_HAND2HAND = 0x08000000,
  DIAXIS_FIGHTINGH_LATERAL = 0x08008201,
  DIAXIS_FIGHTINGH_MOVE = 0x08010202,
  DIBUTTON_FIGHTINGH_PUNCH = 0x08000401,
  DIBUTTON_FIGHTINGH_KICK = 0x08000402,
  DIBUTTON_FIGHTINGH_BLOCK = 0x08000403,
  DIBUTTON_FIGHTINGH_CROUCH = 0x08000404,
  DIBUTTON_FIGHTINGH_JUMP = 0x08000405,
  DIBUTTON_FIGHTINGH_SPECIAL1 = 0x08000406,
  DIBUTTON_FIGHTINGH_SPECIAL2 = 0x08000407,
  DIBUTTON_FIGHTINGH_MENU = 0x080004FD,
  DIBUTTON_FIGHTINGH_SELECT = 0x08004408,
  DIHATSWITCH_FIGHTINGH_SLIDE = 0x08004601,
  DIBUTTON_FIGHTINGH_DISPLAY = 0x08004409,
  DIAXIS_FIGHTINGH_ROTATE = 0x08024203,
  DIBUTTON_FIGHTINGH_DODGE = 0x0800440A,
  DIBUTTON_FIGHTINGH_LEFT_LINK = 0x0800C4E4,
  DIBUTTON_FIGHTINGH_RIGHT_LINK = 0x0800C4EC,
  DIBUTTON_FIGHTINGH_FORWARD_LINK = 0x080144E0,
  DIBUTTON_FIGHTINGH_BACKWARD_LINK = 0x080144E8,
  DIBUTTON_FIGHTINGH_DEVICE = 0x080044FE,
  DIBUTTON_FIGHTINGH_PAUSE = 0x080044FC,
  DIVIRTUAL_FIGHTING_FPS = 0x09000000,
  DIAXIS_FPS_ROTATE = 0x09008201,
  DIAXIS_FPS_MOVE = 0x09010202,
  DIBUTTON_FPS_FIRE = 0x09000401,
  DIBUTTON_FPS_WEAPONS = 0x09000402,
  DIBUTTON_FPS_APPLY = 0x09000403,
  DIBUTTON_FPS_SELECT = 0x09000404,
  DIBUTTON_FPS_CROUCH = 0x09000405,
  DIBUTTON_FPS_JUMP = 0x09000406,
  DIAXIS_FPS_LOOKUPDOWN = 0x09018203,
  DIBUTTON_FPS_STRAFE = 0x09000407,
  DIBUTTON_FPS_MENU = 0x090004FD,
  DIHATSWITCH_FPS_GLANCE = 0x09004601,
  DIBUTTON_FPS_DISPLAY = 0x09004408,
  DIAXIS_FPS_SIDESTEP = 0x09024204,
  DIBUTTON_FPS_DODGE = 0x09004409,
  DIBUTTON_FPS_GLANCEL = 0x0900440A,
  DIBUTTON_FPS_GLANCER = 0x0900440B,
  DIBUTTON_FPS_FIRESECONDARY = 0x0900440C,
  DIBUTTON_FPS_ROTATE_LEFT_LINK = 0x0900C4E4,
  DIBUTTON_FPS_ROTATE_RIGHT_LINK = 0x0900C4EC,
  DIBUTTON_FPS_FORWARD_LINK = 0x090144E0,
  DIBUTTON_FPS_BACKWARD_LINK = 0x090144E8,
  DIBUTTON_FPS_GLANCE_UP_LINK = 0x0901C4E0,
  DIBUTTON_FPS_GLANCE_DOWN_LINK = 0x0901C4E8,
  DIBUTTON_FPS_DEVICE = 0x090044FE,
  DIBUTTON_FPS_PAUSE = 0x090044FC,
  DIVIRTUAL_FIGHTING_THIRDPERSON = 0x0A000000,
  DIAXIS_TPS_TURN = 0x0A020201,
  DIAXIS_TPS_MOVE = 0x0A010202,
  DIBUTTON_TPS_RUN = 0x0A000401,
  DIBUTTON_TPS_ACTION = 0x0A000402,
  DIBUTTON_TPS_SELECT = 0x0A000403,
  DIBUTTON_TPS_USE = 0x0A000404,
  DIBUTTON_TPS_JUMP = 0x0A000405,
  DIBUTTON_TPS_MENU = 0x0A0004FD,
  DIHATSWITCH_TPS_GLANCE = 0x0A004601,
  DIBUTTON_TPS_VIEW = 0x0A004406,
  DIBUTTON_TPS_STEPLEFT = 0x0A004407,
  DIBUTTON_TPS_STEPRIGHT = 0x0A004408,
  DIAXIS_TPS_STEP = 0x0A00C203,
  DIBUTTON_TPS_DODGE = 0x0A004409,
  DIBUTTON_TPS_INVENTORY = 0x0A00440A,
  DIBUTTON_TPS_TURN_LEFT_LINK = 0x0A0244E4,
  DIBUTTON_TPS_TURN_RIGHT_LINK = 0x0A0244EC,
  DIBUTTON_TPS_FORWARD_LINK = 0x0A0144E0,
  DIBUTTON_TPS_BACKWARD_LINK = 0x0A0144E8,
  DIBUTTON_TPS_GLANCE_UP_LINK = 0x0A07C4E0,
  DIBUTTON_TPS_GLANCE_DOWN_LINK = 0x0A07C4E8,
  DIBUTTON_TPS_GLANCE_LEFT_LINK = 0x0A07C4E4,
  DIBUTTON_TPS_GLANCE_RIGHT_LINK = 0x0A07C4EC,
  DIBUTTON_TPS_DEVICE = 0x0A0044FE,
  DIBUTTON_TPS_PAUSE = 0x0A0044FC,
  DIVIRTUAL_STRATEGY_ROLEPLAYING = 0x0B000000,
  DIAXIS_STRATEGYR_LATERAL = 0x0B008201,
  DIAXIS_STRATEGYR_MOVE = 0x0B010202,
  DIBUTTON_STRATEGYR_GET = 0x0B000401,
  DIBUTTON_STRATEGYR_APPLY = 0x0B000402,
  DIBUTTON_STRATEGYR_SELECT = 0x0B000403,
  DIBUTTON_STRATEGYR_ATTACK = 0x0B000404,
  DIBUTTON_STRATEGYR_CAST = 0x0B000405,
  DIBUTTON_STRATEGYR_CROUCH = 0x0B000406,
  DIBUTTON_STRATEGYR_JUMP = 0x0B000407,
  DIBUTTON_STRATEGYR_MENU = 0x0B0004FD,
  DIHATSWITCH_STRATEGYR_GLANCE = 0x0B004601,
  DIBUTTON_STRATEGYR_MAP = 0x0B004408,
  DIBUTTON_STRATEGYR_DISPLAY = 0x0B004409,
  DIAXIS_STRATEGYR_ROTATE = 0x0B024203,
  DIBUTTON_STRATEGYR_LEFT_LINK = 0x0B00C4E4,
  DIBUTTON_STRATEGYR_RIGHT_LINK = 0x0B00C4EC,
  DIBUTTON_STRATEGYR_FORWARD_LINK = 0x0B0144E0,
  DIBUTTON_STRATEGYR_BACK_LINK = 0x0B0144E8,
  DIBUTTON_STRATEGYR_ROTATE_LEFT_LINK = 0x0B0244E4,
  DIBUTTON_STRATEGYR_ROTATE_RIGHT_LINK = 0x0B0244EC,
  DIBUTTON_STRATEGYR_DEVICE = 0x0B0044FE,
  DIBUTTON_STRATEGYR_PAUSE = 0x0B0044FC,
  DIVIRTUAL_STRATEGY_TURN = 0x0C000000,
  DIAXIS_STRATEGYT_LATERAL = 0x0C008201,
  DIAXIS_STRATEGYT_MOVE = 0x0C010202,
  DIBUTTON_STRATEGYT_SELECT = 0x0C000401,
  DIBUTTON_STRATEGYT_INSTRUCT = 0x0C000402,
  DIBUTTON_STRATEGYT_APPLY = 0x0C000403,
  DIBUTTON_STRATEGYT_TEAM = 0x0C000404,
  DIBUTTON_STRATEGYT_TURN = 0x0C000405,
  DIBUTTON_STRATEGYT_MENU = 0x0C0004FD,
  DIBUTTON_STRATEGYT_ZOOM = 0x0C004406,
  DIBUTTON_STRATEGYT_MAP = 0x0C004407,
  DIBUTTON_STRATEGYT_DISPLAY = 0x0C004408,
  DIBUTTON_STRATEGYT_LEFT_LINK = 0x0C00C4E4,
  DIBUTTON_STRATEGYT_RIGHT_LINK = 0x0C00C4EC,
  DIBUTTON_STRATEGYT_FORWARD_LINK = 0x0C0144E0,
  DIBUTTON_STRATEGYT_BACK_LINK = 0x0C0144E8,
  DIBUTTON_STRATEGYT_DEVICE = 0x0C0044FE,
  DIBUTTON_STRATEGYT_PAUSE = 0x0C0044FC,
  DIVIRTUAL_SPORTS_HUNTING = 0x0D000000,
  DIAXIS_HUNTING_LATERAL = 0x0D008201,
  DIAXIS_HUNTING_MOVE = 0x0D010202,
  DIBUTTON_HUNTING_FIRE = 0x0D000401,
  DIBUTTON_HUNTING_AIM = 0x0D000402,
  DIBUTTON_HUNTING_WEAPON = 0x0D000403,
  DIBUTTON_HUNTING_BINOCULAR = 0x0D000404,
  DIBUTTON_HUNTING_CALL = 0x0D000405,
  DIBUTTON_HUNTING_MAP = 0x0D000406,
  DIBUTTON_HUNTING_SPECIAL = 0x0D000407,
  DIBUTTON_HUNTING_MENU = 0x0D0004FD,
  DIHATSWITCH_HUNTING_GLANCE = 0x0D004601,
  DIBUTTON_HUNTING_DISPLAY = 0x0D004408,
  DIAXIS_HUNTING_ROTATE = 0x0D024203,
  DIBUTTON_HUNTING_CROUCH = 0x0D004409,
  DIBUTTON_HUNTING_JUMP = 0x0D00440A,
  DIBUTTON_HUNTING_FIRESECONDARY = 0x0D00440B,
  DIBUTTON_HUNTING_LEFT_LINK = 0x0D00C4E4,
  DIBUTTON_HUNTING_RIGHT_LINK = 0x0D00C4EC,
  DIBUTTON_HUNTING_FORWARD_LINK = 0x0D0144E0,
  DIBUTTON_HUNTING_BACK_LINK = 0x0D0144E8,
  DIBUTTON_HUNTING_ROTATE_LEFT_LINK = 0x0D0244E4,
  DIBUTTON_HUNTING_ROTATE_RIGHT_LINK = 0x0D0244EC,
  DIBUTTON_HUNTING_DEVICE = 0x0D0044FE,
  DIBUTTON_HUNTING_PAUSE = 0x0D0044FC,
  DIVIRTUAL_SPORTS_FISHING = 0x0E000000,
  DIAXIS_FISHING_LATERAL = 0x0E008201,
  DIAXIS_FISHING_MOVE = 0x0E010202,
  DIBUTTON_FISHING_CAST = 0x0E000401,
  DIBUTTON_FISHING_TYPE = 0x0E000402,
  DIBUTTON_FISHING_BINOCULAR = 0x0E000403,
  DIBUTTON_FISHING_BAIT = 0x0E000404,
  DIBUTTON_FISHING_MAP = 0x0E000405,
  DIBUTTON_FISHING_MENU = 0x0E0004FD,
  DIHATSWITCH_FISHING_GLANCE = 0x0E004601,
  DIBUTTON_FISHING_DISPLAY = 0x0E004406,
  DIAXIS_FISHING_ROTATE = 0x0E024203,
  DIBUTTON_FISHING_CROUCH = 0x0E004407,
  DIBUTTON_FISHING_JUMP = 0x0E004408,
  DIBUTTON_FISHING_LEFT_LINK = 0x0E00C4E4,
  DIBUTTON_FISHING_RIGHT_LINK = 0x0E00C4EC,
  DIBUTTON_FISHING_FORWARD_LINK = 0x0E0144E0,
  DIBUTTON_FISHING_BACK_LINK = 0x0E0144E8,
  DIBUTTON_FISHING_ROTATE_LEFT_LINK = 0x0E0244E4,
  DIBUTTON_FISHING_ROTATE_RIGHT_LINK = 0x0E0244EC,
  DIBUTTON_FISHING_DEVICE = 0x0E0044FE,
  DIBUTTON_FISHING_PAUSE = 0x0E0044FC,
  DIVIRTUAL_SPORTS_BASEBALL_BAT = 0x0F000000,
  DIAXIS_BASEBALLB_LATERAL = 0x0F008201,
  DIAXIS_BASEBALLB_MOVE = 0x0F010202,
  DIBUTTON_BASEBALLB_SELECT = 0x0F000401,
  DIBUTTON_BASEBALLB_NORMAL = 0x0F000402,
  DIBUTTON_BASEBALLB_POWER = 0x0F000403,
  DIBUTTON_BASEBALLB_BUNT = 0x0F000404,
  DIBUTTON_BASEBALLB_STEAL = 0x0F000405,
  DIBUTTON_BASEBALLB_BURST = 0x0F000406,
  DIBUTTON_BASEBALLB_SLIDE = 0x0F000407,
  DIBUTTON_BASEBALLB_CONTACT = 0x0F000408,
  DIBUTTON_BASEBALLB_MENU = 0x0F0004FD,
  DIBUTTON_BASEBALLB_NOSTEAL = 0x0F004409,
  DIBUTTON_BASEBALLB_BOX = 0x0F00440A,
  DIBUTTON_BASEBALLB_LEFT_LINK = 0x0F00C4E4,
  DIBUTTON_BASEBALLB_RIGHT_LINK = 0x0F00C4EC,
  DIBUTTON_BASEBALLB_FORWARD_LINK = 0x0F0144E0,
  DIBUTTON_BASEBALLB_BACK_LINK = 0x0F0144E8,
  DIBUTTON_BASEBALLB_DEVICE = 0x0F0044FE,
  DIBUTTON_BASEBALLB_PAUSE = 0x0F0044FC,
  DIVIRTUAL_SPORTS_BASEBALL_PITCH = 0x10000000,
  DIAXIS_BASEBALLP_LATERAL = 0x10008201,
  DIAXIS_BASEBALLP_MOVE = 0x10010202,
  DIBUTTON_BASEBALLP_SELECT = 0x10000401,
  DIBUTTON_BASEBALLP_PITCH = 0x10000402,
  DIBUTTON_BASEBALLP_BASE = 0x10000403,
  DIBUTTON_BASEBALLP_THROW = 0x10000404,
  DIBUTTON_BASEBALLP_FAKE = 0x10000405,
  DIBUTTON_BASEBALLP_MENU = 0x100004FD,
  DIBUTTON_BASEBALLP_WALK = 0x10004406,
  DIBUTTON_BASEBALLP_LOOK = 0x10004407,
  DIBUTTON_BASEBALLP_LEFT_LINK = 0x1000C4E4,
  DIBUTTON_BASEBALLP_RIGHT_LINK = 0x1000C4EC,
  DIBUTTON_BASEBALLP_FORWARD_LINK = 0x100144E0,
  DIBUTTON_BASEBALLP_BACK_LINK = 0x100144E8,
  DIBUTTON_BASEBALLP_DEVICE = 0x100044FE,
  DIBUTTON_BASEBALLP_PAUSE = 0x100044FC,
  DIVIRTUAL_SPORTS_BASEBALL_FIELD = 0x11000000,
  DIAXIS_BASEBALLF_LATERAL = 0x11008201,
  DIAXIS_BASEBALLF_MOVE = 0x11010202,
  DIBUTTON_BASEBALLF_NEAREST = 0x11000401,
  DIBUTTON_BASEBALLF_THROW1 = 0x11000402,
  DIBUTTON_BASEBALLF_THROW2 = 0x11000403,
  DIBUTTON_BASEBALLF_BURST = 0x11000404,
  DIBUTTON_BASEBALLF_JUMP = 0x11000405,
  DIBUTTON_BASEBALLF_DIVE = 0x11000406,
  DIBUTTON_BASEBALLF_MENU = 0x110004FD,
  DIBUTTON_BASEBALLF_SHIFTIN = 0x11004407,
  DIBUTTON_BASEBALLF_SHIFTOUT = 0x11004408,
  DIBUTTON_BASEBALLF_AIM_LEFT_LINK = 0x1100C4E4,
  DIBUTTON_BASEBALLF_AIM_RIGHT_LINK = 0x1100C4EC,
  DIBUTTON_BASEBALLF_FORWARD_LINK = 0x110144E0,
  DIBUTTON_BASEBALLF_BACK_LINK = 0x110144E8,
  DIBUTTON_BASEBALLF_DEVICE = 0x110044FE,
  DIBUTTON_BASEBALLF_PAUSE = 0x110044FC,
  DIVIRTUAL_SPORTS_BASKETBALL_OFFENSE = 0x12000000,
  DIAXIS_BBALLO_LATERAL = 0x12008201,
  DIAXIS_BBALLO_MOVE = 0x12010202,
  DIBUTTON_BBALLO_SHOOT = 0x12000401,
  DIBUTTON_BBALLO_DUNK = 0x12000402,
  DIBUTTON_BBALLO_PASS = 0x12000403,
  DIBUTTON_BBALLO_FAKE = 0x12000404,
  DIBUTTON_BBALLO_SPECIAL = 0x12000405,
  DIBUTTON_BBALLO_PLAYER = 0x12000406,
  DIBUTTON_BBALLO_BURST = 0x12000407,
  DIBUTTON_BBALLO_CALL = 0x12000408,
  DIBUTTON_BBALLO_MENU = 0x120004FD,
  DIHATSWITCH_BBALLO_GLANCE = 0x12004601,
  DIBUTTON_BBALLO_SCREEN = 0x12004409,
  DIBUTTON_BBALLO_PLAY = 0x1200440A,
  DIBUTTON_BBALLO_JAB = 0x1200440B,
  DIBUTTON_BBALLO_POST = 0x1200440C,
  DIBUTTON_BBALLO_TIMEOUT = 0x1200440D,
  DIBUTTON_BBALLO_SUBSTITUTE = 0x1200440E,
  DIBUTTON_BBALLO_LEFT_LINK = 0x1200C4E4,
  DIBUTTON_BBALLO_RIGHT_LINK = 0x1200C4EC,
  DIBUTTON_BBALLO_FORWARD_LINK = 0x120144E0,
  DIBUTTON_BBALLO_BACK_LINK = 0x120144E8,
  DIBUTTON_BBALLO_DEVICE = 0x120044FE,
  DIBUTTON_BBALLO_PAUSE = 0x120044FC,
  DIVIRTUAL_SPORTS_BASKETBALL_DEFENSE = 0x13000000,
  DIAXIS_BBALLD_LATERAL = 0x13008201,
  DIAXIS_BBALLD_MOVE = 0x13010202,
  DIBUTTON_BBALLD_JUMP = 0x13000401,
  DIBUTTON_BBALLD_STEAL = 0x13000402,
  DIBUTTON_BBALLD_FAKE = 0x13000403,
  DIBUTTON_BBALLD_SPECIAL = 0x13000404,
  DIBUTTON_BBALLD_PLAYER = 0x13000405,
  DIBUTTON_BBALLD_BURST = 0x13000406,
  DIBUTTON_BBALLD_PLAY = 0x13000407,
  DIBUTTON_BBALLD_MENU = 0x130004FD,
  DIHATSWITCH_BBALLD_GLANCE = 0x13004601,
  DIBUTTON_BBALLD_TIMEOUT = 0x13004408,
  DIBUTTON_BBALLD_SUBSTITUTE = 0x13004409,
  DIBUTTON_BBALLD_LEFT_LINK = 0x1300C4E4,
  DIBUTTON_BBALLD_RIGHT_LINK = 0x1300C4EC,
  DIBUTTON_BBALLD_FORWARD_LINK = 0x130144E0,
  DIBUTTON_BBALLD_BACK_LINK = 0x130144E8,
  DIBUTTON_BBALLD_DEVICE = 0x130044FE,
  DIBUTTON_BBALLD_PAUSE = 0x130044FC,
  DIVIRTUAL_SPORTS_FOOTBALL_FIELD = 0x14000000,
  DIBUTTON_FOOTBALLP_PLAY = 0x14000401,
  DIBUTTON_FOOTBALLP_SELECT = 0x14000402,
  DIBUTTON_FOOTBALLP_HELP = 0x14000403,
  DIBUTTON_FOOTBALLP_MENU = 0x140004FD,
  DIBUTTON_FOOTBALLP_DEVICE = 0x140044FE,
  DIBUTTON_FOOTBALLP_PAUSE = 0x140044FC,
  DIVIRTUAL_SPORTS_FOOTBALL_QBCK = 0x15000000,
  DIAXIS_FOOTBALLQ_LATERAL = 0x15008201,
  DIAXIS_FOOTBALLQ_MOVE = 0x15010202,
  DIBUTTON_FOOTBALLQ_SELECT = 0x15000401,
  DIBUTTON_FOOTBALLQ_SNAP = 0x15000402,
  DIBUTTON_FOOTBALLQ_JUMP = 0x15000403,
  DIBUTTON_FOOTBALLQ_SLIDE = 0x15000404,
  DIBUTTON_FOOTBALLQ_PASS = 0x15000405,
  DIBUTTON_FOOTBALLQ_FAKE = 0x15000406,
  DIBUTTON_FOOTBALLQ_MENU = 0x150004FD,
  DIBUTTON_FOOTBALLQ_FAKESNAP = 0x15004407,
  DIBUTTON_FOOTBALLQ_MOTION = 0x15004408,
  DIBUTTON_FOOTBALLQ_AUDIBLE = 0x15004409,
  DIBUTTON_FOOTBALLQ_LEFT_LINK = 0x1500C4E4,
  DIBUTTON_FOOTBALLQ_RIGHT_LINK = 0x1500C4EC,
  DIBUTTON_FOOTBALLQ_FORWARD_LINK = 0x150144E0,
  DIBUTTON_FOOTBALLQ_BACK_LINK = 0x150144E8,
  DIBUTTON_FOOTBALLQ_DEVICE = 0x150044FE,
  DIBUTTON_FOOTBALLQ_PAUSE = 0x150044FC,
  DIVIRTUAL_SPORTS_FOOTBALL_OFFENSE = 0x16000000,
  DIAXIS_FOOTBALLO_LATERAL = 0x16008201,
  DIAXIS_FOOTBALLO_MOVE = 0x16010202,
  DIBUTTON_FOOTBALLO_JUMP = 0x16000401,
  DIBUTTON_FOOTBALLO_LEFTARM = 0x16000402,
  DIBUTTON_FOOTBALLO_RIGHTARM = 0x16000403,
  DIBUTTON_FOOTBALLO_THROW = 0x16000404,
  DIBUTTON_FOOTBALLO_SPIN = 0x16000405,
  DIBUTTON_FOOTBALLO_MENU = 0x160004FD,
  DIBUTTON_FOOTBALLO_JUKE = 0x16004406,
  DIBUTTON_FOOTBALLO_SHOULDER = 0x16004407,
  DIBUTTON_FOOTBALLO_TURBO = 0x16004408,
  DIBUTTON_FOOTBALLO_DIVE = 0x16004409,
  DIBUTTON_FOOTBALLO_ZOOM = 0x1600440A,
  DIBUTTON_FOOTBALLO_SUBSTITUTE = 0x1600440B,
  DIBUTTON_FOOTBALLO_LEFT_LINK = 0x1600C4E4,
  DIBUTTON_FOOTBALLO_RIGHT_LINK = 0x1600C4EC,
  DIBUTTON_FOOTBALLO_FORWARD_LINK = 0x160144E0,
  DIBUTTON_FOOTBALLO_BACK_LINK = 0x160144E8,
  DIBUTTON_FOOTBALLO_DEVICE = 0x160044FE,
  DIBUTTON_FOOTBALLO_PAUSE = 0x160044FC,
  DIVIRTUAL_SPORTS_FOOTBALL_DEFENSE = 0x17000000,
  DIAXIS_FOOTBALLD_LATERAL = 0x17008201,
  DIAXIS_FOOTBALLD_MOVE = 0x17010202,
  DIBUTTON_FOOTBALLD_PLAY = 0x17000401,
  DIBUTTON_FOOTBALLD_SELECT = 0x17000402,
  DIBUTTON_FOOTBALLD_JUMP = 0x17000403,
  DIBUTTON_FOOTBALLD_TACKLE = 0x17000404,
  DIBUTTON_FOOTBALLD_FAKE = 0x17000405,
  DIBUTTON_FOOTBALLD_SUPERTACKLE = 0x17000406,
  DIBUTTON_FOOTBALLD_MENU = 0x170004FD,
  DIBUTTON_FOOTBALLD_SPIN = 0x17004407,
  DIBUTTON_FOOTBALLD_SWIM = 0x17004408,
  DIBUTTON_FOOTBALLD_BULLRUSH = 0x17004409,
  DIBUTTON_FOOTBALLD_RIP = 0x1700440A,
  DIBUTTON_FOOTBALLD_AUDIBLE = 0x1700440B,
  DIBUTTON_FOOTBALLD_ZOOM = 0x1700440C,
  DIBUTTON_FOOTBALLD_SUBSTITUTE = 0x1700440D,
  DIBUTTON_FOOTBALLD_LEFT_LINK = 0x1700C4E4,
  DIBUTTON_FOOTBALLD_RIGHT_LINK = 0x1700C4EC,
  DIBUTTON_FOOTBALLD_FORWARD_LINK = 0x170144E0,
  DIBUTTON_FOOTBALLD_BACK_LINK = 0x170144E8,
  DIBUTTON_FOOTBALLD_DEVICE = 0x170044FE,
  DIBUTTON_FOOTBALLD_PAUSE = 0x170044FC,
  DIVIRTUAL_SPORTS_GOLF = 0x18000000,
  DIAXIS_GOLF_LATERAL = 0x18008201,
  DIAXIS_GOLF_MOVE = 0x18010202,
  DIBUTTON_GOLF_SWING = 0x18000401,
  DIBUTTON_GOLF_SELECT = 0x18000402,
  DIBUTTON_GOLF_UP = 0x18000403,
  DIBUTTON_GOLF_DOWN = 0x18000404,
  DIBUTTON_GOLF_TERRAIN = 0x18000405,
  DIBUTTON_GOLF_FLYBY = 0x18000406,
  DIBUTTON_GOLF_MENU = 0x180004FD,
  DIHATSWITCH_GOLF_SCROLL = 0x18004601,
  DIBUTTON_GOLF_ZOOM = 0x18004407,
  DIBUTTON_GOLF_TIMEOUT = 0x18004408,
  DIBUTTON_GOLF_SUBSTITUTE = 0x18004409,
  DIBUTTON_GOLF_LEFT_LINK = 0x1800C4E4,
  DIBUTTON_GOLF_RIGHT_LINK = 0x1800C4EC,
  DIBUTTON_GOLF_FORWARD_LINK = 0x180144E0,
  DIBUTTON_GOLF_BACK_LINK = 0x180144E8,
  DIBUTTON_GOLF_DEVICE = 0x180044FE,
  DIBUTTON_GOLF_PAUSE = 0x180044FC,
  DIVIRTUAL_SPORTS_HOCKEY_OFFENSE = 0x19000000,
  DIAXIS_HOCKEYO_LATERAL = 0x19008201,
  DIAXIS_HOCKEYO_MOVE = 0x19010202,
  DIBUTTON_HOCKEYO_SHOOT = 0x19000401,
  DIBUTTON_HOCKEYO_PASS = 0x19000402,
  DIBUTTON_HOCKEYO_BURST = 0x19000403,
  DIBUTTON_HOCKEYO_SPECIAL = 0x19000404,
  DIBUTTON_HOCKEYO_FAKE = 0x19000405,
  DIBUTTON_HOCKEYO_MENU = 0x190004FD,
  DIHATSWITCH_HOCKEYO_SCROLL = 0x19004601,
  DIBUTTON_HOCKEYO_ZOOM = 0x19004406,
  DIBUTTON_HOCKEYO_STRATEGY = 0x19004407,
  DIBUTTON_HOCKEYO_TIMEOUT = 0x19004408,
  DIBUTTON_HOCKEYO_SUBSTITUTE = 0x19004409,
  DIBUTTON_HOCKEYO_LEFT_LINK = 0x1900C4E4,
  DIBUTTON_HOCKEYO_RIGHT_LINK = 0x1900C4EC,
  DIBUTTON_HOCKEYO_FORWARD_LINK = 0x190144E0,
  DIBUTTON_HOCKEYO_BACK_LINK = 0x190144E8,
  DIBUTTON_HOCKEYO_DEVICE = 0x190044FE,
  DIBUTTON_HOCKEYO_PAUSE = 0x190044FC,
  DIVIRTUAL_SPORTS_HOCKEY_DEFENSE = 0x1A000000,
  DIAXIS_HOCKEYD_LATERAL = 0x1A008201,
  DIAXIS_HOCKEYD_MOVE = 0x1A010202,
  DIBUTTON_HOCKEYD_PLAYER = 0x1A000401,
  DIBUTTON_HOCKEYD_STEAL = 0x1A000402,
  DIBUTTON_HOCKEYD_BURST = 0x1A000403,
  DIBUTTON_HOCKEYD_BLOCK = 0x1A000404,
  DIBUTTON_HOCKEYD_FAKE = 0x1A000405,
  DIBUTTON_HOCKEYD_MENU = 0x1A0004FD,
  DIHATSWITCH_HOCKEYD_SCROLL = 0x1A004601,
  DIBUTTON_HOCKEYD_ZOOM = 0x1A004406,
  DIBUTTON_HOCKEYD_STRATEGY = 0x1A004407,
  DIBUTTON_HOCKEYD_TIMEOUT = 0x1A004408,
  DIBUTTON_HOCKEYD_SUBSTITUTE = 0x1A004409,
  DIBUTTON_HOCKEYD_LEFT_LINK = 0x1A00C4E4,
  DIBUTTON_HOCKEYD_RIGHT_LINK = 0x1A00C4EC,
  DIBUTTON_HOCKEYD_FORWARD_LINK = 0x1A0144E0,
  DIBUTTON_HOCKEYD_BACK_LINK = 0x1A0144E8,
  DIBUTTON_HOCKEYD_DEVICE = 0x1A0044FE,
  DIBUTTON_HOCKEYD_PAUSE = 0x1A0044FC,
  DIVIRTUAL_SPORTS_HOCKEY_GOALIE = 0x1B000000,
  DIAXIS_HOCKEYG_LATERAL = 0x1B008201,
  DIAXIS_HOCKEYG_MOVE = 0x1B010202,
  DIBUTTON_HOCKEYG_PASS = 0x1B000401,
  DIBUTTON_HOCKEYG_POKE = 0x1B000402,
  DIBUTTON_HOCKEYG_STEAL = 0x1B000403,
  DIBUTTON_HOCKEYG_BLOCK = 0x1B000404,
  DIBUTTON_HOCKEYG_MENU = 0x1B0004FD,
  DIHATSWITCH_HOCKEYG_SCROLL = 0x1B004601,
  DIBUTTON_HOCKEYG_ZOOM = 0x1B004405,
  DIBUTTON_HOCKEYG_STRATEGY = 0x1B004406,
  DIBUTTON_HOCKEYG_TIMEOUT = 0x1B004407,
  DIBUTTON_HOCKEYG_SUBSTITUTE = 0x1B004408,
  DIBUTTON_HOCKEYG_LEFT_LINK = 0x1B00C4E4,
  DIBUTTON_HOCKEYG_RIGHT_LINK = 0x1B00C4EC,
  DIBUTTON_HOCKEYG_FORWARD_LINK = 0x1B0144E0,
  DIBUTTON_HOCKEYG_BACK_LINK = 0x1B0144E8,
  DIBUTTON_HOCKEYG_DEVICE = 0x1B0044FE,
  DIBUTTON_HOCKEYG_PAUSE = 0x1B0044FC,
  DIVIRTUAL_SPORTS_BIKING_MOUNTAIN = 0x1C000000,
  DIAXIS_BIKINGM_TURN = 0x1C008201,
  DIAXIS_BIKINGM_PEDAL = 0x1C010202,
  DIBUTTON_BIKINGM_JUMP = 0x1C000401,
  DIBUTTON_BIKINGM_CAMERA = 0x1C000402,
  DIBUTTON_BIKINGM_SPECIAL1 = 0x1C000403,
  DIBUTTON_BIKINGM_SELECT = 0x1C000404,
  DIBUTTON_BIKINGM_SPECIAL2 = 0x1C000405,
  DIBUTTON_BIKINGM_MENU = 0x1C0004FD,
  DIHATSWITCH_BIKINGM_SCROLL = 0x1C004601,
  DIBUTTON_BIKINGM_ZOOM = 0x1C004406,
  DIAXIS_BIKINGM_BRAKE = 0x1C044203,
  DIBUTTON_BIKINGM_LEFT_LINK = 0x1C00C4E4,
  DIBUTTON_BIKINGM_RIGHT_LINK = 0x1C00C4EC,
  DIBUTTON_BIKINGM_FASTER_LINK = 0x1C0144E0,
  DIBUTTON_BIKINGM_SLOWER_LINK = 0x1C0144E8,
  DIBUTTON_BIKINGM_BRAKE_BUTTON_LINK = 0x1C0444E8,
  DIBUTTON_BIKINGM_DEVICE = 0x1C0044FE,
  DIBUTTON_BIKINGM_PAUSE = 0x1C0044FC,
  DIVIRTUAL_SPORTS_SKIING = 0x1D000000,
  DIAXIS_SKIING_TURN = 0x1D008201,
  DIAXIS_SKIING_SPEED = 0x1D010202,
  DIBUTTON_SKIING_JUMP = 0x1D000401,
  DIBUTTON_SKIING_CROUCH = 0x1D000402,
  DIBUTTON_SKIING_CAMERA = 0x1D000403,
  DIBUTTON_SKIING_SPECIAL1 = 0x1D000404,
  DIBUTTON_SKIING_SELECT = 0x1D000405,
  DIBUTTON_SKIING_SPECIAL2 = 0x1D000406,
  DIBUTTON_SKIING_MENU = 0x1D0004FD,
  DIHATSWITCH_SKIING_GLANCE = 0x1D004601,
  DIBUTTON_SKIING_ZOOM = 0x1D004407,
  DIBUTTON_SKIING_LEFT_LINK = 0x1D00C4E4,
  DIBUTTON_SKIING_RIGHT_LINK = 0x1D00C4EC,
  DIBUTTON_SKIING_FASTER_LINK = 0x1D0144E0,
  DIBUTTON_SKIING_SLOWER_LINK = 0x1D0144E8,
  DIBUTTON_SKIING_DEVICE = 0x1D0044FE,
  DIBUTTON_SKIING_PAUSE = 0x1D0044FC,
  DIVIRTUAL_SPORTS_SOCCER_OFFENSE = 0x1E000000,
  DIAXIS_SOCCERO_LATERAL = 0x1E008201,
  DIAXIS_SOCCERO_MOVE = 0x1E010202,
  DIAXIS_SOCCERO_BEND = 0x1E018203,
  DIBUTTON_SOCCERO_SHOOT = 0x1E000401,
  DIBUTTON_SOCCERO_PASS = 0x1E000402,
  DIBUTTON_SOCCERO_FAKE = 0x1E000403,
  DIBUTTON_SOCCERO_PLAYER = 0x1E000404,
  DIBUTTON_SOCCERO_SPECIAL1 = 0x1E000405,
  DIBUTTON_SOCCERO_SELECT = 0x1E000406,
  DIBUTTON_SOCCERO_MENU = 0x1E0004FD,
  DIHATSWITCH_SOCCERO_GLANCE = 0x1E004601,
  DIBUTTON_SOCCERO_SUBSTITUTE = 0x1E004407,
  DIBUTTON_SOCCERO_SHOOTLOW = 0x1E004408,
  DIBUTTON_SOCCERO_SHOOTHIGH = 0x1E004409,
  DIBUTTON_SOCCERO_PASSTHRU = 0x1E00440A,
  DIBUTTON_SOCCERO_SPRINT = 0x1E00440B,
  DIBUTTON_SOCCERO_CONTROL = 0x1E00440C,
  DIBUTTON_SOCCERO_HEAD = 0x1E00440D,
  DIBUTTON_SOCCERO_LEFT_LINK = 0x1E00C4E4,
  DIBUTTON_SOCCERO_RIGHT_LINK = 0x1E00C4EC,
  DIBUTTON_SOCCERO_FORWARD_LINK = 0x1E0144E0,
  DIBUTTON_SOCCERO_BACK_LINK = 0x1E0144E8,
  DIBUTTON_SOCCERO_DEVICE = 0x1E0044FE,
  DIBUTTON_SOCCERO_PAUSE = 0x1E0044FC,
  DIVIRTUAL_SPORTS_SOCCER_DEFENSE = 0x1F000000,
  DIAXIS_SOCCERD_LATERAL = 0x1F008201,
  DIAXIS_SOCCERD_MOVE = 0x1F010202,
  DIBUTTON_SOCCERD_BLOCK = 0x1F000401,
  DIBUTTON_SOCCERD_STEAL = 0x1F000402,
  DIBUTTON_SOCCERD_FAKE = 0x1F000403,
  DIBUTTON_SOCCERD_PLAYER = 0x1F000404,
  DIBUTTON_SOCCERD_SPECIAL = 0x1F000405,
  DIBUTTON_SOCCERD_SELECT = 0x1F000406,
  DIBUTTON_SOCCERD_SLIDE = 0x1F000407,
  DIBUTTON_SOCCERD_MENU = 0x1F0004FD,
  DIHATSWITCH_SOCCERD_GLANCE = 0x1F004601,
  DIBUTTON_SOCCERD_FOUL = 0x1F004408,
  DIBUTTON_SOCCERD_HEAD = 0x1F004409,
  DIBUTTON_SOCCERD_CLEAR = 0x1F00440A,
  DIBUTTON_SOCCERD_GOALIECHARGE = 0x1F00440B,
  DIBUTTON_SOCCERD_SUBSTITUTE = 0x1F00440C,
  DIBUTTON_SOCCERD_LEFT_LINK = 0x1F00C4E4,
  DIBUTTON_SOCCERD_RIGHT_LINK = 0x1F00C4EC,
  DIBUTTON_SOCCERD_FORWARD_LINK = 0x1F0144E0,
  DIBUTTON_SOCCERD_BACK_LINK = 0x1F0144E8,
  DIBUTTON_SOCCERD_DEVICE = 0x1F0044FE,
  DIBUTTON_SOCCERD_PAUSE = 0x1F0044FC,
  DIVIRTUAL_SPORTS_RACQUET = 0x20000000,
  DIAXIS_RACQUET_LATERAL = 0x20008201,
  DIAXIS_RACQUET_MOVE = 0x20010202,
  DIBUTTON_RACQUET_SWING = 0x20000401,
  DIBUTTON_RACQUET_BACKSWING = 0x20000402,
  DIBUTTON_RACQUET_SMASH = 0x20000403,
  DIBUTTON_RACQUET_SPECIAL = 0x20000404,
  DIBUTTON_RACQUET_SELECT = 0x20000405,
  DIBUTTON_RACQUET_MENU = 0x200004FD,
  DIHATSWITCH_RACQUET_GLANCE = 0x20004601,
  DIBUTTON_RACQUET_TIMEOUT = 0x20004406,
  DIBUTTON_RACQUET_SUBSTITUTE = 0x20004407,
  DIBUTTON_RACQUET_LEFT_LINK = 0x2000C4E4,
  DIBUTTON_RACQUET_RIGHT_LINK = 0x2000C4EC,
  DIBUTTON_RACQUET_FORWARD_LINK = 0x200144E0,
  DIBUTTON_RACQUET_BACK_LINK = 0x200144E8,
  DIBUTTON_RACQUET_DEVICE = 0x200044FE,
  DIBUTTON_RACQUET_PAUSE = 0x200044FC,
  DIVIRTUAL_ARCADE_SIDE2SIDE = 0x21000000,
  DIAXIS_ARCADES_LATERAL = 0x21008201,
  DIAXIS_ARCADES_MOVE = 0x21010202,
  DIBUTTON_ARCADES_THROW = 0x21000401,
  DIBUTTON_ARCADES_CARRY = 0x21000402,
  DIBUTTON_ARCADES_ATTACK = 0x21000403,
  DIBUTTON_ARCADES_SPECIAL = 0x21000404,
  DIBUTTON_ARCADES_SELECT = 0x21000405,
  DIBUTTON_ARCADES_MENU = 0x210004FD,
  DIHATSWITCH_ARCADES_VIEW = 0x21004601,
  DIBUTTON_ARCADES_LEFT_LINK = 0x2100C4E4,
  DIBUTTON_ARCADES_RIGHT_LINK = 0x2100C4EC,
  DIBUTTON_ARCADES_FORWARD_LINK = 0x210144E0,
  DIBUTTON_ARCADES_BACK_LINK = 0x210144E8,
  DIBUTTON_ARCADES_VIEW_UP_LINK = 0x2107C4E0,
  DIBUTTON_ARCADES_VIEW_DOWN_LINK = 0x2107C4E8,
  DIBUTTON_ARCADES_VIEW_LEFT_LINK = 0x2107C4E4,
  DIBUTTON_ARCADES_VIEW_RIGHT_LINK = 0x2107C4EC,
  DIBUTTON_ARCADES_DEVICE = 0x210044FE,
  DIBUTTON_ARCADES_PAUSE = 0x210044FC,
  DIVIRTUAL_ARCADE_PLATFORM = 0x22000000,
  DIAXIS_ARCADEP_LATERAL = 0x22008201,
  DIAXIS_ARCADEP_MOVE = 0x22010202,
  DIBUTTON_ARCADEP_JUMP = 0x22000401,
  DIBUTTON_ARCADEP_FIRE = 0x22000402,
  DIBUTTON_ARCADEP_CROUCH = 0x22000403,
  DIBUTTON_ARCADEP_SPECIAL = 0x22000404,
  DIBUTTON_ARCADEP_SELECT = 0x22000405,
  DIBUTTON_ARCADEP_MENU = 0x220004FD,
  DIHATSWITCH_ARCADEP_VIEW = 0x22004601,
  DIBUTTON_ARCADEP_FIRESECONDARY = 0x22004406,
  DIBUTTON_ARCADEP_LEFT_LINK = 0x2200C4E4,
  DIBUTTON_ARCADEP_RIGHT_LINK = 0x2200C4EC,
  DIBUTTON_ARCADEP_FORWARD_LINK = 0x220144E0,
  DIBUTTON_ARCADEP_BACK_LINK = 0x220144E8,
  DIBUTTON_ARCADEP_VIEW_UP_LINK = 0x2207C4E0,
  DIBUTTON_ARCADEP_VIEW_DOWN_LINK = 0x2207C4E8,
  DIBUTTON_ARCADEP_VIEW_LEFT_LINK = 0x2207C4E4,
  DIBUTTON_ARCADEP_VIEW_RIGHT_LINK = 0x2207C4EC,
  DIBUTTON_ARCADEP_DEVICE = 0x220044FE,
  DIBUTTON_ARCADEP_PAUSE = 0x220044FC,
  DIVIRTUAL_CAD_2DCONTROL = 0x23000000,
  DIAXIS_2DCONTROL_LATERAL = 0x23008201,
  DIAXIS_2DCONTROL_MOVE = 0x23010202,
  DIAXIS_2DCONTROL_INOUT = 0x23018203,
  DIBUTTON_2DCONTROL_SELECT = 0x23000401,
  DIBUTTON_2DCONTROL_SPECIAL1 = 0x23000402,
  DIBUTTON_2DCONTROL_SPECIAL = 0x23000403,
  DIBUTTON_2DCONTROL_SPECIAL2 = 0x23000404,
  DIBUTTON_2DCONTROL_MENU = 0x230004FD,
  DIHATSWITCH_2DCONTROL_HATSWITCH = 0x23004601,
  DIAXIS_2DCONTROL_ROTATEZ = 0x23024204,
  DIBUTTON_2DCONTROL_DISPLAY = 0x23004405,
  DIBUTTON_2DCONTROL_DEVICE = 0x230044FE,
  DIBUTTON_2DCONTROL_PAUSE = 0x230044FC,
  DIVIRTUAL_CAD_3DCONTROL = 0x24000000,
  DIAXIS_3DCONTROL_LATERAL = 0x24008201,
  DIAXIS_3DCONTROL_MOVE = 0x24010202,
  DIAXIS_3DCONTROL_INOUT = 0x24018203,
  DIBUTTON_3DCONTROL_SELECT = 0x24000401,
  DIBUTTON_3DCONTROL_SPECIAL1 = 0x24000402,
  DIBUTTON_3DCONTROL_SPECIAL = 0x24000403,
  DIBUTTON_3DCONTROL_SPECIAL2 = 0x24000404,
  DIBUTTON_3DCONTROL_MENU = 0x240004FD,
  DIHATSWITCH_3DCONTROL_HATSWITCH = 0x24004601,
  DIAXIS_3DCONTROL_ROTATEX = 0x24034204,
  DIAXIS_3DCONTROL_ROTATEY = 0x2402C205,
  DIAXIS_3DCONTROL_ROTATEZ = 0x24024206,
  DIBUTTON_3DCONTROL_DISPLAY = 0x24004405,
  DIBUTTON_3DCONTROL_DEVICE = 0x240044FE,
  DIBUTTON_3DCONTROL_PAUSE = 0x240044FC,
  DIVIRTUAL_CAD_FLYBY = 0x25000000,
  DIAXIS_CADF_LATERAL = 0x25008201,
  DIAXIS_CADF_MOVE = 0x25010202,
  DIAXIS_CADF_INOUT = 0x25018203,
  DIBUTTON_CADF_SELECT = 0x25000401,
  DIBUTTON_CADF_SPECIAL1 = 0x25000402,
  DIBUTTON_CADF_SPECIAL = 0x25000403,
  DIBUTTON_CADF_SPECIAL2 = 0x25000404,
  DIBUTTON_CADF_MENU = 0x250004FD,
  DIHATSWITCH_CADF_HATSWITCH = 0x25004601,
  DIAXIS_CADF_ROTATEX = 0x25034204,
  DIAXIS_CADF_ROTATEY = 0x2502C205,
  DIAXIS_CADF_ROTATEZ = 0x25024206,
  DIBUTTON_CADF_DISPLAY = 0x25004405,
  DIBUTTON_CADF_DEVICE = 0x250044FE,
  DIBUTTON_CADF_PAUSE = 0x250044FC,
  DIVIRTUAL_CAD_MODEL = 0x26000000,
  DIAXIS_CADM_LATERAL = 0x26008201,
  DIAXIS_CADM_MOVE = 0x26010202,
  DIAXIS_CADM_INOUT = 0x26018203,
  DIBUTTON_CADM_SELECT = 0x26000401,
  DIBUTTON_CADM_SPECIAL1 = 0x26000402,
  DIBUTTON_CADM_SPECIAL = 0x26000403,
  DIBUTTON_CADM_SPECIAL2 = 0x26000404,
  DIBUTTON_CADM_MENU = 0x260004FD,
  DIHATSWITCH_CADM_HATSWITCH = 0x26004601,
  DIAXIS_CADM_ROTATEX = 0x26034204,
  DIAXIS_CADM_ROTATEY = 0x2602C205,
  DIAXIS_CADM_ROTATEZ = 0x26024206,
  DIBUTTON_CADM_DISPLAY = 0x26004405,
  DIBUTTON_CADM_DEVICE = 0x260044FE,
  DIBUTTON_CADM_PAUSE = 0x260044FC,
  DIVIRTUAL_REMOTE_CONTROL = 0x27000000,
  DIAXIS_REMOTE_SLIDER = 0x27050201,
  DIBUTTON_REMOTE_MUTE = 0x27000401,
  DIBUTTON_REMOTE_SELECT = 0x27000402,
  DIBUTTON_REMOTE_PLAY = 0x27002403,
  DIBUTTON_REMOTE_CUE = 0x27002404,
  DIBUTTON_REMOTE_REVIEW = 0x27002405,
  DIBUTTON_REMOTE_CHANGE = 0x27002406,
  DIBUTTON_REMOTE_RECORD = 0x27002407,
  DIBUTTON_REMOTE_MENU = 0x270004FD,
  DIAXIS_REMOTE_SLIDER2 = 0x27054202,
  DIBUTTON_REMOTE_TV = 0x27005C08,
  DIBUTTON_REMOTE_CABLE = 0x27005C09,
  DIBUTTON_REMOTE_CD = 0x27005C0A,
  DIBUTTON_REMOTE_VCR = 0x27005C0B,
  DIBUTTON_REMOTE_TUNER = 0x27005C0C,
  DIBUTTON_REMOTE_DVD = 0x27005C0D,
  DIBUTTON_REMOTE_ADJUST = 0x27005C0E,
  DIBUTTON_REMOTE_DIGIT0 = 0x2700540F,
  DIBUTTON_REMOTE_DIGIT1 = 0x27005410,
  DIBUTTON_REMOTE_DIGIT2 = 0x27005411,
  DIBUTTON_REMOTE_DIGIT3 = 0x27005412,
  DIBUTTON_REMOTE_DIGIT4 = 0x27005413,
  DIBUTTON_REMOTE_DIGIT5 = 0x27005414,
  DIBUTTON_REMOTE_DIGIT6 = 0x27005415,
  DIBUTTON_REMOTE_DIGIT7 = 0x27005416,
  DIBUTTON_REMOTE_DIGIT8 = 0x27005417,
  DIBUTTON_REMOTE_DIGIT9 = 0x27005418,
  DIBUTTON_REMOTE_DEVICE = 0x270044FE,
  DIBUTTON_REMOTE_PAUSE = 0x270044FC,
  DIVIRTUAL_BROWSER_CONTROL = 0x28000000,
  DIAXIS_BROWSER_LATERAL = 0x28008201,
  DIAXIS_BROWSER_MOVE = 0x28010202,
  DIBUTTON_BROWSER_SELECT = 0x28000401,
  DIAXIS_BROWSER_VIEW = 0x28018203,
  DIBUTTON_BROWSER_REFRESH = 0x28000402,
  DIBUTTON_BROWSER_MENU = 0x280004FD,
  DIBUTTON_BROWSER_SEARCH = 0x28004403,
  DIBUTTON_BROWSER_STOP = 0x28004404,
  DIBUTTON_BROWSER_HOME = 0x28004405,
  DIBUTTON_BROWSER_FAVORITES = 0x28004406,
  DIBUTTON_BROWSER_NEXT = 0x28004407,
  DIBUTTON_BROWSER_PREVIOUS = 0x28004408,
  DIBUTTON_BROWSER_HISTORY = 0x28004409,
  DIBUTTON_BROWSER_PRINT = 0x2800440A,
  DIBUTTON_BROWSER_DEVICE = 0x280044FE,
  DIBUTTON_BROWSER_PAUSE = 0x280044FC,
  DIVIRTUAL_DRIVING_MECHA = 0x29000000,
  DIAXIS_MECHA_STEER = 0x29008201,
  DIAXIS_MECHA_TORSO = 0x29010202,
  DIAXIS_MECHA_ROTATE = 0x29020203,
  DIAXIS_MECHA_THROTTLE = 0x29038204,
  DIBUTTON_MECHA_FIRE = 0x29000401,
  DIBUTTON_MECHA_WEAPONS = 0x29000402,
  DIBUTTON_MECHA_TARGET = 0x29000403,
  DIBUTTON_MECHA_REVERSE = 0x29000404,
  DIBUTTON_MECHA_ZOOM = 0x29000405,
  DIBUTTON_MECHA_JUMP = 0x29000406,
  DIBUTTON_MECHA_MENU = 0x290004FD,
  DIBUTTON_MECHA_CENTER = 0x29004407,
  DIHATSWITCH_MECHA_GLANCE = 0x29004601,
  DIBUTTON_MECHA_VIEW = 0x29004408,
  DIBUTTON_MECHA_FIRESECONDARY = 0x29004409,
  DIBUTTON_MECHA_LEFT_LINK = 0x2900C4E4,
  DIBUTTON_MECHA_RIGHT_LINK = 0x2900C4EC,
  DIBUTTON_MECHA_FORWARD_LINK = 0x290144E0,
  DIBUTTON_MECHA_BACK_LINK = 0x290144E8,
  DIBUTTON_MECHA_ROTATE_LEFT_LINK = 0x290244E4,
  DIBUTTON_MECHA_ROTATE_RIGHT_LINK = 0x290244EC,
  DIBUTTON_MECHA_FASTER_LINK = 0x2903C4E0,
  DIBUTTON_MECHA_SLOWER_LINK = 0x2903C4E8,
  DIBUTTON_MECHA_DEVICE = 0x290044FE,
  DIBUTTON_MECHA_PAUSE = 0x290044FC,
}

enum CONST_DIEDBSFLAGS {
  DIEDBS_MAPPEDPRI1 = 0x00000001,
  DIEDBS_MAPPEDPRI2 = 0x00000002,
  DIEDBS_RECENTDEVICE = 0x00000010,
  DIEDBS_NEWDEVICE = 0x00000020,
}

enum CONST_DIEDBSFLFLAGS {
  DIEDBSFL_ATTACHEDONLY = 0x00000000,
  DIEDBSFL_THISUSER = 0x00000010,
  DIEDBSFL_FORCEFEEDBACK = 0x00000100,
  DIEDBSFL_AVAILABLEDEVICES = 0x00001000,
  DIEDBSFL_MULTIMICEKEYBOARDS = 0x00002000,
  DIEDBSFL_NONGAMINGDEVICES = 0x00004000,
  DIEDBSFL_VALID = 0x00007110,
}

enum CONST_DIDALFLAGS {
  DIDAL_CENTERED = 0x00000000,
  DIDAL_LEFTALIGNED = 0x00000001,
  DIDAL_RIGHTALIGNED = 0x00000002,
  DIDAL_MIDDLE = 0x00000000,
  DIDAL_TOPALIGNED = 0x00000004,
  DIDAL_BOTTOMALIGNED = 0x00000008,
}

enum CONST_DIMAPFLAGS {
  DIAXIS_ANY_X_1 = 0xFF00C201,
  DIAXIS_ANY_X_2 = 0xFF00C202,
  DIAXIS_ANY_Y_1 = 0xFF014201,
  DIAXIS_ANY_Y_2 = 0xFF014202,
  DIAXIS_ANY_Z_1 = 0xFF01C201,
  DIAXIS_ANY_Z_2 = 0xFF01C202,
  DIAXIS_ANY_R_1 = 0xFF024201,
  DIAXIS_ANY_R_2 = 0xFF024202,
  DIAXIS_ANY_U_1 = 0xFF02C201,
  DIAXIS_ANY_U_2 = 0xFF02C202,
  DIAXIS_ANY_V_1 = 0xFF034201,
  DIAXIS_ANY_V_2 = 0xFF034202,
  DIAXIS_ANY_A_1 = 0xFF03C201,
  DIAXIS_ANY_A_2 = 0xFF03C202,
  DIAXIS_ANY_B_1 = 0xFF044201,
  DIAXIS_ANY_B_2 = 0xFF044202,
  DIAXIS_ANY_C_1 = 0xFF04C201,
  DIAXIS_ANY_C_2 = 0xFF04C202,
  DIAXIS_ANY_S_1 = 0xFF054201,
  DIAXIS_ANY_S_2 = 0xFF054202,
  DIAXIS_ANY_1 = 0xFF004201,
  DIAXIS_ANY_2 = 0xFF004202,
  DIAXIS_ANY_3 = 0xFF004203,
  DIAXIS_ANY_4 = 0xFF004204,
  DIPOV_ANY_1 = 0xFF004601,
  DIPOV_ANY_2 = 0xFF004602,
  DIPOV_ANY_3 = 0xFF004603,
  DIPOV_ANY_4 = 0xFF004604,
  DIBUTTON_ANY = 0xFF004400,
}

enum CONST_DIFEFFLAGS {
  DIFEF_DEFAULT = 0x00000000,
  DIFEF_INCLUDENONSTANDARD = 0x00000001,
  DIFEF_MODIFYIFNEEDED = 0x00000010,
}

enum CONST_DIDBAMFLAGS {
  DIDBAM_DEFAULT = 0x00000000,
  DIDBAM_PRESERVE = 0x00000001,
  DIDBAM_INITIALIZE = 0x00000002,
  DIDBAM_HWDEFAULTS = 0x00000004,
}

enum CONST_DIAFTSFLAGS {
  DIAFTS_NEWDEVICELOW = 0xFFFFFFFF,
  DIAFTS_NEWDEVICEHIGH = 0xFFFFFFFF,
  DIAFTS_UNUSEDDEVICELOW = 0x00000000,
  DIAFTS_UNUSEDDEVICEHIGH = 0x00000000,
}

enum CONST_DIDSAMFLAGS {
  DIDSAM_DEFAULT = 0x00000000,
  DIDSAM_NOUSER = 0x00000001,
  DIDSAM_FORCESAVE = 0x00000002,
}

enum CONST_DICDFLAGS {
  DICD_DEFAULT = 0x00000000,
  DICD_EDIT = 0x00000001,
}

enum CONST_DIAFLAGS {
  DIA_FORCEFEEDBACK = 0x00000001,
  DIA_APPMAPPED = 0x00000002,
  DIA_APPNOMAP = 0x00000004,
  DIA_NORANGE = 0x00000008,
  DIA_APPFIXED = 0x00000010,
}

enum CONST_DIAHFLAGS {
  DIAH_UNMAPPED = 0x00000000,
  DIAH_USERCONFIG = 0x00000001,
  DIAH_APPREQUESTED = 0x00000002,
  DIAH_HWAPP = 0x00000004,
  DIAH_HWDEFAULT = 0x00000008,
  DIAH_DEFAULT = 0x00000020,
  DIAH_ERROR = 0x80000000,
}

enum CONST_DI8DEVICESUBTYPE {
  DIDEVTYPE_HID = 0x00010000,
  DI8DEVTYPEMOUSE_UNKNOWN = 0x00000100,
  DI8DEVTYPEMOUSE_TRADITIONAL = 0x00000200,
  DI8DEVTYPEMOUSE_FINGERSTICK = 0x00000300,
  DI8DEVTYPEMOUSE_TOUCHPAD = 0x00000400,
  DI8DEVTYPEMOUSE_TRACKBALL = 0x00000500,
  DI8DEVTYPEMOUSE_ABSOLUTE = 0x00000600,
  DI8DEVTYPEKEYBOARD_UNKNOWN = 0x00000000,
  DI8DEVTYPEKEYBOARD_PCXT = 0x00000100,
  DI8DEVTYPEKEYBOARD_OLIVETTI = 0x00000200,
  DI8DEVTYPEKEYBOARD_PCAT = 0x00000300,
  DI8DEVTYPEKEYBOARD_PCENH = 0x00000400,
  DI8DEVTYPEKEYBOARD_NOKIA1050 = 0x00000500,
  DI8DEVTYPEKEYBOARD_NOKIA9140 = 0x00000600,
  DI8DEVTYPEKEYBOARD_NEC98 = 0x00000700,
  DI8DEVTYPEKEYBOARD_NEC98LAPTOP = 0x00000800,
  DI8DEVTYPEKEYBOARD_NEC98106 = 0x00000900,
  DI8DEVTYPEKEYBOARD_JAPAN106 = 0x00000A00,
  DI8DEVTYPEKEYBOARD_JAPANAX = 0x00000B00,
  DI8DEVTYPEKEYBOARD_J3100 = 0x00000C00,
  DI8DEVTYPE_LIMITEDGAMESUBTYPE = 0x00000100,
  DI8DEVTYPEJOYSTICK_LIMITED = 0x00000100,
  DI8DEVTYPEJOYSTICK_STANDARD = 0x00000200,
  DI8D8EVTYPEJOYSTICK_ENHANCED = 0x00000300,
  DI8DEVTYPEGAMEPAD_LIMITED = 0x00000100,
  DI8DEVTYPEGAMEPAD_STANDARD = 0x00000200,
  DI8DEVTYPEGAMEPAD_TILT = 0x00000300,
  DI8DEVTYPEDRIVING_LIMITED = 0x00000100,
  DI8DEVTYPEDRIVING_COMBINEDPEDALS = 0x00000200,
  DI8DEVTYPEDRIVING_DUALPEDALS = 0x00000300,
  DI8DEVTYPEDRIVING_THREEPEDALS = 0x00000400,
  DI8DEVTYPEDRIVING_HANDHELD = 0x00000500,
  DI8DEVTYPEFLIGHT_LIMITED = 0x00000100,
  DI8DEVTYPEFLIGHT_STICK = 0x00000200,
  DI8DEVTYPEFLIGHT_YOKE = 0x00000300,
  DI8DEVTYPEFLIGHT_RC = 0x00000400,
  DI8DEVTYPE1STPERSON_LIMITED = 0x00000100,
  DI8DEVTYPE1STPERSON_UNKNOWN = 0x00000200,
  DI8DEVTYPE1STPERSON_SIXDOF = 0x00000300,
  DI8DEVTYPE1STPERSON_SHOOTER = 0x00000400,
  DI8DEVTYPESCREENPTR_UNKNOWN = 0x00000200,
  DI8DEVTYPESCREENPTR_LIGHTGUN = 0x00000300,
  DI8DEVTYPESCREENPTR_LIGHTPEN = 0x00000400,
  DI8DEVTYPESCREENPTR_TOUCH = 0x00000500,
  DI8DEVTYPEREMOTE_UNKNOWN = 0x00000200,
  DI8DEVTYPEDEVICECTRL_UNKNOWN = 0x00000200,
  DI8DEVTYPEDEVICECTRL_COMMSSELECTION = 0x00000300,
  DI8DEVTYPEDEVICECTRL_COMMSSELECTION_HARDWIRED = 0x00000400,
  DI8DEVTYPESUPPLEMENTAL_UNKNOWN = 0x00000200,
  DI8DEVTYPESUPPLEMENTAL_2NDHANDCONTROLLER = 0x00000300,
  DI8DEVTYPESUPPLEMENTAL_HEADTRACKER = 0x00000400,
  DI8DEVTYPESUPPLEMENTAL_HANDTRACKER = 0x00000500,
  DI8DEVTYPESUPPLEMENTAL_SHIFTSTICKGATE = 0x00000600,
  DI8DEVTYPESUPPLEMENTAL_SHIFTER = 0x00000700,
  DI8DEVTYPESUPPLEMENTAL_THROTTLE = 0x00000800,
  DI8DEVTYPESUPPLEMENTAL_SPLITTHROTTLE = 0x00000900,
  DI8DEVTYPESUPPLEMENTAL_COMBINEDPEDALS = 0x00000A00,
  DI8DEVTYPESUPPLEMENTAL_DUALPEDALS = 0x00000B00,
  DI8DEVTYPESUPPLEMENTAL_THREEPEDALS = 0x00000C00,
  DI8DEVTYPESUPPLEMENTAL_RUDDERPEDALS = 0x00000D00,
}

enum CONST_DIDIFTFLAGS {
  DIDIFT_CONFIGURATION = 0x00000001,
  DIDIFT_OVERLAY = 0x00000002,
}

enum CONST_DIKEYFLAGS {
  DIK_ESCAPE = 0x00000001,
  DIK_1 = 0x00000002,
  DIK_2 = 0x00000003,
  DIK_3 = 0x00000004,
  DIK_4 = 0x00000005,
  DIK_5 = 0x00000006,
  DIK_6 = 0x00000007,
  DIK_7 = 0x00000008,
  DIK_8 = 0x00000009,
  DIK_9 = 0x0000000A,
  DIK_0 = 0x0000000B,
  DIK_MINUS = 0x0000000C,
  DIK_EQUALS = 0x0000000D,
  DIK_BACK = 0x0000000E,
  DIK_BACKSPACE = 0x0000000E,
  DIK_TAB = 0x0000000F,
  DIK_Q = 0x00000010,
  DIK_W = 0x00000011,
  DIK_E = 0x00000012,
  DIK_R = 0x00000013,
  DIK_T = 0x00000014,
  DIK_Y = 0x00000015,
  DIK_U = 0x00000016,
  DIK_I = 0x00000017,
  DIK_O = 0x00000018,
  DIK_P = 0x00000019,
  DIK_LBRACKET = 0x0000001A,
  DIK_RBRACKET = 0x0000001B,
  DIK_RETURN = 0x0000001C,
  DIK_LCONTROL = 0x0000001D,
  DIK_A = 0x0000001E,
  DIK_S = 0x0000001F,
  DIK_D = 0x00000020,
  DIK_F = 0x00000021,
  DIK_G = 0x00000022,
  DIK_H = 0x00000023,
  DIK_J = 0x00000024,
  DIK_K = 0x00000025,
  DIK_L = 0x00000026,
  DIK_SEMICOLON = 0x00000027,
  DIK_APOSTROPHE = 0x00000028,
  DIK_GRAVE = 0x00000029,
  DIK_LSHIFT = 0x0000002A,
  DIK_BACKSLASH = 0x0000002B,
  DIK_Z = 0x0000002C,
  DIK_X = 0x0000002D,
  DIK_C = 0x0000002E,
  DIK_V = 0x0000002F,
  DIK_B = 0x00000030,
  DIK_N = 0x00000031,
  DIK_M = 0x00000032,
  DIK_COMMA = 0x00000033,
  DIK_PERIOD = 0x00000034,
  DIK_SLASH = 0x00000035,
  DIK_RSHIFT = 0x00000036,
  DIK_MULTIPLY = 0x00000037,
  DIK_NUMPADSTAR = 0x00000037,
  DIK_LMENU = 0x00000038,
  DIK_LALT = 0x00000038,
  DIK_SPACE = 0x00000039,
  DIK_CAPITAL = 0x0000003A,
  DIK_CAPSLOCK = 0x0000003A,
  DIK_F1 = 0x0000003B,
  DIK_F2 = 0x0000003C,
  DIK_F3 = 0x0000003D,
  DIK_F4 = 0x0000003E,
  DIK_F5 = 0x0000003F,
  DIK_F6 = 0x00000040,
  DIK_F7 = 0x00000041,
  DIK_F8 = 0x00000042,
  DIK_F9 = 0x00000043,
  DIK_F10 = 0x00000044,
  DIK_NUMLOCK = 0x00000045,
  DIK_SCROLL = 0x00000046,
  DIK_NUMPAD7 = 0x00000047,
  DIK_NUMPAD8 = 0x00000048,
  DIK_NUMPAD9 = 0x00000049,
  DIK_SUBTRACT = 0x0000004A,
  DIK_NUMPADMINUS = 0x0000004A,
  DIK_NUMPAD4 = 0x0000004B,
  DIK_NUMPAD5 = 0x0000004C,
  DIK_NUMPAD6 = 0x0000004D,
  DIK_ADD = 0x0000004E,
  DIK_NUMPADPLUS = 0x0000004E,
  DIK_NUMPAD1 = 0x0000004F,
  DIK_NUMPAD2 = 0x00000050,
  DIK_NUMPAD3 = 0x00000051,
  DIK_NUMPAD0 = 0x00000052,
  DIK_DECIMAL = 0x00000053,
  DIK_NUMPADPERIOD = 0x00000053,
  DIK_OEM_102 = 0x00000056,
  DIK_F11 = 0x00000057,
  DIK_F12 = 0x00000058,
  DIK_F13 = 0x00000064,
  DIK_F14 = 0x00000065,
  DIK_F15 = 0x00000066,
  DIK_KANA = 0x00000070,
  DIK_ABNT_C1 = 0x00000073,
  DIK_CONVERT = 0x00000079,
  DIK_NOCONVERT = 0x0000007B,
  DIK_YEN = 0x0000007D,
  DIK_ABNT_C2 = 0x0000007E,
  DIK_NUMPADEQUALS = 0x0000008D,
  DIK_CIRCUMFLEX = 0x00000090,
  DIK_PREVTRACK = 0x00000090,
  DIK_AT = 0x00000091,
  DIK_COLON = 0x00000092,
  DIK_UNDERLINE = 0x00000093,
  DIK_KANJI = 0x00000094,
  DIK_STOP = 0x00000095,
  DIK_AX = 0x00000096,
  DIK_UNLABELED = 0x00000097,
  DIK_NEXTTRACK = 0x00000099,
  DIK_NUMPADENTER = 0x0000009C,
  DIK_RCONTROL = 0x0000009D,
  DIK_MUTE = 0x000000A0,
  DIK_CALCULATOR = 0x000000A1,
  DIK_PLAYPAUSE = 0x000000A2,
  DIK_MEDIASTOP = 0x000000A4,
  DIK_VOLUMEDOWN = 0x000000AE,
  DIK_VOLUMEUP = 0x000000B0,
  DIK_WEBHOME = 0x000000B2,
  DIK_NUMPADCOMMA = 0x000000B3,
  DIK_DIVIDE = 0x000000B5,
  DIK_NUMPADSLASH = 0x000000B5,
  DIK_SYSRQ = 0x000000B7,
  DIK_RMENU = 0x000000B8,
  DIK_RALT = 0x000000B8,
  DIK_PAUSE = 0x000000C5,
  DIK_HOME = 0x000000C7,
  DIK_UP = 0x000000C8,
  DIK_UPARROW = 0x000000C8,
  DIK_PRIOR = 0x000000C9,
  DIK_PGUP = 0x000000C9,
  DIK_LEFT = 0x000000CB,
  DIK_LEFTARROW = 0x000000CB,
  DIK_RIGHT = 0x000000CD,
  DIK_RIGHTARROW = 0x000000CD,
  DIK_END = 0x000000CF,
  DIK_DOWN = 0x000000D0,
  DIK_DOWNARROW = 0x000000D0,
  DIK_NEXT = 0x000000D1,
  DIK_PGDN = 0x000000D1,
  DIK_INSERT = 0x000000D2,
  DIK_DELETE = 0x000000D3,
  DIK_LWIN = 0x000000DB,
  DIK_RWIN = 0x000000DC,
  DIK_APPS = 0x000000DD,
  DIK_POWER = 0x000000DE,
  DIK_SLEEP = 0x000000DF,
  DIK_WAKE = 0x000000E3,
  DIK_WEBSEARCH = 0x000000E5,
  DIK_WEBFAVORITES = 0x000000E6,
  DIK_WEBREFRESH = 0x000000E7,
  DIK_WEBSTOP = 0x000000E8,
  DIK_WEBFORWARD = 0x000000E9,
  DIK_WEBBACK = 0x000000EA,
  DIK_MYCOMPUTER = 0x000000EB,
  DIK_MAIL = 0x000000EC,
  DIK_MEDIASELECT = 0x000000ED,
}

enum CONST_DIKEYBOARDFLAGS {
  DIKEYBOARD_ESCAPE = 0x81000401,
  DIKEYBOARD_1 = 0x81000402,
  DIKEYBOARD_2 = 0x81000403,
  DIKEYBOARD_3 = 0x81000404,
  DIKEYBOARD_4 = 0x81000405,
  DIKEYBOARD_5 = 0x81000406,
  DIKEYBOARD_6 = 0x81000407,
  DIKEYBOARD_7 = 0x81000408,
  DIKEYBOARD_8 = 0x81000409,
  DIKEYBOARD_9 = 0x8100040A,
  DIKEYBOARD_0 = 0x8100040B,
  DIKEYBOARD_MINUS = 0x8100040C,
  DIKEYBOARD_EQUALS = 0x8100040D,
  DIKEYBOARD_BACK = 0x8100040E,
  DIKEYBOARD_TAB = 0x8100040F,
  DIKEYBOARD_Q = 0x81000410,
  DIKEYBOARD_W = 0x81000411,
  DIKEYBOARD_E = 0x81000412,
  DIKEYBOARD_R = 0x81000413,
  DIKEYBOARD_T = 0x81000414,
  DIKEYBOARD_Y = 0x81000415,
  DIKEYBOARD_U = 0x81000416,
  DIKEYBOARD_I = 0x81000417,
  DIKEYBOARD_O = 0x81000418,
  DIKEYBOARD_P = 0x81000419,
  DIKEYBOARD_LBRACKET = 0x8100041A,
  DIKEYBOARD_RBRACKET = 0x8100041B,
  DIKEYBOARD_RETURN = 0x8100041C,
  DIKEYBOARD_LCONTROL = 0x8100041D,
  DIKEYBOARD_A = 0x8100041E,
  DIKEYBOARD_S = 0x8100041F,
  DIKEYBOARD_D = 0x81000420,
  DIKEYBOARD_F = 0x81000421,
  DIKEYBOARD_G = 0x81000422,
  DIKEYBOARD_H = 0x81000423,
  DIKEYBOARD_J = 0x81000424,
  DIKEYBOARD_K = 0x81000425,
  DIKEYBOARD_L = 0x81000426,
  DIKEYBOARD_SEMICOLON = 0x81000427,
  DIKEYBOARD_APOSTROPHE = 0x81000428,
  DIKEYBOARD_GRAVE = 0x81000429,
  DIKEYBOARD_LSHIFT = 0x8100042A,
  DIKEYBOARD_BACKSLASH = 0x8100042B,
  DIKEYBOARD_Z = 0x8100042C,
  DIKEYBOARD_X = 0x8100042D,
  DIKEYBOARD_C = 0x8100042E,
  DIKEYBOARD_V = 0x8100042F,
  DIKEYBOARD_B = 0x81000430,
  DIKEYBOARD_N = 0x81000431,
  DIKEYBOARD_M = 0x81000432,
  DIKEYBOARD_COMMA = 0x81000433,
  DIKEYBOARD_PERIOD = 0x81000434,
  DIKEYBOARD_SLASH = 0x81000435,
  DIKEYBOARD_RSHIFT = 0x81000436,
  DIKEYBOARD_MULTIPLY = 0x81000437,
  DIKEYBOARD_LMENU = 0x81000438,
  DIKEYBOARD_SPACE = 0x81000439,
  DIKEYBOARD_CAPITAL = 0x8100043A,
  DIKEYBOARD_F1 = 0x8100043B,
  DIKEYBOARD_F2 = 0x8100043C,
  DIKEYBOARD_F3 = 0x8100043D,
  DIKEYBOARD_F4 = 0x8100043E,
  DIKEYBOARD_F5 = 0x8100043F,
  DIKEYBOARD_F6 = 0x81000440,
  DIKEYBOARD_F7 = 0x81000441,
  DIKEYBOARD_F8 = 0x81000442,
  DIKEYBOARD_F9 = 0x81000443,
  DIKEYBOARD_F10 = 0x81000444,
  DIKEYBOARD_NUMLOCK = 0x81000445,
  DIKEYBOARD_SCROLL = 0x81000446,
  DIKEYBOARD_NUMPAD7 = 0x81000447,
  DIKEYBOARD_NUMPAD8 = 0x81000448,
  DIKEYBOARD_NUMPAD9 = 0x81000449,
  DIKEYBOARD_SUBTRACT = 0x8100044A,
  DIKEYBOARD_NUMPAD4 = 0x8100044B,
  DIKEYBOARD_NUMPAD5 = 0x8100044C,
  DIKEYBOARD_NUMPAD6 = 0x8100044D,
  DIKEYBOARD_ADD = 0x8100044E,
  DIKEYBOARD_NUMPAD1 = 0x8100044F,
  DIKEYBOARD_NUMPAD2 = 0x81000450,
  DIKEYBOARD_NUMPAD3 = 0x81000451,
  DIKEYBOARD_NUMPAD0 = 0x81000452,
  DIKEYBOARD_DECIMAL = 0x81000453,
  DIKEYBOARD_OEM_102 = 0x81000456,
  DIKEYBOARD_F11 = 0x81000457,
  DIKEYBOARD_F12 = 0x81000458,
  DIKEYBOARD_F13 = 0x81000464,
  DIKEYBOARD_F14 = 0x81000465,
  DIKEYBOARD_F15 = 0x81000466,
  DIKEYBOARD_KANA = 0x81000470,
  DIKEYBOARD_ABNT_C1 = 0x81000473,
  DIKEYBOARD_CONVERT = 0x81000479,
  DIKEYBOARD_NOCONVERT = 0x8100047B,
  DIKEYBOARD_YEN = 0x8100047D,
  DIKEYBOARD_ABNT_C2 = 0x8100047E,
  DIKEYBOARD_NUMPADEQUALS = 0x8100048D,
  DIKEYBOARD_PREVTRACK = 0x81000490,
  DIKEYBOARD_AT = 0x81000491,
  DIKEYBOARD_COLON = 0x81000492,
  DIKEYBOARD_UNDERLINE = 0x81000493,
  DIKEYBOARD_KANJI = 0x81000494,
  DIKEYBOARD_STOP = 0x81000495,
  DIKEYBOARD_AX = 0x81000496,
  DIKEYBOARD_UNLABELED = 0x81000497,
  DIKEYBOARD_NEXTTRACK = 0x81000499,
  DIKEYBOARD_NUMPADENTER = 0x8100049C,
  DIKEYBOARD_RCONTROL = 0x8100049D,
  DIKEYBOARD_MUTE = 0x810004A0,
  DIKEYBOARD_CALCULATOR = 0x810004A1,
  DIKEYBOARD_PLAYPAUSE = 0x810004A2,
  DIKEYBOARD_MEDIASTOP = 0x810004A4,
  DIKEYBOARD_VOLUMEDOWN = 0x810004AE,
  DIKEYBOARD_VOLUMEUP = 0x810004B0,
  DIKEYBOARD_WEBHOME = 0x810004B2,
  DIKEYBOARD_NUMPADCOMMA = 0x810004B3,
  DIKEYBOARD_DIVIDE = 0x810004B5,
  DIKEYBOARD_SYSRQ = 0x810004B7,
  DIKEYBOARD_RMENU = 0x810004B8,
  DIKEYBOARD_PAUSE = 0x810004C5,
  DIKEYBOARD_HOME = 0x810004C7,
  DIKEYBOARD_UP = 0x810004C8,
  DIKEYBOARD_PRIOR = 0x810004C9,
  DIKEYBOARD_LEFT = 0x810004CB,
  DIKEYBOARD_RIGHT = 0x810004CD,
  DIKEYBOARD_END = 0x810004CF,
  DIKEYBOARD_DOWN = 0x810004D0,
  DIKEYBOARD_NEXT = 0x810004D1,
  DIKEYBOARD_INSERT = 0x810004D2,
  DIKEYBOARD_DELETE = 0x810004D3,
  DIKEYBOARD_LWIN = 0x810004DB,
  DIKEYBOARD_RWIN = 0x810004DC,
  DIKEYBOARD_APPS = 0x810004DD,
  DIKEYBOARD_POWER = 0x810004DE,
  DIKEYBOARD_SLEEP = 0x810004DF,
  DIKEYBOARD_WAKE = 0x810004E3,
  DIKEYBOARD_WEBSEARCH = 0x810004E5,
  DIKEYBOARD_WEBFAVORITES = 0x810004E6,
  DIKEYBOARD_WEBREFRESH = 0x810004E7,
  DIKEYBOARD_WEBSTOP = 0x810004E8,
  DIKEYBOARD_WEBFORWARD = 0x810004E9,
  DIKEYBOARD_WEBBACK = 0x810004EA,
  DIKEYBOARD_MYCOMPUTER = 0x810004EB,
  DIKEYBOARD_MAIL = 0x810004EC,
  DIKEYBOARD_MEDIASELECT = 0x810004ED,
}

enum CONST_DIMOUSEOFS {
  DIMOFS_X = 0x00000000,
  DIMOFS_Y = 0x00000004,
  DIMOFS_Z = 0x00000008,
  DIMOFS_BUTTON0 = 0x0000000C,
  DIMOFS_BUTTON1 = 0x0000000D,
  DIMOFS_BUTTON2 = 0x0000000E,
  DIMOFS_BUTTON3 = 0x0000000F,
  DIMOFS_BUTTON4 = 0x00000010,
  DIMOFS_BUTTON5 = 0x00000011,
  DIMOFS_BUTTON6 = 0x00000012,
  DIMOFS_BUTTON7 = 0x00000013,
}

enum CONST_DIMOUSEFLAGS {
  DIMOUSE_XAXISAB = 0x82000200,
  DIMOUSE_YAXISAB = 0x82000204,
  DIMOUSE_XAXIS = 0x82000300,
  DIMOUSE_YAXIS = 0x82000304,
  DIMOUSE_WHEEL = 0x82000308,
  DIMOUSE_BUTTON0 = 0x8200040C,
  DIMOUSE_BUTTON1 = 0x8200040D,
  DIMOUSE_BUTTON2 = 0x8200040E,
  DIMOUSE_BUTTON3 = 0x8200040F,
  DIMOUSE_BUTTON4 = 0x82000410,
  DIMOUSE_BUTTON5 = 0x82000411,
  DIMOUSE_BUTTON6 = 0x82000412,
  DIMOUSE_BUTTON7 = 0x82000413,
}

enum CONST_DIVOICEFLAGS {
  DIVOICE_CHANNEL1 = 0x83000401,
  DIVOICE_CHANNEL2 = 0x83000402,
  DIVOICE_CHANNEL3 = 0x83000403,
  DIVOICE_CHANNEL4 = 0x83000404,
  DIVOICE_CHANNEL5 = 0x83000405,
  DIVOICE_CHANNEL6 = 0x83000406,
  DIVOICE_CHANNEL7 = 0x83000407,
  DIVOICE_CHANNEL8 = 0x83000408,
  DIVOICE_TEAM = 0x83000409,
  DIVOICE_ALL = 0x8300040A,
  DIVOICE_RECORDMUTE = 0x8300040B,
  DIVOICE_PLAYBACKMUTE = 0x8300040C,
  DIVOICE_TRANSMIT = 0x8300040D,
  DIVOICE_VOICECOMMAND = 0x83000410,
}

enum CONST_DINPUT {
  DIPROPRANGE_NOMIN = 0x80000000,
  DIPROPRANGE_NOMAX = 0x7FFFFFFF,
  DI_DEGREES = 0x00000064,
  DI_FFNOMINALMAX = 0x00002710,
  DI_SECONDS = 0x000F4240,
  DIPROPAXISMODE_ABS = 0x00000000,
  DIPROPAXISMODE_REL = 0x00000001,
  DIPROPCALIBRATIONMODE_COOKED = 0x00000000,
  DIPROPCALIBRATIONMODE_RAW = 0x00000001,
  DIPROPAUTOCENTER_OFF = 0x00000000,
  DIPROPAUTOCENTER_ON = 0x00000001,
  DIEB_NOTRIGGER = 0xFFFFFFFF,
  MAXCPOINTSNUM = 0x00000008,
}

enum CONST_DINPUTERR {
  DI_OK = 0x00000000,
  DI_NOTATTACHED = 0x00000001,
  DI_PROPNOEFFECT = 0x00000001,
  DI_NOEFFECT = 0x00000001,
  DI_POLLEDDEVICE = 0x00000002,
  DI_DOWNLOADSKIPPED = 0x00000003,
  DI_EFFECTRESTARTED = 0x00000004,
  DI_SETTINGSNOTSAVED = 0x0000000B,
  DI_TRUNCATED = 0x00000008,
  DI_TRUNCATEDANDRESTARTED = 0x0000000C,
  DI_WRITEPROTECT = 0x00000013,
  DI_BUFFEROVERFLOW = 0x80040260,
  DIERR_OLDDIRECTINPUTVERSION = 0x8007047E,
  DIERR_BETADIRECTINPUTVERSION = 0x80070481,
  DIERR_BADDRIVERVER = 0x80070077,
  DIERR_DEVICENOTREG = 0x80040154,
  DIERR_NOTFOUND = 0x80070002,
  DIERR_OBJECTNOTFOUND = 0x80070002,
  DIERR_INVALIDPARAM = 0x00000005,
  DIERR_NOINTERFACE = 0x000001AE,
  DIERR_GENERIC = 0x80004005,
  DIERR_OUTOFMEMORY = 0x00000007,
  DIERR_UNSUPPORTED = 0x000001BD,
  DIERR_NOTINITIALIZED = 0x80070015,
  DIERR_ALREADYINITIALIZED = 0x800704DF,
  DIERR_INPUTLOST = 0x8007001E,
  DIERR_ACQUIRED = 0x800700AA,
  DIERR_NOTACQUIRED = 0x8007000C,
  DIERR_NOAGGREGATION = 0x80004002,
  DIERR_OTHERAPPHASPRIO = 0x80070005,
  DIERR_READONLY = 0x80070005,
  DIERR_HANDLEEXISTS = 0x80070005,
  E_PENDING = 0x8000000A,
  DIERR_INSUFFICIENTPRIVS = 0x80040200,
  DIERR_DEVICEFULL = 0x80040201,
  DIERR_MOREDATA = 0x80040202,
  DIERR_NOTDOWNLOADED = 0x80040203,
  DIERR_HASEFFECTS = 0x80040204,
  DIERR_NOTEXCLUSIVEACQUIRED = 0x80040205,
  DIERR_INCOMPLETEEFFECT = 0x80040206,
  DIERR_NOTBUFFERED = 0x80040207,
  DIERR_EFFECTPLAYING = 0x80040208,
  DIERR_UNPLUGGED = 0x80040209,
  DIERR_REPORTFULL = 0x8004020A,
  DIERR_MAPFILEFAIL = 0x8004020B,
}

enum CONST_DIJOYSTICKOFS {
  DIJOFS_X = 0x00000000,
  DIJOFS_Y = 0x00000004,
  DIJOFS_Z = 0x00000008,
  DIJOFS_RX = 0x0000000C,
  DIJOFS_RY = 0x00000010,
  DIJOFS_RZ = 0x00000014,
  DIJOFS_SLIDER0 = 0x00000018,
  DIJOFS_SLIDER1 = 0x0000001C,
  DIJOFS_POV0 = 0x00000020,
  DIJOFS_POV1 = 0x00000024,
  DIJOFS_POV2 = 0x00000028,
  DIJOFS_POV3 = 0x0000002C,
  DIJOFS_BUTTON0 = 0x00000030,
  DIJOFS_BUTTON1 = 0x00000031,
  DIJOFS_BUTTON2 = 0x00000032,
  DIJOFS_BUTTON3 = 0x00000033,
  DIJOFS_BUTTON4 = 0x00000034,
  DIJOFS_BUTTON5 = 0x00000035,
  DIJOFS_BUTTON6 = 0x00000036,
  DIJOFS_BUTTON7 = 0x00000037,
  DIJOFS_BUTTON8 = 0x00000038,
  DIJOFS_BUTTON9 = 0x00000039,
  DIJOFS_BUTTON10 = 0x0000003A,
  DIJOFS_BUTTON11 = 0x0000003B,
  DIJOFS_BUTTON12 = 0x0000003C,
  DIJOFS_BUTTON13 = 0x0000003D,
  DIJOFS_BUTTON14 = 0x0000003E,
  DIJOFS_BUTTON15 = 0x0000003F,
  DIJOFS_BUTTON16 = 0x00000040,
  DIJOFS_BUTTON17 = 0x00000041,
  DIJOFS_BUTTON18 = 0x00000042,
  DIJOFS_BUTTON19 = 0x00000043,
  DIJOFS_BUTTON20 = 0x00000044,
  DIJOFS_BUTTON21 = 0x00000045,
  DIJOFS_BUTTON22 = 0x00000046,
  DIJOFS_BUTTON23 = 0x00000047,
  DIJOFS_BUTTON24 = 0x00000048,
  DIJOFS_BUTTON25 = 0x00000049,
  DIJOFS_BUTTON26 = 0x0000004A,
  DIJOFS_BUTTON27 = 0x0000004B,
  DIJOFS_BUTTON28 = 0x0000004C,
  DIJOFS_BUTTON29 = 0x0000004D,
  DIJOFS_BUTTON30 = 0x0000004E,
  DIJOFS_BUTTON31 = 0x0000004F,
}

enum CONST_DIEFFFLAGS {
  DIEFF_OBJECTIDS = 0x00000001,
  DIEFF_OBJECTOFFSETS = 0x00000002,
  DIEFF_CARTESIAN = 0x00000010,
  DIEFF_POLAR = 0x00000020,
  DIEFF_SPHERICAL = 0x00000040,
}

enum CONST_DIEGESFLAGS {
  DIEGES_PLAYING = 0x00000001,
  DIEGES_EMULATED = 0x00000002,
}

enum CONST_DIESFLAGS {
  DIES_SOLO = 0x00000001,
  DIES_NODOWNLOAD = 0x80000000,
}

enum CONST_DPNSENDFLAGS {
  DPNSEND_SYNC = 0x80000000,
  DPNSEND_NOCOPY = 0x00000001,
  DPNSEND_NOCOMPLETE = 0x00000002,
  DPNSEND_COMPLETEONPROCESS = 0x00000004,
  DPNSEND_GUARANTEED = 0x00000008,
  DPNSEND_NONSEQUENTIAL = 0x00000010,
  DPNSEND_NOLOOPBACK = 0x00000020,
  DPNSEND_PRIORITY_LOW = 0x00000040,
  DPNSEND_PRIORITY_HIGH = 0x00000080,
}

enum CONST_DPNINFO {
  DPNINFO_NAME = 0x00000001,
  DPNINFO_DATA = 0x00000002,
}

enum CONST_DPNGROUPINFOFLAGS {
  DPNGROUP_AUTODESTRUCT = 0x00000001,
}

enum CONST_DPNOPERATIONS {
  DPNOP_SYNC = 0x80000000,
  DPNCONNECT_SYNC = 0x80000000,
  DPNENUMHOSTS_SYNC = 0x80000000,
  DPNCREATEGROUP_SYNC = 0x80000000,
  DPNDESTROYGROUP_SYNC = 0x80000000,
  DPNADDPLAYERTOGROUP_SYNC = 0x80000000,
  DPNREMOVEPLAYERFROMGROUP_SYNC = 0x80000000,
  DPNSETGROUPINFO_SYNC = 0x80000000,
  DPNSETCLIENTINFO_SYNC = 0x80000000,
  DPNSETSERVERINFO_SYNC = 0x80000000,
  DPNSETPEERINFO_SYNC = 0x80000000,
  DPNHOST_OKTOQUERYFORADDRESSING = 0x00000001,
}

enum CONST_DPNGETSENDQUEUEINFO {
  DPNGETSENDQUEUEINFO_PRIORITY_NORMAL = 0x00000001,
  DPNGETSENDQUEUEINFO_PRIORITY_HIGH = 0x00000002,
  DPNGETSENDQUEUEINFO_PRIORITY_LOW = 0x00000004,
}

enum CONST_DPNPLAYINFOFLAGS {
  DPNPLAYER_LOCAL = 0x00000002,
  DPNPLAYER_HOST = 0x00000004,
}

enum CONST_DPNSESSIONFLAGS {
  DPNSESSION_CLIENT_SERVER = 0x00000001,
  DPNSESSION_MIGRATE_HOST = 0x00000004,
  DPNSESSION_NODPNSVR = 0x00000040,
  DPNSESSION_REQUIREPASSWORD = 0x00000080,
}

enum CONST_DPNENUMCLIENTGROUPFLAGS {
  DPNENUM_PLAYERS = 0x00000001,
  DPNENUM_GROUPS = 0x00000010,
}

enum CONST_DPNCANCELFLAGS {
  DPNCANCEL_ALL_OPERATIONS = 0x00008000,
  DPNCANCEL_CONNECT = 0x00000001,
  DPNCANCEL_ENUM = 0x00000002,
  DPNCANCEL_SEND = 0x00000004,
}

enum CONST_DPLCONNECTSETTINGS {
  DPLCONNECTSETTINGS_HOST = 0x00000001,
}

enum CONST_DPLAVAILABLE {
  DPLAVAILABLE_ALLOWMULTIPLECONNECT = 0x00000001,
}

enum CONST_DPLSESSION {
  DPLSESSION_CONNECTED = 0x00000001,
  DPLSESSION_COULDNOTCONNECT = 0x00000002,
  DPLSESSION_DISCONNECTED = 0x00000003,
  DPLSESSION_TERMINATED = 0x00000004,
  DPLSESSION_HOSTMIGRATED = 0x00000005,
  DPLSESSION_HOSTMIGRATEDHERE = 0x00000006,
}

enum CONST_DPLCONNECT {
  DPLCONNECT_LAUNCHNEW = 0x00000001,
  DPLCONNECT_LAUNCHNOTFOUND = 0x00000002,
}

enum CONST_DVSOUNDEFFECT {
  DVSOUNDCONFIG_NORMALMODE = 0x00000001,
  DVSOUNDCONFIG_AUTOSELECT = 0x00000002,
  DVSOUNDCONFIG_HALFDUPLEX = 0x00000004,
  DVSOUNDCONFIG_SETCONVERSIONQUALITY = 0x00000008,
  DVSOUNDCONFIG_NORECVOLAVAILABLE = 0x00000010,
  DVSOUNDCONFIG_NOFOCUS = 0x20000000,
  DVSOUNDCONFIG_STRICTFOCUS = 0x40000000,
}

enum CONST_DVCLIENTCONFIGENUM {
  DVCLIENTCONFIG_RECORDMUTE = 0x00000001,
  DVCLIENTCONFIG_PLAYBACKMUTE = 0x00000002,
  DVCLIENTCONFIG_MANUALVOICEACTIVATED = 0x00000004,
  DVCLIENTCONFIG_AUTORECORDVOLUME = 0x00000008,
  DVCLIENTCONFIG_MUTEGLOBAL = 0x00000010,
  DVCLIENTCONFIG_AUTOVOICEACTIVATED = 0x00000020,
  DVCLIENTCONFIG_ECHOSUPPRESSION = 0x08000000,
}

enum CONST_DVTHRESHOLD {
  DVTHRESHOLD_MIN = 0x00000000,
  DVTHRESHOLD_MAX = 0x00000063,
  DVTHRESHOLD_DEFAULT = 0xFFFFFFFF,
  DVTHRESHOLD_UNUSED = 0xFFFFFFFE,
}

enum CONST_DVBUFFERQUALITY {
  DVBUFFERQUALITY_MIN = 0x00000001,
  DVBUFFERQUALITY_MAX = 0x00000064,
  DVBUFFERQUALITY_DEFAULT = 0x00000000,
}

enum CONST_DVBUFFERAGGRESSIVENESS {
  DVBUFFERAGGRESSIVENESS_MIN = 0x00000001,
  DVBUFFERAGGRESSIVENESS_MAX = 0x00000064,
  DVBUFFERAGGRESSIVENESS_DEFAULT = 0x00000000,
}

enum CONST_DVSESSION {
  DVSESSION_NOHOSTMIGRATION = 0x00000001,
  DVSESSION_SERVERCONTROLTARGET = 0x00000002,
}

enum CONST_DVSESSIONTYPE {
  DVSESSIONTYPE_PEER = 0x00000001,
  DVSESSIONTYPE_MIXING = 0x00000002,
  DVSESSIONTYPE_FORWARDING = 0x00000003,
  DVSESSIONTYPE_ECHO = 0x00000004,
}

enum CONST_DPNDESTROYPLAYERREASON {
  DPNDESTROYPLAYERREASON_NORMAL = 0x00000001,
  DPNDESTROYPLAYERREASON_CONNECTIONLOST = 0x00000002,
  DPNDESTROYPLAYERREASON_SESSIONTERMINATED = 0x00000003,
  DPNDESTROYPLAYERREASON_HOSTDESTROYEDPLAYER = 0x00000004,
}

enum CONST_DPNDESTROYGROUPREASON {
  DPNDESTROYGROUPREASON_NORMAL = 0x00000001,
  DPNDESTROYGROUPREASON_AUTODESTRUCTED = 0x00000002,
  DPNDESTROYGROUPREASON_SESSIONTERMINATED = 0x00000003,
}

enum CONST_DPLHANDLE {
  DPLHANDLE_ALLCONNECTIONS = 0xFFFFFFFF,
}

enum CONST_DPLAYBUFSIZE {
  SIZE_BYTE = 0x00000001,
  SIZE_LONG = 0x00000004,
  SIZE_INTEGER = 0x00000002,
  SIZE_BOOLEAN = 0x00000002,
  SIZE_SINGLE = 0x00000004,
  SIZE_DOUBLE = 0x00000008,
  SIZE_CURRENCY = 0x00000008,
  SIZE_DECIMAL = 0x0000000E,
  SIZE_DATE = 0x00000008,
}

enum CONST_DPNSPCAPS {
  DPNSPCAPS_SUPPORTSDPNSRV = 0x00000001,
  DPNSPCAPS_SUPPORTSBROADCAST = 0x00000002,
  DPNSPCAPS_SUPPORTSALLADAPTERS = 0x00000004,
}

enum CONST_DPLMSG {
  DPL_MSGID_RECEIVE = 0x00008001,
  DPL_MSGID_CONNECT = 0x00008002,
  DPL_MSGID_DISCONNECT = 0x00008003,
  DPL_MSGID_SESSION_STATUS = 0x00008004,
  DPL_MSGID_CONNECTION_SETTINGS = 0x00008005,
}

enum CONST_DPNWAITTIME {
  INFINITE = 0xFFFFFFFF,
}

enum CONST_DPNLOBBY {
  DPNLOBBY_REGISTER = 0x00000001,
  DPNLOBBY_UNREGISTER = 0x00000002,
}

enum CONST_DPNERROR {
  DPN_OK = 0x00000000,
  DPNSUCCESS_PENDING = 0x00000103,
  DPNERR_ABORTED = 0x80158030,
  DPNERR_ADDRESSING = 0x80158040,
  DPNERR_ALREADYCLOSING = 0x80158050,
  DPNERR_ALREADYCONNECTED = 0x80158060,
  DPNERR_ALREADYDISCONNECTING = 0x80158070,
  DPNERR_ALREADYINITIALIZED = 0x80158080,
  DPNERR_ALREADYREGISTERED = 0x80158090,
  DPNERR_BUFFERTOOSMALL = 0x80158100,
  DPNERR_CANNOTCANCEL = 0x80158110,
  DPNERR_CANTCREATEGROUP = 0x80158120,
  DPNERR_CANTCREATEPLAYER = 0x80158130,
  DPNERR_CANTLAUNCHAPPLICATION = 0x80158140,
  DPNERR_CONNECTING = 0x80158150,
  DPNERR_CONNECTIONLOST = 0x80158160,
  DPNERR_CONVERSION = 0x80158170,
  DPNERR_DATATOOLARGE = 0x80158175,
  DPNERR_DOESNOTEXIST = 0x80158180,
  DPNERR_DUPLICATECOMMAND = 0x80158190,
  DPNERR_ENDPOINTNOTRECEIVING = 0x80158200,
  DPNERR_ENUMQUERYTOOLARGE = 0x80158210,
  DPNERR_ENUMRESPONSETOOLARGE = 0x80158220,
  DPNERR_EXCEPTION = 0x80158230,
  DPNERR_GENERIC = 0x80000008,
  DPNERR_GROUPNOTEMPTY = 0x80158240,
  DPNERR_HOSTING = 0x80158250,
  DPNERR_HOSTREJECTEDCONNECTION = 0x80158260,
  DPNERR_HOSTTERMINATEDSESSION = 0x80158270,
  DPNERR_INCOMPLETEADDRESS = 0x80158280,
  DPNERR_INVALIDADDRESSFORMAT = 0x80158290,
  DPNERR_INVALIDAPPLICATION = 0x80158300,
  DPNERR_INVALIDCOMMAND = 0x80158310,
  DPNERR_INVALIDDEVICEADDRESS = 0x80158320,
  DPNERR_INVALIDENDPOINT = 0x80158330,
  DPNERR_INVALIDFLAGS = 0x80158340,
  DPNERR_INVALIDGROUP = 0x80158350,
  DPNERR_INVALIDHANDLE = 0x80158360,
  DPNERR_INVALIDHOSTADDRESS = 0x80158370,
  DPNERR_INVALIDINSTANCE = 0x80158380,
  DPNERR_INVALIDINTERFACE = 0x80158390,
  DPNERR_INVALIDOBJECT = 0x80158400,
  DPNERR_INVALIDPARAM = 0x00000005,
  DPNERR_INVALIDPASSWORD = 0x80158410,
  DPNERR_INVALIDPLAYER = 0x80158420,
  DPNERR_INVALIDPOINTER = 0x80004003,
  DPNERR_INVALIDPRIORITY = 0x80158430,
  DPNERR_INVALIDSTRING = 0x80158440,
  DPNERR_INVALIDURL = 0x80158450,
  DPNERR_INVALIDVERSION = 0x80158460,
  DPNERR_NOCAPS = 0x80158470,
  DPNERR_NOCONNECTION = 0x80158480,
  DPNERR_NOHOSTPLAYER = 0x80158490,
  DPNERR_NOINTERFACE = 0x000001AE,
  DPNERR_NOMOREADDRESSCOMPONENTS = 0x80158500,
  DPNERR_NORESPONSE = 0x80158510,
  DPNERR_NOTALLOWED = 0x80158520,
  DPNERR_NOTHOST = 0x80158530,
  DPNERR_NOTREADY = 0x80158540,
  DPNERR_NOTREGISTERED = 0x80158550,
  DPNERR_OUTOFMEMORY = 0x00000007,
  DPNERR_PENDING = 0x00000103,
  DPNERR_PLAYERALREADYINGROUP = 0x80158560,
  DPNERR_PLAYERLOST = 0x80158570,
  DPNERR_PLAYERNOTINGROUP = 0x80158580,
  DPNERR_PLAYERNOTREACHABLE = 0x80158590,
  DPNERR_SENDTOOLARGE = 0x80158600,
  DPNERR_SESSIONFULL = 0x80158610,
  DPNERR_TABLEFULL = 0x80158620,
  DPNERR_TIMEDOUT = 0x80158630,
  DPNERR_UNINITIALIZED = 0x80158640,
  DPNERR_UNSUPPORTED = 0x000001BD,
  DPNERR_USERCANCEL = 0x80158650,
}

enum CONST_DPNSTATUS {
  DPN_ACCEPTED = 0x00000000,
  DPN_REJECTED = 0x80000008,
}

enum CONST_DPCONNECT {
  DPNCONNECT_OKTOQUERYFORADDRESSING = 0x00000001,
}

enum CONST_DPENUMHOSTS {
  DPNENUMHOSTS_OKTOQUERYFORADDRESSING = 0x00000001,
  DPNENUMHOSTS_NOBROADCASTFALLBACK = 0x00000002,
}

enum CONST_DPNPLAYERGROUPFLAGS {
  DPNID_ALL_PLAYERS_GROUP = 0x00000000,
}

enum CONST_DPNMESSAGEID {
  DPN_MSGID_ADD_PLAYER_TO_GROUP = 0xFFFF0001,
  DPN_MSGID_APPLICATION_DESC = 0xFFFF0002,
  DPN_MSGID_ASYNC_OP_COMPLETE = 0xFFFF0003,
  DPN_MSGID_CLIENT_INFO = 0xFFFF0004,
  DPN_MSGID_CONNECT_COMPLETE = 0xFFFF0005,
  DPN_MSGID_CREATE_GROUP = 0xFFFF0006,
  DPN_MSGID_CREATE_PLAYER = 0xFFFF0007,
  DPN_MSGID_DESTROY_GROUP = 0xFFFF0008,
  DPN_MSGID_DESTROY_PLAYER = 0xFFFF0009,
  DPN_MSGID_ENUM_HOSTS_QUERY = 0xFFFF000A,
  DPN_MSGID_ENUM_HOSTS_RESPONSE = 0xFFFF000B,
  DPN_MSGID_GROUP_INFO = 0xFFFF000C,
  DPN_MSGID_HOST_MIGRATE = 0xFFFF000D,
  DPN_MSGID_INDICATE_CONNECT = 0xFFFF000E,
  DPN_MSGID_INDICATED_CONNECT_ABORTED = 0xFFFF000F,
  DPN_MSGID_PEER_INFO = 0xFFFF0010,
  DPN_MSGID_RECEIVE = 0xFFFF0011,
  DPN_MSGID_REMOVE_PLAYER_FROM_GROUP = 0xFFFF0012,
  DPN_MSGID_RETURN_BUFFER = 0xFFFF0013,
  DPN_MSGID_SEND_COMPLETE = 0xFFFF0014,
  DPN_MSGID_SERVER_INFO = 0xFFFF0015,
  DPN_MSGID_TERMINATE_SESSION = 0xFFFF0016,
}

enum CONST_DVCOMPRESSIONCAPS {
  DVCOMPRESSIONCAPS_HW = 0x00000001,
  DVCOMPRESSIONCAPS_VARIABLE = 0x00000002,
  DVCOMPRESSIONCAPS_NATIVE = 0x00000004,
}

enum CONST_DVNOTIFY {
  DVNOTIFYPERIOD_MINPERIOD = 0x00000014,
}

enum CONST_DVCAPSENUM {
  DVCAPS_HWMIXING = 0x00000001,
}

enum CONST_DVFLAGS {
  DVFLAGS_SYNC = 0x00000001,
  DVFLAGS_QUERYONLY = 0x00000002,
  DVFLAGS_NOHOSTMIGRATE = 0x00000008,
  DVFLAGS_ALLOWBACK = 0x00000010,
}

enum CONST_DVPLAYBACKVOLUME {
  DVPLAYBACKVOLUME_DEFAULT = 0x00000000,
}

enum CONST_DVMESSAGE {
  DVMSGID_BASE = 0x00000000,
  DVMSGID_CREATEVOICEPLAYER = 0x00000001,
  DVMSGID_DELETEVOICEPLAYER = 0x00000002,
  DVMSGID_SESSIONLOST = 0x00000003,
  DVMSGID_PLAYERVOICESTART = 0x00000004,
  DVMSGID_PLAYERVOICESTOP = 0x00000005,
  DVMSGID_RECORDSTART = 0x00000006,
  DVMSGID_RECORDSTOP = 0x00000007,
  DVMSGID_CONNECTRESULT = 0x00000008,
  DVMSGID_DISCONNECTRESULT = 0x00000009,
  DVMSGID_INPUTLEVEL = 0x0000000A,
  DVMSGID_OUTPUTLEVEL = 0x0000000B,
  DVMSGID_HOSTMIGRATED = 0x0000000C,
  DVMSGID_SETTARGETS = 0x0000000D,
  DVMSGID_PLAYEROUTPUTLEVEL = 0x0000000E,
  DVMSGID_LOSTFOCUS = 0x00000010,
  DVMSGID_GAINFOCUS = 0x00000011,
  DVMSGID_LOCALHOSTSETUP = 0x00000012,
  DVMSGID_MINBASE = 0x00000001,
  DVMSGID_MAXBASE = 0x00000012,
  DVID_SYS = 0x00000000,
  DVID_SERVERPLAYER = 0x00000001,
  DVID_ALLPLAYERS = 0x00000000,
  DVID_NOTARGET = 0xFFFFFFFF,
  DVID_REMAINING = 0xFFFFFFFF,
}

enum CONST_DVERR {
  DV_OK = 0x00000000,
  DV_FULLDUPLEX = 0x00150005,
  DV_HALFDUPLEX = 0x0015000A,
  DV_EXIT = 0x0015000F,
  DVERR_BUFFERTOOSMALL = 0x8015001E,
  DVERR_EXCEPTION = 0x8015005A,
  DVERR_GENERIC = 0x80004005,
  DVERR_INVALIDFLAGS = 0x80150078,
  DVERR_INVALIDOBJECT = 0x80150082,
  DVERR_INVALIDPARAM = 0x80070057,
  DVERR_INVALIDPLAYER = 0x80150087,
  DVERR_INVALIDENDPOINT = 0x8015008C,
  DVERR_INVALIDGROUP = 0x80150091,
  DVERR_INVALIDHANDLE = 0x80150096,
  DVERR_OUTOFMEMORY = 0x8007000E,
  DVERR_PENDING = 0x8000000A,
  DVERR_NOTSUPPORTED = 0x80004001,
  DVERR_NOINTERFACE = 0x80004002,
  DVERR_SESSIONLOST = 0x8015012C,
  DVERR_NOVOICESESSION = 0x8015012E,
  DVERR_CONNECTIONLOST = 0x80150168,
  DVERR_NOTINITIALIZED = 0x80150169,
  DVERR_CONNECTED = 0x8015016A,
  DVERR_NOTCONNECTED = 0x8015016B,
  DVERR_FORWARDNOTSUPPORTED = 0x8015016C,
  DVERR_COMMANDPENDING = 0x8015016D,
  DVERR_CONNECTABORTING = 0x8015016E,
  DVERR_NOTALLOWED = 0x8015016F,
  DVERR_INVALIDTARGET = 0x80150170,
  DVERR_NOTTRANSPORTHOST = 0x80150171,
  DVERR_COMPRESSIONNOTSUPPORTED = 0x80150172,
  DVERR_COMMANDALREADYPENDING = 0x80150173,
  DVERR_SOUNDINITFAILURE = 0x80150174,
  DVERR_TIMEOUT = 0x80150175,
  DVERR_CONNECTABORTED = 0x80150176,
  DVERR_NO3DSOUND = 0x80150177,
  DVERR_ALREADYBUFFERED = 0x80150178,
  DVERR_NOTBUFFERED = 0x80150179,
  DVERR_HOSTING = 0x8015017A,
  DVERR_NOTHOSTING = 0x8015017B,
  DVERR_INVALIDDEVICE = 0x8015017C,
  DVERR_RECORDSYSTEMERROR = 0x8015017D,
  DVERR_PLAYBACKSYSTEMERROR = 0x8015017E,
  DVERR_SENDERROR = 0x8015017F,
  DVERR_USERCANCEL = 0x80150180,
  DVERR_UNKNOWN = 0x80150181,
  DVERR_DIALOGBOX = 0x80150182,
  DVERR_RUN_SETUP = 0x80150183,
  DVERR_INCOMPATIBLEVERSION = 0x80150184,
  DVERR_PREVIOUSCRASH = 0x80150185,
  DVERR_CHILDPROCESSFAILED = 0x80150186,
  DVERR_WIN32 = 0x80150186,
  DVERR_INITIALIZED = 0x80150187,
  DVERR_NOTRANSPORT = 0x80150188,
  DVERR_NOCALLBACK = 0x80150189,
  DVERR_TRANSPORTNOTINIT = 0x8015018A,
  DVERR_TRANSPORTNOSESSION = 0x8015018B,
  DVERR_TRANSPORTNOPLAYER = 0x8015018C,
  DVERR_USERBACK = 0x8015018D,
  DVERR_NORECVOLAVAILABLE = 0x8015018E,
  DVERR_INVALIDBUFFER = 0x8015018F,
  DVERR_LOCKEDBUFFER = 0x80150190,
}

enum CONST_D3DXIMAGE_FILEFORMAT {
  D3DXIFF_BMP = 0x00000000,
  D3DXIFF_JPG = 0x00000001,
  D3DXIFF_TGA = 0x00000002,
  D3DXIFF_PNG = 0x00000003,
  D3DXIFF_DDS = 0x00000004,
  D3DXIFF_PPM = 0x00000005,
  D3DXIFF_DIB = 0x00000006,
  D3DXIFF_FORCE_DWORD = 0x7FFFFFFF,
}

enum CONST_D3DXERR {
  D3DXERR_CANNOTMODIFYINDEXBUFFER = 0x88760B54,
  D3DXERR_INVALIDMESH = 0x88760B55,
  D3DXERR_CANNOTATTRSORT = 0x88760B56,
  D3DXERR_SKINNINGNOTSUPPORTED = 0x88760B57,
  D3DXERR_TOOMANYINFLUENCES = 0x88760B58,
  D3DXERR_INVALIDDATA = 0x88760B59,
  D3DXERR_LOADEDMESHASNODATA = 0x88760B5A,
}

enum CONST_D3DXMESH {
  D3DXMESH_32BIT = 0x00000001,
  D3DXMESH_DONOTCLIP = 0x00000002,
  D3DXMESH_POINTS = 0x00000004,
  D3DXMESH_RTPATCHES = 0x00000008,
  D3DXMESH_NPATCHES = 0x00004000,
  D3DXMESH_VB_SYSTEMMEM = 0x00000010,
  D3DXMESH_VB_MANAGED = 0x00000020,
  D3DXMESH_VB_WRITEONLY = 0x00000040,
  D3DXMESH_VB_DYNAMIC = 0x00000080,
  D3DXMESH_IB_SYSTEMMEM = 0x00000100,
  D3DXMESH_IB_MANAGED = 0x00000200,
  D3DXMESH_IB_WRITEONLY = 0x00000400,
  D3DXMESH_IB_DYNAMIC = 0x00000800,
  D3DXMESH_VB_SHARE = 0x00001000,
  D3DXMESH_USEHWONLY = 0x00002000,
  D3DXMESH_SYSTEMMEM = 0x00000110,
  D3DXMESH_MANAGED = 0x00000220,
  D3DXMESH_WRITEONLY = 0x00000440,
  D3DXMESH_DYNAMIC = 0x00000880,
}

enum CONST_D3DXASM {
  D3DXASM_DEBUG = 0x00000001,
  D3DXASM_SKIPVALIDATION = 0x00000002,
}

enum CONST_D3DXMESHSIMP {
  D3DXMESHSIMP_VERTEX = 0x00000001,
  D3DXMESHSIMP_FACE = 0x00000002,
}

enum CONST_DTFLAGS {
  DT_TOP = 0x00000000,
  DT_LEFT = 0x00000000,
  DT_CENTER = 0x00000001,
  DT_RIGHT = 0x00000002,
  DT_VCENTER = 0x00000004,
  DT_BOTTOM = 0x00000008,
  DT_WORDBREAK = 0x00000010,
  DT_SINGLELINE = 0x00000020,
  DT_EXPANDTABS = 0x00000040,
  DT_TABSTOP = 0x00000080,
  DT_NOCLIP = 0x00000100,
  DT_EXTERNALLEADING = 0x00000200,
  DT_CALCRECT = 0x00000400,
  DT_NOPREFIX = 0x00000800,
  DT_INTERNAL = 0x00001000,
  DT_EDITCONTROL = 0x00002000,
  DT_PATH_ELLIPSIS = 0x00004000,
  DT_END_ELLIPSIS = 0x00008000,
  DT_MODIFYSTRING = 0x00010000,
  DT_RTLREADING = 0x00020000,
  DT_WORD_ELLIPSIS = 0x00040000,
  DT_NOFULLWIDTHCHARBREAK = 0x00080000,
  DT_HIDEPREFIX = 0x00100000,
  DT_PREFIXONLY = 0x00200000,
}

enum CONST_D3DXMESHOPT {
  D3DXMESHOPT_COMPACT = 0x01000000,
  D3DXMESHOPT_ATTRSORT = 0x02000000,
  D3DXMESHOPT_VERTEXCACHE = 0x04000000,
  D3DXMESHOPT_STRIPREORDER = 0x08000000,
  D3DXMESHOPT_IGNOREVERTS = 0x10000000,
  D3DXMESHOPT_SHAREVB = 0x20000000,
}

enum CONST_D3DXMESHMISC {
  UNUSED16 = 0x0000FFFF,
  UNUSED32 = 0xFFFFFFFF,
  MAX_FVF_DECL_SIZE = 0x00000014,
}

enum CONST_D3DXENUM {
  D3DX_DEFAULT = 0xFFFFFFFF,
  D3DX_FILTER_NONE = 0x00000001,
  D3DX_FILTER_POINT = 0x00000002,
  D3DX_FILTER_LINEAR = 0x00000003,
  D3DX_FILTER_TRIANGLE = 0x00000004,
  D3DX_FILTER_BOX = 0x00000005,
  D3DX_FILTER_MIRROR_U = 0x00010000,
  D3DX_FILTER_MIRROR_V = 0x00020000,
  D3DX_FILTER_MIRROR_W = 0x00040000,
  D3DX_FILTER_MIRROR = 0x00070000,
  D3DX_FILTER_DITHER = 0x00080000,
}

enum CONST_DXFILEFORMATFLAGS {
  DXFILEFORMAT_BINARY = 0x00000000,
  DXFILEFORMAT_TEXT = 0x00000001,
  DXFILEFORMAT_COMPRESSED = 0x00000002,
  DXFILEFORMAT_FORCEDWORD = 0x7FFFFFFF,
}

enum CONST_DXFILELOADOPTIONS {
  DXFILELOAD_FROMFILE = 0x00000000,
  DXFILELOAD_FROMRESOURCE = 0x00000001,
  DXFILELOAD_FROMMEMORY = 0x00000002,
  DXFILELOAD_FROMSTREAM = 0x00000004,
  DXFILELOAD_FROMURL = 0x00000008,
  DXFILELOAD_FORCEDWORD = 0x7FFFFFFF,
}

enum CONST_DXFILEERR {
  DXFILEERR_BADOBJECT = 0x88760352,
  DXFILEERR_BADVALUE = 0x88760353,
  DXFILEERR_BADTYPE = 0x88760354,
  DXFILEERR_BADSTREAMHANDLE = 0x88760355,
  DXFILEERR_BADALLOC = 0x88760356,
  DXFILEERR_NOTFOUND = 0x88760357,
  DXFILEERR_NOTDONEYET = 0x88760358,
  DXFILEERR_FILENOTFOUND = 0x88760359,
  DXFILEERR_RESOURCENOTFOUND = 0x8876035A,
  DXFILEERR_URLNOTFOUND = 0x8876035B,
  DXFILEERR_BADRESOURCE = 0x8876035C,
  DXFILEERR_BADFILETYPE = 0x8876035D,
  DXFILEERR_BADFILEVERSION = 0x8876035E,
  DXFILEERR_BADFILEFLOATSIZE = 0x8876035F,
  DXFILEERR_BADFILECOMPRESSIONTYPE = 0x88760360,
  DXFILEERR_BADFILE = 0x88760361,
  DXFILEERR_PARSEERROR = 0x88760362,
  DXFILEERR_NOTEMPLATE = 0x88760363,
  DXFILEERR_BADARRAYSIZE = 0x88760364,
  DXFILEERR_BADDATAREFERENCE = 0x88760365,
  DXFILEERR_INTERNALERROR = 0x88760366,
  DXFILEERR_NOMOREOBJECTS = 0x88760367,
  DXFILEERR_BADINTRINSICS = 0x88760368,
  DXFILEERR_NOMORESTREAMHANDLES = 0x88760369,
  DXFILEERR_NOMOREDATA = 0x8876036A,
  DXFILEERR_BADCACHEFILE = 0x8876036B,
  DXFILEERR_NOINTERNET = 0x8876036C,
}

// Structs

struct D3DVECTOR {
  float x;
  float y;
  float z;
}

struct D3DVECTOR2 {
  float x;
  float y;
}

struct D3DVECTOR4 {
  float x;
  float y;
  float z;
  float w;
}

struct RECT {
  int left;
  int top;
  int right;
  int bottom;
}

struct DXGUID {
  int data1;
  short data2;
  short data3;
  ubyte[8] data4;
}

struct PALETTEENTRY {
  ubyte red;
  ubyte green;
  ubyte blue;
  ubyte flags;
}

struct D3DCOLORVALUE {
  float r;
  float g;
  float b;
  float a;
}

struct POINT {
  int x;
  int y;
}

struct D3DMATERIAL8 {
  D3DCOLORVALUE diffuse;
  D3DCOLORVALUE ambient;
  D3DCOLORVALUE specular;
  D3DCOLORVALUE emissive;
  float power;
}

struct D3DPLANE {
  float a;
  float b;
  float c;
  float d;
}

struct D3DMATRIX {
  float m11;
  float m12;
  float m13;
  float m14;
  float m21;
  float m22;
  float m23;
  float m24;
  float m31;
  float m32;
  float m33;
  float m34;
  float m41;
  float m42;
  float m43;
  float m44;
}

struct D3DVIEWPORT8 {
  int x;
  int y;
  int Width;
  int Height;
  float MinZ;
  float MaxZ;
}

struct D3DADAPTER_IDENTIFIER8 {
  ubyte[512] Driver;
  ubyte[512] Description;
  int DriverVersionLowPart;
  int DriverVersionHighPart;
  int VendorId;
  int DeviceId;
  int SubSysId;
  int Revision;
  DXGUID DeviceIdentifier;
  int WHQLLevel;
}

struct D3DDISPLAYMODE {
  int Width;
  int Height;
  int RefreshRate;
  CONST_D3DFORMAT Format;
}

struct D3DCAPS8 {
  int DeviceType;
  int AdapterOrdinal;
  int Caps;
  int Caps2;
  int Caps3;
  int PresentationIntervals;
  int CursorCaps;
  int DevCaps;
  int PrimitiveMiscCaps;
  int RasterCaps;
  int ZCmpCaps;
  int SrcBlendCaps;
  int DestBlendCaps;
  int AlphaCmpCaps;
  int ShadeCaps;
  int TextureCaps;
  int TextureFilterCaps;
  int CubeTextureFilterCaps;
  int VolumeTextureFilterCaps;
  int TextureAddressCaps;
  int VolumeTextureAddressCaps;
  int LineCaps;
  int MaxTextureWidth;
  int MaxTextureHeight;
  int MaxVolumeExtent;
  int MaxTextureRepeat;
  int MaxTextureAspectRatio;
  int MaxAnisotropy;
  float MaxVertexW;
  float GuardBandLeft;
  float GuardBandTop;
  float GuardBandRight;
  float GuardBandBottom;
  float ExtentsAdjust;
  int StencilCaps;
  int FVFCaps;
  int TextureOpCaps;
  int MaxTextureBlendStages;
  int MaxSimultaneousTextures;
  int VertexProcessingCaps;
  int MaxActiveLights;
  int MaxUserClipPlanes;
  int MaxVertexBlendMatrices;
  int MaxVertexBlendMatrixIndex;
  float MaxPointSize;
  int MaxPrimitiveCount;
  int MaxVertexIndex;
  int MaxStreams;
  int MaxStreamStride;
  int VertexShaderVersion;
  int MaxVertexShaderConst;
  int PixelShaderVersion;
  float MaxPixelShaderValue;
}

struct D3DPRESENT_PARAMETERS {
  int BackBufferWidth;
  int BackBufferHeight;
  CONST_D3DFORMAT BackBufferFormat;
  int BackBufferCount;
  CONST_D3DMULTISAMPLE_TYPE MultiSampleType;
  CONST_D3DSWAPEFFECT SwapEffect;
  int hDeviceWindow;
  int Windowed;
  int EnableAutoDepthStencil;
  CONST_D3DFORMAT AutoDepthStencilFormat;
  int flags;
  int FullScreen_RefreshRateInHz;
  int FullScreen_PresentationInterval;
}

struct D3DDEVICE_CREATION_PARAMETERS {
  int AdapterOrdinal;
  CONST_D3DDEVTYPE DeviceType;
  int hFocusWindow;
  int BehaviorFlags;
}

struct D3DSURFACE_DESC {
  CONST_D3DFORMAT Format;
  CONST_D3DRESOURCETYPE Type;
  int Usage;
  CONST_D3DPOOL Pool;
  int Size;
  CONST_D3DMULTISAMPLE_TYPE MultiSampleType;
  int Width;
  int Height;
}

struct D3DLOCKED_RECT {
  int Pitch;
  int pBits;
}

struct D3DRASTER_STATUS {
  int InVBLANK;
  int ScanLine;
}

struct D3DGAMMARAMP {
  short[256] red;
  short[256] green;
  short[256] blue;
}

struct D3DVOLUME_DESC {
  CONST_D3DFORMAT Format;
  CONST_D3DRESOURCETYPE Type;
  int Usage;
  CONST_D3DPOOL Pool;
  int Size;
  int Width;
  int Height;
  int Depth;
}

struct D3DLOCKED_BOX {
  int RowPitch;
  int SlicePitch;
  int pBits;
}

struct D3DBOX {
  int left;
  int top;
  int right;
  int bottom;
  int front;
  int back;
}

struct D3DVERTEXBUFFER_DESC {
  CONST_D3DFORMAT Format;
  CONST_D3DRESOURCETYPE Type;
  int Usage;
  CONST_D3DPOOL Pool;
  int Size;
  int FVF;
}

struct D3DINDEXBUFFER_DESC {
  CONST_D3DFORMAT Format;
  CONST_D3DRESOURCETYPE Type;
  int Usage;
  CONST_D3DPOOL Pool;
  int Size;
}

struct D3DLIGHT8 {
  CONST_D3DLIGHTTYPE Type;
  D3DCOLORVALUE diffuse;
  D3DCOLORVALUE specular;
  D3DCOLORVALUE ambient;
  D3DVECTOR Position;
  D3DVECTOR Direction;
  float Range;
  float Falloff;
  float Attenuation0;
  float Attenuation1;
  float Attenuation2;
  float Theta;
  float Phi;
}

struct D3DCLIPSTATUS8 {
  int ClipUnion;
  int ClipIntersection;
}

struct D3DRECT {
  int x1;
  int y1;
  int x2;
  int y2;
}

struct D3DTLVERTEX {
  float sx;
  float sy;
  float sz;
  float rhw;
  int color;
  int specular;
  float tu;
  float tv;
}

struct D3DLVERTEX {
  float x;
  float y;
  float z;
  int color;
  int specular;
  float tu;
  float tv;
}

struct D3DVERTEX {
  float x;
  float y;
  float z;
  float nx;
  float ny;
  float nz;
  float tu;
  float tv;
}

struct D3DTLVERTEX2 {
  float sx;
  float sy;
  float sz;
  float rhw;
  int color;
  int specular;
  float tu1;
  float tv1;
  float tu2;
  float tv2;
}

struct D3DLVERTEX2 {
  float x;
  float y;
  float z;
  int color;
  int specular;
  float tu1;
  float tv1;
  float tu2;
  float tv2;
}

struct D3DVERTEX2 {
  float x;
  float y;
  float z;
  float nx;
  float ny;
  float nz;
  float tu1;
  float tv1;
  float tu2;
  float tv2;
}

struct D3DRANGE {
  int Offset;
  int Size;
}

struct D3DRECTPATCH_INFO {
  int StartVertexOffsetWidth;
  int StartVertexOffsetHeight;
  int Width;
  int Height;
  int Stride;
  CONST_D3DBASISTYPE Basis;
  CONST_D3DORDERTYPE Order;
}

struct D3DTRIPATCH_INFO {
  int StartVertexOffsetWidth;
  int NumVertices;
  CONST_D3DBASISTYPE Basis;
  CONST_D3DORDERTYPE Order;
}

struct D3DLINEPATTERN {
  short RepeatFactor;
  short LinePattern;
}

struct DSBUFFERDESC {
  int lSize;
  CONST_DSBCAPSFLAGS lFlags;
  int lBufferBytes;
  int lReserved;
  WAVEFORMATEX fxFormat;
  wchar* guid3DAlgorithm;
}

struct WAVEFORMATEX {
  short nFormatTag;
  short nChannels;
  int lSamplesPerSec;
  int lAvgBytesPerSec;
  short nBlockAlign;
  short nBitsPerSample;
  short nSize;
  int lExtra;
}

struct DS3DBUFFER {
  int lSize;
  D3DVECTOR vPosition;
  D3DVECTOR vVelocity;
  int lInsideConeAngle;
  int lOutsideConeAngle;
  D3DVECTOR vConeOrientation;
  int lConeOutsideVolume;
  float minDistance;
  float maxDistance;
  CONST_DS3DMODEFLAGS lMode;
}

struct DSBCAPS {
  int lSize;
  CONST_DSBCAPSFLAGS lFlags;
  int lBufferBytes;
  int lUnlockTransferRate;
  int lPlayCpuOverhead;
}

struct DSCURSORS {
  int lPlay;
  int lWrite;
}

struct DSBPOSITIONNOTIFY {
  int lOffset;
  int hEventNotify;
}

struct DSEFFECTDESC {
  int lSize;
  int lFlags;
  wchar* guidDSFXClass;
  int lReserved;
  int lReserved2;
}

struct DSCAPS {
  int lSize;
  CONST_DSCAPSFLAGS lFlags;
  int lMinSecondarySampleRate;
  int lMaxSecondarySampleRate;
  int lPrimaryBuffers;
  int lMaxHwMixingAllBuffers;
  int lMaxHwMixingStaticBuffers;
  int lMaxHwMixingStreamingBuffers;
  int lFreeHwMixingAllBuffers;
  int lFreeHwMixingStaticBuffers;
  int lFreeHwMixingStreamingBuffers;
  int lMaxHw3DAllBuffers;
  int lMaxHw3DStaticBuffers;
  int lMaxHw3DStreamingBuffers;
  int lFreeHw3DAllBuffers;
  int lFreeHw3DStaticBuffers;
  int lFreeHw3DStreamingBuffers;
  int lTotalHwMemBytes;
  int lFreeHwMemBytes;
  int lMaxContigFreeHwMemBytes;
  int lUnlockTransferRateHwBuffers;
  int lPlayCpuOverheadSwBuffers;
  int lReserved1;
  int lReserved2;
}

struct DS3DLISTENER {
  int lSize;
  D3DVECTOR vPosition;
  D3DVECTOR vVelocity;
  D3DVECTOR vOrientFront;
  D3DVECTOR vOrientTop;
  float distanceFactor;
  float rolloffFactor;
  float dopplerFactor;
}

struct DSCBUFFERDESC {
  int lSize;
  CONST_DSCBCAPSFLAGS lFlags;
  int lBufferBytes;
  int lReserved;
  WAVEFORMATEX fxFormat;
  wchar* guid3DAlgorithm;
}

struct DSCBCAPS {
  int lSize;
  CONST_DSCBCAPSFLAGS lFlags;
  int lBufferBytes;
  int lReserved;
}

struct DSCCAPS {
  int lSize;
  CONST_DSCCAPSFLAGS lFlags;
  CONST_WAVEFORMATFLAGS lFormats;
  int lChannels;
}

struct DSFXGARGLE {
  CONST_DSFXGARGLE_RATEHZ lRateHz;
  CONST_DSFXGARGLE_WAVE lWaveShape;
}

struct DSFXCHORUS {
  float fWetDryMix;
  float fDepth;
  float fFeedback;
  float fFrequency;
  CONST_DSFX_WAVE lWaveform;
  float fDelay;
  CONST_DSFX_PHASE lPhase;
}

struct DSFXFLANGER {
  float fWetDryMix;
  float fDepth;
  float fFeedback;
  float fFrequency;
  CONST_DSFX_WAVE lWaveform;
  float fDelay;
  CONST_DSFX_PHASE lPhase;
}

struct DSFXECHO {
  float fWetDryMix;
  float fFeedback;
  float fLeftDelay;
  float fRightDelay;
  CONST_DSFX_PANDELAY lPanDelay;
}

struct DSFXDISTORTION {
  float fGain;
  float fEdge;
  float fPostEQCenterFrequency;
  float fPostEQBandwidth;
  float fPreLowpassCutoff;
}

struct DSFXCOMPRESSOR {
  float fGain;
  float fAttack;
  float fRelease;
  float fThreshold;
  float fRatio;
  float fPredelay;
}

struct DSFXI3DL2REVERB {
  int lRoom;
  int lRoomHF;
  float fRoomRolloffFactor;
  float fDecayTime;
  float fDecayHFRatio;
  int lReflections;
  float fReflectionsDelay;
  int lReverb;
  float fReverbDelay;
  float fDiffusion;
  float fDensity;
  float fHFReference;
}

struct DSFXPARAMEQ {
  float fCenter;
  float fBandwidth;
  float fGain;
}

struct DSFXWAVESREVERB {
  float fInGain;
  float fReverbMix;
  float fReverbTime;
  float fHighFreqRTRatio;
}

struct DMUS_NOTIFICATION_PMSG {
  int lFlags;
  int ctTime;
  int mtTime;
  int lNotificationType;
  int lNotificationOption;
  int lField1;
  int lField2;
  IUnknown User;
}

struct DMUS_TIMESIGNATURE {
  int mtTime;
  ubyte beatsPerMeasure;
  ubyte beat;
  short gridsPerBeat;
}

struct DMUS_NOTE_PMSG {
  int mtDuration;
  short musicValue;
  short measure;
  short Offset;
  ubyte beat;
  ubyte grid;
  ubyte velocity;
  ubyte flags;
  ubyte timeRange;
  ubyte durRange;
  ubyte velRange;
  ubyte playModeFlags;
  ubyte subChordLevel;
  ubyte midiValue;
  short transpose;
}

struct DMUS_CURVE_PMSG {
  int mtDuration;
  int mtOriginalStart;
  int mtResetDuration;
  short startValue;
  short endValue;
  short resetValue;
  short measure;
  short Offset;
  ubyte beat;
  ubyte grid;
  ubyte Type;
  ubyte curveShape;
  ubyte ccData;
  ubyte flags;
  short ParamType;
  short MergeIndex;
}

struct DMUS_AUDIOPARAMS {
  int dwSize;
  short fInitNow;
  CONST_DMUS_AUDIOPARAMS lValidData;
  CONST_DMUS_AUDIO lFeatures;
  int lVoices;
  int lSampleRate;
  wchar* clsidDefaultSynth;
}

struct DIDEVCAPS {
  int lSize;
  CONST_DIDEVCAPSFLAGS lFlags;
  int lDevType;
  int lAxes;
  int lButtons;
  int lPOVs;
  int lFFSamplePeriod;
  int lFFMinTimeResolution;
  int lFirmwareRevision;
  int lHardwareRevision;
  int lDriverVersion;
}

struct DIDEVICEOBJECTDATA {
  int lOfs;
  int lData;
  int lTimeStamp;
  int lSequence;
  int lUserData;
}

struct DIKEYBOARDSTATE {
  ubyte[256] key;
}

struct DIMOUSESTATE {
  int lX;
  int lY;
  int lZ;
  ubyte[4] Buttons;
}

struct DIMOUSESTATE2 {
  int lX;
  int lY;
  int lZ;
  ubyte[8] Buttons;
}

struct DIJOYSTATE {
  int x;
  int y;
  int z;
  int rx;
  int ry;
  int rz;
  int[2] slider;
  int[4] POV;
  ubyte[32] Buttons;
}

struct DIJOYSTATE2 {
  int x;
  int y;
  int z;
  int rx;
  int ry;
  int rz;
  int[2] slider;
  int[4] POV;
  ubyte[128] Buttons;
  int vx;
  int vy;
  int vz;
  int vrx;
  int vry;
  int vrz;
  int[2] vslider;
  int ax;
  int ay;
  int az;
  int arx;
  int ary;
  int arz;
  int[2] aslider;
  int fx;
  int fy;
  int fz;
  int frx;
  int fry;
  int frz;
  int[2] fslider;
}

struct DIDATAFORMAT {
  int lSize;
  int lObjSize;
  CONST_DIDATAFORMATFLAGS lFlags;
  int dataSize;
  int numObjs;
  int pData;
}

struct DIOBJECTDATAFORMAT {
  wchar* strGuid;
  int lOfs;
  CONST_DIDFTFLAGS lType;
  CONST_DIDEVICEOBJINSTANCEFLAGS lFlags;
}

struct DIEFFECT {
  int dwSize;
  int lFlags;
  int lDuration;
  int lSamplePeriod;
  int lGain;
  int lTriggerButton;
  int lTriggerRepeatInterval;
  int lAxes;
  int lprgdwAxes;
  int lprglDirection;
  int lpEnvelope;
  int cbTypeSpecificParams;
  int lpvTypeSpecificParams;
  int lStartDelay;
  int x;
  int y;
  DIRAMPFORCE rampForce;
  DIPERIODICFORCE periodicForce;
  DICONSTANTFORCE constantForce;
  DICONDITION conditionX;
  DICONDITION conditionY;
  CONST_DICONDITIONFLAGS conditionFlags;
  int bUseEnvelope;
  DIENVELOPE envelope;
  DIAXISOFFSETS_CDESC axisOffsets;
}

struct DIRAMPFORCE {
  int lRangeStart;
  int lRangeEnd;
}

struct DIPERIODICFORCE {
  int lMagnitude;
  int lOffset;
  int lPhase;
  int lPeriod;
}

struct DICONSTANTFORCE {
  int lMagnitude;
}

struct DICONDITION {
  int lOffset;
  int lPositiveCoefficient;
  int lNegativeCoefficient;
  int lPositiveSaturation;
  int lNegativeSaturation;
  int lDeadBand;
}

struct DIENVELOPE {
  int lSize;
  int lAttackLevel;
  int lAttackTime;
  int lFadeLevel;
  int lFadeTime;
}

struct DIAXISOFFSETS_CDESC {
  int x;
  int y;
}

struct DIACTIONFORMAT {
  int lActionSize;
  int lDataSize;
  wchar* ActionMapName;
  wchar* guidActionMap;
  int lGenre;
  int lAxisMin;
  int lAxisMax;
  int lBufferSize;
  int lActionCount;
  SAFEARRAY ActionArray;
}

struct DIACTION {
  int lAppData;
  int lSemantic;
  int lFlags;
  wchar* ActionName;
  DXGUID guidInstance;
  int lObjId;
  int lHow;
}

struct DIDEVICEIMAGEINFOHEADER {
  int Views;
  int Buttons;
  int Axes;
  int POVs;
  int ImageCount;
  SAFEARRAY Images;
}

struct DIDEVICEIMAGEINFO {
  wchar* ImagePath;
  int flags;
  int ViewID;
  RECT OverlayRect;
  int ObjId;
  int ValidPts;
  POINT[5] CalloutLine;
  RECT CalloutRect;
  int TextAlign;
}

struct DICONFIGUREDEVICESPARAMS {
  int UserCount;
  SAFEARRAY UserNames;
  int FormatCount;
  SAFEARRAY ActionFormats;
  int hwnd;
  DICOLORSET dics;
  IUnknown DDSTarget;
}

struct DICOLORSET {
  int cTextFore;
  int cTextHighlight;
  int cCalloutLine;
  int cCalloutHighlight;
  int cBorder;
  int cControlFill;
  int cHighlightFill;
  int cAreaFill;
}

struct DIPROPRANGE {
  int lObj;
  int lHow;
  int lMin;
  int lMax;
}

struct DIPROPSTRING {
  int lObj;
  int lHow;
  wchar* PropString;
}

struct DIPROPGUIDANDPATH {
  int lObj;
  int lHow;
  wchar* guid;
  wchar* Path;
}

struct DIPROPLONG {
  int lObj;
  int lHow;
  int lData;
}

struct CPOINT {
  int lp;
  int dwLog;
}

struct DIPROPCPOINTS {
  int lObj;
  int lHow;
  int dwCPointsNum;
  CPOINT[8] cp;
}

struct DIPROPPOINTER {
  int lObj;
  int lHow;
  int uData;
}

struct DPN_GROUP_INFO {
  int lSize;
  CONST_DPNINFO lInfoFlags;
  wchar* name;
  int lDataSize;
  CONST_DPNGROUPINFOFLAGS lGroupFlags;
}

struct DPN_PLAYER_INFO {
  int lSize;
  CONST_DPNINFO lInfoFlags;
  wchar* name;
  int lDataSize;
  CONST_DPNPLAYINFOFLAGS lPlayerFlags;
}

struct DPN_APPLICATION_DESC {
  int lSize;
  CONST_DPNSESSIONFLAGS lFlags;
  wchar* guidInstance;
  wchar* guidApplication;
  int lMaxPlayers;
  int lCurrentPlayers;
  wchar* SessionName;
  wchar* Password;
  int dwReservedDataSize;
  int dwApplicationReservedDataSize;
}

struct DPNMSG_ASYNC_OP_COMPLETE {
  int lSize;
  int AsyncOpHandle;
  int hResultCode;
}

struct DPNMSG_CONNECT_COMPLETE {
  int lSize;
  int AsyncOpHandle;
  int hResultCode;
  SAFEARRAY ReplyData;
}

struct DPNMSG_ENUM_HOSTS_QUERY {
  int lSize;
  SAFEARRAY ReceivedData;
  int lMaxResponseDataSize;
  SAFEARRAY ResponseData;
  wchar* AddressSenderUrl;
  wchar* AddressDeviceUrl;
}

struct DPNMSG_ENUM_HOSTS_RESPONSE {
  int lSize;
  DPN_APPLICATION_DESC ApplicationDescription;
  SAFEARRAY ResponseData;
  int lRoundTripLatencyMS;
  wchar* AddressSenderUrl;
  wchar* AddressDeviceUrl;
}

struct DPNMSG_INDICATE_CONNECT {
  int lSize;
  SAFEARRAY UserData;
  int dwReplyDataSize;
  wchar* AddressPlayerUrl;
  wchar* AddressDeviceUrl;
}

struct DPNMSG_RECEIVE {
  int lSize;
  int idSender;
  SAFEARRAY ReceivedData;
  int lDataSize;
  int BufferHandle;
}

struct DPNMSG_SEND_COMPLETE {
  int lSize;
  int AsyncOpHandle;
  int hResultCode;
  int lSendTime;
}

struct DPNMSG_TERMINATE_SESSION {
  int lSize;
  int hResultCode;
  SAFEARRAY TerminateData;
}

struct DPN_SERVICE_PROVIDER_INFO {
  int lFlags;
  wchar* guid;
  wchar* name;
}

struct DPN_CAPS {
  int lSize;
  int lFlags;
  int lConnectTimeout;
  int lConnectRetries;
  int lTimeoutUntilKeepAlive;
}

struct DPL_MESSAGE_RECEIVE {
  int lSize;
  int Sender;
  SAFEARRAY Buffer;
  int lBufferSize;
}

struct DPL_MESSAGE_CONNECT {
  int lSize;
  int ConnectId;
  SAFEARRAY LobbyConnectData;
  DPL_CONNECTION_SETTINGS dplMsgCon;
}

struct DPL_CONNECTION_SETTINGS {
  int lSize;
  CONST_DPLCONNECTSETTINGS lFlags;
  DPN_APPLICATION_DESC ApplicationDescription;
  wchar* PlayerName;
  wchar* AddressSenderUrl;
  wchar* AddressDeviceUrl;
}

struct DPL_MESSAGE_CONNECTION_SETTINGS {
  int lSize;
  int hSender;
  DPL_CONNECTION_SETTINGS dplConnectionSettings;
}

struct DPL_PROGRAM_DESC {
  int lSize;
  int lFlags;
  wchar* guidApplication;
  wchar* ApplicationName;
  wchar* CommandLine;
  wchar* CurrentDirectory;
  wchar* Description;
  wchar* ExecutableFilename;
  wchar* ExecutablePath;
  wchar* LauncherFilename;
  wchar* LauncherPath;
}

struct DPN_CONNECTION_INFO {
  int lSize;
  int lRoundTripLatencyMS;
  int lThroughputBPS;
  int lPeakThroughputBPS;
  int lBytesSentGuaranteed;
  int lPacketsSentGuaranteed;
  int lBytesSentNonGuaranteed;
  int lPacketsSentNonGuaranteed;
  int lBytesRetried;
  int lPacketsRetried;
  int lBytesDropped;
  int lPacketsDropped;
  int lMessagesTransmittedHighPriority;
  int lMessagesTimedOutHighPriority;
  int lMessagesTransmittedNormalPriority;
  int lMessagesTimedOutNormalPriority;
  int lMessagesTransmittedLowPriority;
  int lMessagesTimedOutLowPriority;
  int lBytesReceivedGuaranteed;
  int lPacketsReceivedGuaranteed;
  int lBytesReceivedNonGuaranteed;
  int lPacketsReceivedNonGuaranteed;
  int lMessagesReceived;
}

struct DPN_SP_CAPS {
  int lSize;
  int lFlags;
  int lNumThreads;
  int lDefaultEnumCount;
  int lDefaultEnumRetryInterval;
  int lDefaultEnumTimeout;
  int lMaxEnumPayloadSize;
  int lBuffersPerThread;
  int lSystemBufferSize;
}

struct DPL_APPLICATION_INFO {
  wchar* guidApplication;
  wchar* ApplicationName;
  int lNumRunning;
  int lNumWaiting;
  CONST_DPLSESSION lFlags;
}

struct DPL_CONNECT_INFO {
  int lSize;
  CONST_DPLCONNECT lFlags;
  wchar* guidApplication;
  DPL_CONNECTION_SETTINGS ConnectionSettings;
}

struct DVSOUNDDEVICECONFIG {
  int lSize;
  CONST_DVSOUNDEFFECT lFlags;
  wchar* guidPlaybackDevice;
  wchar* guidCaptureDevice;
  int hwndAppWindow;
  DirectSoundSecondaryBuffer8 MainSoundBuffer;
  CONST_DSBPLAYFLAGS lMainBufferFlags;
  int lMainBufferPriority;
}

struct DVCLIENTCONFIG {
  int lSize;
  CONST_DVCLIENTCONFIGENUM lFlags;
  int lRecordVolume;
  int lPlaybackVolume;
  CONST_DVTHRESHOLD lThreshold;
  CONST_DVBUFFERQUALITY lBufferQuality;
  CONST_DVBUFFERAGGRESSIVENESS lBufferAggressiveness;
  int lNotifyPeriod;
}

struct DVSESSIONDESC {
  int lSize;
  CONST_DVSESSION lFlags;
  CONST_DVSESSIONTYPE lSessionType;
  wchar* guidCT;
  CONST_DVBUFFERQUALITY lBufferQuality;
  CONST_DVBUFFERAGGRESSIVENESS lBufferAggressiveness;
}

struct DVCAPS {
  int lSize;
  int lFlags;
}

struct DVCOMPRESSIONINFO {
  int lSize;
  wchar* guidType;
  wchar* strName;
  wchar* strDescription;
  int lFlags;
  int lMaxBitsPerSecond;
}

struct D3DQUATERNION {
  float x;
  float y;
  float z;
  float w;
}

struct D3DXRTS_DESC {
  int Width;
  int Height;
  int Format;
  int DepthStencil;
  int DepthStencilFormat;
}

struct D3DXATTRIBUTERANGE {
  int AttribId;
  int FaceStart;
  int FaceCount;
  int VertexStart;
  int VertexCount;
}

struct D3DXATTRIBUTEWEIGHTS {
  float Position;
  float Boundary;
  float Normal;
  float diffuse;
  float specular;
  float[8] Tex;
}

struct D3DXBONECOMBINATION {
  int AttribId;
  int FaceStart;
  int FaceCount;
  int VertexStart;
  int VertexCount;
  int pBones;
}

struct D3DXIMAGE_INFO {
  int Width;
  int Height;
  int Depth;
  int MipLevels;
}

struct D3DXMATERIAL {
  D3DMATERIAL8 MatD3D;
  wchar* TextureFilename;
}

struct D3DXDECLARATOR {
  int[32] value;
}

struct POINTFLOAT {
  float x;
  float y;
}

struct GLYPHMETRICSFLOAT {
  float BlackBoxX;
  float BlackBoxY;
  POINTFLOAT GlyphOrigin;
  float CellIncX;
  float CellIncY;
}

struct LOGFONT {
  int Height;
  int Width;
  int Escapement;
  int orientation;
  int Weight;
  ubyte Italic;
  ubyte Underline;
  ubyte StrikeOut;
  ubyte CharSet;
  ubyte OutPrecision;
  ubyte ClipPrecision;
  ubyte Quality;
  ubyte PitchAndFamily;
  ubyte[32] FaceName;
}

// Aliases

alias CONST_DSETUPFLAGS DSETUPFLAGS;

alias CONST_DSETUPCALLBACKFLAGS DSETUPCALLBACKFLAGS;

alias CONST_DSETUPERR DSETUPERR;

alias CONST_DIDBAMFLAGS CONST_IDBAMFLAGS;

alias CONST_DINPUT CONST_DINPUTCONSTANTS;

alias CONST_D3DXMESH CONST_D3DXMESHENUM;

alias CONST_D3DXMESHSIMP CONST_D3DXMESHSIMPENUM;

alias CONST_D3DXMESHOPT CONST_D3DXMESHOPTENUM;

alias CONST_D3DXMESHMISC CONST_D3DXMESHMISCENUM;

// Interfaces

// I_dxj_DirectXEvent8 Interface
interface DirectXEvent8 : IUnknown {
  mixin(uuid("d1ca9b18-9ed2-43b5-8759-7a5c892d4c5c"));
  // static DWINGUID IID = { 0xd1ca9b18, 0x9ed2, 0x43b5, 0x87, 0x59, 0x7a, 0x5c, 0x89, 0x2d, 0x4c, 0x5c };
  /*[id(0x60010000)]*/ int DXCallback(int eventid);
}

interface Direct3D8 : IUnknown {
  mixin(uuid("1dd9e8da-1c77-4d40-b0cf-98fefdff9512"));
  // static DWINGUID IID = { 0x1dd9e8da, 0x1c77, 0x4d40, 0xb0, 0xcf, 0x98, 0xfe, 0xfd, 0xff, 0x95, 0x12 };
  /*[id(0x60010000)]*/ int RegisterSoftwareDevice(void* InitializeFunction);
  /*[id(0x60010001)]*/ int GetAdapterCount();
  /*[id(0x60010002)]*/ int GetAdapterIdentifier(int Adapter, int flags, ref D3DADAPTER_IDENTIFIER8 Identifier);
  /*[id(0x60010003)]*/ int GetAdapterModeCount(int Adapter);
  /*[id(0x60010004)]*/ int EnumAdapterModes(int Adapter, int Mode, ref D3DDISPLAYMODE DisplayMode);
  /*[id(0x60010005)]*/ int GetAdapterDisplayMode(int Adapter, ref D3DDISPLAYMODE DisplayMode);
  /*[id(0x60010006)]*/ int CheckDeviceType(int Adapter, CONST_D3DDEVTYPE CheckType, CONST_D3DFORMAT DisplayFormat, CONST_D3DFORMAT BackBufferFormat, int bWindowed);
  /*[id(0x60010007)]*/ int CheckDeviceFormat(int Adapter, CONST_D3DDEVTYPE DeviceType, CONST_D3DFORMAT AdapterFormat, int Usage, CONST_D3DRESOURCETYPE RType, CONST_D3DFORMAT CheckFormat);
  /*[id(0x60010008)]*/ int CheckDeviceMultiSampleType(int Adapter, CONST_D3DDEVTYPE DeviceType, CONST_D3DFORMAT RenderTargetFormat, int Windowed, CONST_D3DMULTISAMPLE_TYPE MultiSampleType);
  /*[id(0x60010009)]*/ int CheckDepthStencilMatch(int Adapter, CONST_D3DDEVTYPE DeviceType, CONST_D3DFORMAT AdapterFormat, CONST_D3DFORMAT RenderTargetFormat, CONST_D3DFORMAT DepthStencilFormat);
  /*[id(0x6001000A)]*/ int GetDeviceCaps(int Adapter, CONST_D3DDEVTYPE DeviceType, ref D3DCAPS8 Caps);
  /*[id(0x6001000B)]*/ int GetAdapterMonitor(int Adapter);
  /*[id(0x6001000C)]*/ int CreateDevice(int Adapter, CONST_D3DDEVTYPE DeviceType, int hFocusWindow, CONST_D3DCREATEFLAGS BehaviorFlags, D3DPRESENT_PARAMETERS* PresentationParameters, out Direct3DDevice8 ppReturnedDeviceInterface);
}

interface Direct3DDevice8 : IUnknown {
  mixin(uuid("7385e5df-8fe8-41d5-86b6-d7b48547b6cf"));
  // static DWINGUID IID = { 0x7385e5df, 0x8fe8, 0x41d5, 0x86, 0xb6, 0xd7, 0xb4, 0x85, 0x47, 0xb6, 0xcf };
  /*[id(0x60010000)]*/ int TestCooperativeLevel();
  /*[id(0x60010001)]*/ int GetAvailableTextureMem(CONST_D3DPOOL Pool);
  /*[id(0x60010002)]*/ int ResourceManagerDiscardBytes(int NumberOfBytes);
  /*[id(0x60010003)]*/ int GetDirect3D(out Direct3D8 pD3D8);
  /*[id(0x60010004)]*/ int GetDeviceCaps(out D3DCAPS8 Caps);
  /*[id(0x60010005)]*/ int GetDisplayMode(out D3DDISPLAYMODE pMode);
  /*[id(0x60010006)]*/ int GetCreationParameters(out D3DDEVICE_CREATION_PARAMETERS pCreationParams);
  /*[id(0x60010007)]*/ int SetCursorProperties(int xHotSpot, int yHotSpot, Direct3DSurface8 CursorSurface);
  /*[id(0x60010008)]*/ void SetCursorPosition(int xScreenSpace, int yScreenSpace, CONST_D3DSCPFLAGS flags);
  /*[id(0x60010009)]*/ int ShowCursor(int bShow);
  /*[id(0x6001000A)]*/ int CreateAdditionalSwapChain(D3DPRESENT_PARAMETERS* PresentationParameters, out Direct3DSwapChain8 ppSwapChain);
  /*[id(0x6001000B)]*/ int Reset(D3DPRESENT_PARAMETERS* PresentationParameters);
  /*[id(0x6001000C)]*/ int Present(void* pSourceRect, void* pDestRect, int hWndDestWindowOverride, void* pDirtyRegion);
  /*[id(0x6001000D)]*/ int GetBackBuffer(int BackBuffer, CONST_D3DBACKBUFFERTYPE BufferType, out Direct3DSurface8 ppBackBuffer);
  /*[id(0x6001000E)]*/ D3DRASTER_STATUS GetRasterStatus();
  /*[id(0x6001000F)]*/ void SetGammaRamp(int dwFlags, D3DGAMMARAMP* pRamp);
  /*[id(0x60010010)]*/ void GetGammaRamp(ref D3DGAMMARAMP pRamp);
  /*[id(0x60010011)]*/ int CreateTexture(int Width, int Height, int Levels, int Usage, CONST_D3DFORMAT Format, CONST_D3DPOOL Pool, out Direct3DTexture8 ppMipMap);
  /*[id(0x60010012)]*/ int CreateVolumeTexture(int Width, int Height, int Depth, int Levels, int Usage, CONST_D3DFORMAT Format, CONST_D3DPOOL Pool, out Direct3DVolumeTexture8 ppMipMap);
  /*[id(0x60010013)]*/ int CreateCubeTexture(int EdgeLength, int Levels, int Usage, CONST_D3DFORMAT Format, CONST_D3DPOOL Pool, out Direct3DCubeTexture8 ppCubeMap);
  /*[id(0x60010014)]*/ int CreateVertexBuffer(int LengthInBytes, int Usage, int FVF, CONST_D3DPOOL Pool, out Direct3DVertexBuffer8 ppVertexBuffer);
  /*[id(0x60010015)]*/ int CreateIndexBuffer(int LengthInBytes, int Usage, CONST_D3DFORMAT Format, CONST_D3DPOOL Pool, out Direct3DIndexBuffer8 ppIndexBuffer);
  /*[id(0x60010016)]*/ int CreateRenderTarget(int Width, int Height, CONST_D3DFORMAT Format, CONST_D3DMULTISAMPLE_TYPE MultiSample, int Lockable, out Direct3DSurface8 ppSurface);
  /*[id(0x60010017)]*/ int CreateDepthStencilSurface(int Width, int Height, CONST_D3DFORMAT Format, CONST_D3DMULTISAMPLE_TYPE MultiSample, out Direct3DSurface8 ppSurface);
  /*[id(0x60010018)]*/ int CreateImageSurface(int Width, int Height, CONST_D3DFORMAT Format, out Direct3DSurface8 ppSurface);
  /*[id(0x60010019)]*/ int CopyRects(Direct3DSurface8 SourceSurface, void* FirstElementOfSourceRectsArray, int NumberOfRects, Direct3DSurface8 DestinationSurface, void* FirstElementofDestPointArray);
  /*[id(0x6001001A)]*/ int UpdateTexture(Direct3DBaseTexture8 SourceTexture, Direct3DBaseTexture8 pDestinationTexture);
  /*[id(0x6001001B)]*/ int GetFrontBuffer(Direct3DSurface8 pDestSurface);
  /*[id(0x6001001C)]*/ int SetRenderTarget(Direct3DSurface8 RenderTarget, Direct3DSurface8 NewZStencil, int flags);
  /*[id(0x6001001D)]*/ int GetRenderTarget(out Direct3DSurface8 ppRenderTarget);
  /*[id(0x6001001E)]*/ int GetDepthStencilSurface(out Direct3DSurface8 ZStencilSurface);
  /*[id(0x6001001F)]*/ int BeginScene();
  /*[id(0x60010020)]*/ int EndScene();
  /*[id(0x60010021)]*/ int Clear(int ClearRectCount, void* clearD3DRect, CONST_D3DCLEARFLAGS flags, int color, float z, int stencil);
  /*[id(0x60010022)]*/ int SetTransform(CONST_D3DTRANSFORMSTATETYPE transformType, D3DMATRIX* matrix);
  /*[id(0x60010023)]*/ int GetTransform(CONST_D3DTRANSFORMSTATETYPE transformType, out D3DMATRIX matrix);
  /*[id(0x60010024)]*/ int MultiplyTransform(CONST_D3DTRANSFORMSTATETYPE transformType, D3DMATRIX* matrix);
  /*[id(0x60010025)]*/ int SetViewport(D3DVIEWPORT8* viewport);
  /*[id(0x60010026)]*/ int GetViewport(out D3DVIEWPORT8 viewport);
  /*[id(0x60010027)]*/ int SetMaterial(D3DMATERIAL8* material);
  /*[id(0x60010028)]*/ int GetMaterial(out D3DMATERIAL8 material);
  /*[id(0x60010029)]*/ int SetLight(int index, D3DLIGHT8* light);
  /*[id(0x6001002A)]*/ int GetLight(int index, out D3DLIGHT8 light);
  /*[id(0x6001002B)]*/ int LightEnable(int index, int enabled);
  /*[id(0x6001002C)]*/ int GetLightEnable(int index, out int enabled);
  /*[id(0x6001002D)]*/ int SetClipPlane(int index, D3DPLANE* plane);
  /*[id(0x6001002E)]*/ int GetClipPlane(int index, out D3DPLANE plane);
  /*[id(0x6001002F)]*/ int SetRenderState(CONST_D3DRENDERSTATETYPE stateType, int value);
  /*[id(0x60010030)]*/ int GetRenderState(CONST_D3DRENDERSTATETYPE stateType, out int value);
  /*[id(0x60010031)]*/ int BeginStateBlock();
  /*[id(0x60010032)]*/ int EndStateBlock(out int blockid);
  /*[id(0x60010033)]*/ int ApplyStateBlock(int blockid);
  /*[id(0x60010034)]*/ int CaptureStateBlock(int blockid);
  /*[id(0x60010035)]*/ int DeleteStateBlock(int blockid);
  /*[id(0x60010036)]*/ int CreateStateBlock(CONST_D3DSTATEBLOCKTYPE blocktype, out int blockid);
  /*[id(0x60010037)]*/ int SetClipStatus(D3DCLIPSTATUS8* clipstatus);
  /*[id(0x60010038)]*/ int GetClipStatus(out D3DCLIPSTATUS8 clipstatus);
  /*[id(0x60010039)]*/ int GetTexture(int stage, out Direct3DBaseTexture8 texture);
  /*[id(0x6001003A)]*/ int SetTexture(int stage, Direct3DBaseTexture8 texture);
  /*[id(0x6001003B)]*/ int GetTextureStageState(int stage, CONST_D3DTEXTURESTAGESTATETYPE stateType, out int state);
  /*[id(0x6001003C)]*/ int SetTextureStageState(int stage, CONST_D3DTEXTURESTAGESTATETYPE stateType, int state);
  /*[id(0x6001003D)]*/ int ValidateDevice(out int ret);
  /*[id(0x6001003E)]*/ int GetInfo(int flags, void * info, int Size);
  /*[id(0x6001003F)]*/ int SetPaletteEntries(int PaletteNumber, void* ArrayOfEntries);
  /*[id(0x60010040)]*/ int GetPaletteEntries(int PaletteNumber, void * ArrayOfEntries);
  /*[id(0x60010041)]*/ int SetCurrentTexturePalette(int PaletteNumber);
  /*[id(0x60010042)]*/ int GetCurrentTexturePalette(out int PaletteNumber);
  /*[id(0x60010043)]*/ int DrawPrimitive(CONST_D3DPRIMITIVETYPE PrimitiveType, int StartVertex, int PrimitiveCount);
  /*[id(0x60010044)]*/ int DrawIndexedPrimitive(CONST_D3DPRIMITIVETYPE PrimitiveType, int minIndex, int NumIndices, int startIndex, int PrimitiveCount);
  /*[id(0x60010045)]*/ int DrawPrimitiveUP(CONST_D3DPRIMITIVETYPE PrimitiveType, int PrimitiveCount, void* VertexStreamZeroDataArray, int VertexStreamZeroStride);
  /*[id(0x60010046)]*/ int DrawIndexedPrimitiveUP(CONST_D3DPRIMITIVETYPE PrimitiveType, int minVertexIndex, int NumVertexIndices, int PrimitiveCount, void* IndexDataArray, CONST_D3DFORMAT IndexDataFormat, void* VertexStreamZeroDataArray, int VertexStreamZeroStride);
  /*[id(0x60010047)]*/ int ProcessVertices(int SrcStartIndex, int DestIndex, int VertexCount, Direct3DVertexBuffer8 DestBuffer, int flags);
  /*[id(0x60010048)]*/ int CreateVertexShader(int* DeclarationTokenArray, void * FunctionTokenArray, ref int retHandle, int Usage);
  /*[id(0x60010049)]*/ int SetVertexShader(int VertexShaderHandle);
  /*[id(0x6001004A)]*/ int GetVertexShader(out int pdwHandle);
  /*[id(0x6001004B)]*/ int DeleteVertexShader(int VertexShaderHandle);
  /*[id(0x6001004C)]*/ int SetVertexShaderConstant(int Register, void* pConstantData, int ConstantCount);
  /*[id(0x6001004D)]*/ int GetVertexShaderConstant(int Register, void * pConstantData, int ConstantCount);
  /*[id(0x6001004E)]*/ int GetVertexShaderDeclaration(int Handle, void* Data, ref int SizeOfData);
  /*[id(0x6001004F)]*/ int GetVertexShaderFunction(int Handle, void* pData, ref int SizeOfData);
  /*[id(0x60010050)]*/ int SetStreamSource(int StreamNumber, Direct3DVertexBuffer8 StreamData, int Stride);
  /*[id(0x60010051)]*/ int GetStreamSource(int StreamNumber, ref Direct3DVertexBuffer8 RetStreamData, ref int RetStride);
  /*[id(0x60010052)]*/ int SetIndices(Direct3DIndexBuffer8 IndexData, int BaseVertexIndex);
  /*[id(0x60010053)]*/ int GetIndices(out Direct3DIndexBuffer8 RetIndexData, out int RetBaseVertexIndex);
  /*[id(0x60010054)]*/ int CreatePixelShader(int* FunctionTokenArray, out int pdwHandle);
  /*[id(0x60010055)]*/ int SetPixelShader(int PixelShaderHandle);
  /*[id(0x60010056)]*/ int GetPixelShader(out int pdwHandle);
  /*[id(0x60010057)]*/ int DeletePixelShader(int PixelShaderHandle);
  /*[id(0x60010058)]*/ int SetPixelShaderConstant(int Register, void* pConstantData, int ConstantCount);
  /*[id(0x60010059)]*/ int GetPixelShaderConstant(int Register, void * pConstantData, int ConstantCount);
  /*[id(0x6001005A)]*/ int GetPixelShaderFunction(int Handle, void* pData, ref int SizeOfData);
  /*[id(0x6001005B)]*/ int DrawRectPatch(int Handle, ref float NumSegments, void* surf);
  /*[id(0x6001005C)]*/ int DrawTriPatch(int Handle, ref float NumSegments, void* surf);
  /*[id(0x6001005D)]*/ int DeletePatch(int Handle);
}

interface Direct3DSurface8 : IUnknown {
  mixin(uuid("b96eebca-b326-4ea5-882f-2ff5bae021dd"));
  // static DWINGUID IID = { 0xb96eebca, 0xb326, 0x4ea5, 0x88, 0x2f, 0x2f, 0xf5, 0xba, 0xe0, 0x21, 0xdd };
  /*[id(0x60010000)]*/ int GetDevice(out Direct3DDevice8 ppDevice);
  /*[id(0x60010001)]*/ int SetPrivateData(DXGUID* refguid, void* Data, int SizeOfData, int flags);
  /*[id(0x60010002)]*/ int GetPrivateData(DXGUID* refguid, void * Data, ref int SizeOfDataa);
  /*[id(0x60010003)]*/ int FreePrivateData(DXGUID* refguid);
  /*[id(0x60010004)]*/ int GetContainer(DXGUID* riid, out IUnknown ppContainer);
  /*[id(0x60010005)]*/ int GetDesc(out D3DSURFACE_DESC pDesc);
  /*[id(0x60010006)]*/ int LockRect(D3DLOCKED_RECT* LockedRect, void* RECT, int flags);
  /*[id(0x60010007)]*/ int UnlockRect();
}

interface Direct3DSwapChain8 : IUnknown {
  mixin(uuid("928c088b-76b9-4c6b-a536-a590853876cd"));
  // static DWINGUID IID = { 0x928c088b, 0x76b9, 0x4c6b, 0xa5, 0x36, 0xa5, 0x90, 0x85, 0x38, 0x76, 0xcd };
  /*[id(0x60010000)]*/ int Present(void* SourceRect, void* DestRect, int hDestWindowOverride, void* DirtyRegion);
  /*[id(0x60010001)]*/ int GetBackBuffer(int BackBuffer, CONST_D3DBACKBUFFERTYPE BufferType, out Direct3DSurface8 ppBackBuffer);
}

interface Direct3DTexture8 : IUnknown {
  mixin(uuid("e4cdd575-2866-4f01-b12e-7eece1ec9358"));
  // static DWINGUID IID = { 0xe4cdd575, 0x2866, 0x4f01, 0xb1, 0x2e, 0x7e, 0xec, 0xe1, 0xec, 0x93, 0x58 };
  /*[id(0x60010000)]*/ int GetDevice(out Direct3DDevice8 ppDevice);
  /*[id(0x60010001)]*/ int SetPrivateData(DXGUID* refguid, void* Data, int SizeOfData, int flags);
  /*[id(0x60010002)]*/ int GetPrivateData(DXGUID* refguid, void* Data, ref int SizeOfData);
  /*[id(0x60010003)]*/ int FreePrivateData(DXGUID* refguid);
  /*[id(0x60010004)]*/ int SetPriority(int PriorityNew);
  /*[id(0x60010005)]*/ int GetPriority();
  /*[id(0x60010006)]*/ void PreLoad();
  /*[id(0x60010007)]*/ CONST_D3DRESOURCETYPE GetType();
  /*[id(0x60010008)]*/ int SetLOD(int dwLODNew);
  /*[id(0x60010009)]*/ int GetLOD();
  /*[id(0x6001000A)]*/ int GetLevelCount();
  /*[id(0x6001000B)]*/ int GetLevelDesc(int Level, out D3DSURFACE_DESC pDesc);
  /*[id(0x6001000C)]*/ int GetSurfaceLevel(int Level, out Direct3DSurface8 ppSurfaceLevel);
  /*[id(0x6001000D)]*/ int LockRect(int Level, D3DLOCKED_RECT* LockedRect, void* RECT, int flags);
  /*[id(0x6001000E)]*/ int UnlockRect(int Level);
  /*[id(0x6001000F)]*/ int AddDirtyRect(void* DirtyRect);
}

interface Direct3DVolumeTexture8 : IUnknown {
  mixin(uuid("4b8aaafa-140f-42ba-9131-597eafaa2ead"));
  // static DWINGUID IID = { 0x4b8aaafa, 0x140f, 0x42ba, 0x91, 0x31, 0x59, 0x7e, 0xaf, 0xaa, 0x2e, 0xad };
  /*[id(0x60010000)]*/ int GetDevice(out Direct3DDevice8 ppDevice);
  /*[id(0x60010001)]*/ int SetPrivateData(DXGUID* refguid, void* Data, int SizeOfData, int flags);
  /*[id(0x60010002)]*/ int GetPrivateData(DXGUID* refguid, void* Data, ref int SizeOfData);
  /*[id(0x60010003)]*/ int FreePrivateData(DXGUID* refguid);
  /*[id(0x60010004)]*/ int SetPriority(int PriorityNew);
  /*[id(0x60010005)]*/ int GetPriority();
  /*[id(0x60010006)]*/ void PreLoad();
  /*[id(0x60010007)]*/ CONST_D3DRESOURCETYPE GetType();
  /*[id(0x60010008)]*/ int SetLOD(int dwLODNew);
  /*[id(0x60010009)]*/ int GetLOD();
  /*[id(0x6001000A)]*/ int GetLevelCount();
  /*[id(0x6001000B)]*/ int GetLevelDesc(int Level, out D3DVOLUME_DESC pDesc);
  /*[id(0x6001000C)]*/ int GetVolumeLevel(int Level, out Direct3DVolume8 ppVolumeLevel);
  /*[id(0x6001000D)]*/ int LockBox(int iLevel, D3DLOCKED_BOX* pLockedVolume, void * box, int flags);
  /*[id(0x6001000E)]*/ int UnlockBox(int Level);
  /*[id(0x6001000F)]*/ int AddDirtyBox(D3DBOX* DirtyBox);
}

interface Direct3DVolume8 : IUnknown {
  mixin(uuid("bd7349f5-14f1-42e4-9c79-972380db40c0"));
  // static DWINGUID IID = { 0xbd7349f5, 0x14f1, 0x42e4, 0x9c, 0x79, 0x97, 0x23, 0x80, 0xdb, 0x40, 0xc0 };
  /*[id(0x60010000)]*/ int GetDevice(out Direct3DDevice8 ppDevice);
  /*[id(0x60010001)]*/ int SetPrivateData(DXGUID* refguid, void* Data, int SizeOfData, int flags);
  /*[id(0x60010002)]*/ int GetPrivateData(DXGUID* refguid, void * Data, ref int SizeOfDataa);
  /*[id(0x60010003)]*/ int FreePrivateData(DXGUID* refguid);
  /*[id(0x60010004)]*/ int GetContainer(DXGUID* riid, out IUnknown ppContainer);
  /*[id(0x60010005)]*/ int GetDesc(out D3DVOLUME_DESC pDesc);
  /*[id(0x60010006)]*/ int LockBox(D3DLOCKED_BOX* LockedVolume, void* box, int flags);
  /*[id(0x60010007)]*/ int UnlockBox();
}

interface Direct3DCubeTexture8 : IUnknown {
  mixin(uuid("3ee5b968-2aca-4c34-8bb5-7e0c3d19b750"));
  // static DWINGUID IID = { 0x3ee5b968, 0x2aca, 0x4c34, 0x8b, 0xb5, 0x7e, 0x0c, 0x3d, 0x19, 0xb7, 0x50 };
  /*[id(0x60010000)]*/ int GetDevice(out Direct3DDevice8 ppDevice);
  /*[id(0x60010001)]*/ int SetPrivateData(DXGUID* refguid, void* Data, int SizeOfData, int flags);
  /*[id(0x60010002)]*/ int GetPrivateData(DXGUID* refguid, void* Data, ref int SizeOfData);
  /*[id(0x60010003)]*/ int FreePrivateData(DXGUID* refguid);
  /*[id(0x60010004)]*/ int SetPriority(int PriorityNew);
  /*[id(0x60010005)]*/ int GetPriority();
  /*[id(0x60010006)]*/ void PreLoad();
  /*[id(0x60010007)]*/ CONST_D3DRESOURCETYPE GetType();
  /*[id(0x60010008)]*/ int SetLOD(int dwLODNew);
  /*[id(0x60010009)]*/ int GetLOD();
  /*[id(0x6001000A)]*/ int GetLevelCount();
  /*[id(0x6001000B)]*/ int GetLevelDesc(int Level, out D3DSURFACE_DESC pDesc);
  /*[id(0x6001000C)]*/ int GetCubeMapSurface(CONST_D3DCUBEMAP_FACES FaceType, int Level, out Direct3DSurface8 ppCubeMapSurface);
  /*[id(0x6001000D)]*/ int LockRect(CONST_D3DCUBEMAP_FACES FaceType, int Level, D3DLOCKED_RECT* LockedRect, void* RECT, int flags);
  /*[id(0x6001000E)]*/ int UnlockRect(CONST_D3DCUBEMAP_FACES FaceType, int iLevel);
  /*[id(0x6001000F)]*/ int AddDirtyRect(CONST_D3DCUBEMAP_FACES FaceType, void* DirtyRect);
}

interface Direct3DVertexBuffer8 : IUnknown {
  mixin(uuid("8aeeeac7-05f9-44d4-b591-000b0df1cb95"));
  // static DWINGUID IID = { 0x8aeeeac7, 0x05f9, 0x44d4, 0xb5, 0x91, 0x00, 0x0b, 0x0d, 0xf1, 0xcb, 0x95 };
  /*[id(0x60010000)]*/ int GetDevice(out Direct3DDevice8 ppDevice);
  /*[id(0x60010001)]*/ int SetPrivateData(DXGUID* refguid, void* Data, int SizeOfData, int flags);
  /*[id(0x60010002)]*/ int GetPrivateData(DXGUID* refguid, void* Data, ref int SizeOfData);
  /*[id(0x60010003)]*/ int FreePrivateData(DXGUID* refguid);
  /*[id(0x60010004)]*/ int SetPriority(int PriorityNew);
  /*[id(0x60010005)]*/ int GetPriority();
  /*[id(0x60010006)]*/ void PreLoad();
  /*[id(0x60010007)]*/ CONST_D3DRESOURCETYPE GetType();
  /*[id(0x60010008)]*/ int Lock(int ByteOffsetToLock, int ByteSizeToLock, out int pData, int flags);
  /*[id(0x60010009)]*/ int Unlock();
  /*[id(0x6001000A)]*/ int GetDesc(out D3DVERTEXBUFFER_DESC pDesc);
}

interface Direct3DIndexBuffer8 : IUnknown {
  mixin(uuid("0e689c9a-053d-44a0-9d92-db0e3d750f86"));
  // static DWINGUID IID = { 0x0e689c9a, 0x053d, 0x44a0, 0x9d, 0x92, 0xdb, 0x0e, 0x3d, 0x75, 0x0f, 0x86 };
  /*[id(0x60010000)]*/ int GetDevice(out Direct3DDevice8 ppDevice);
  /*[id(0x60010001)]*/ int SetPrivateData(DXGUID* refguid, void* Data, int SizeOfData, int flags);
  /*[id(0x60010002)]*/ int GetPrivateData(DXGUID* refguid, void * Data, ref int SizeOfDataa);
  /*[id(0x60010003)]*/ int FreePrivateData(DXGUID* refguid);
  /*[id(0x60010004)]*/ int SetPriority(int PriorityNew);
  /*[id(0x60010005)]*/ int GetPriority();
  /*[id(0x60010006)]*/ void PreLoad();
  /*[id(0x60010007)]*/ CONST_D3DRESOURCETYPE GetType();
  /*[id(0x60010008)]*/ int Lock(int cbOffsetToLock, int cbSizeToLock, out int pData, int flags);
  /*[id(0x60010009)]*/ int Unlock();
  /*[id(0x6001000A)]*/ int GetDesc(out D3DINDEXBUFFER_DESC pDesc);
}

interface Direct3DBaseTexture8 : IUnknown {
  mixin(uuid("b4211cfa-51b9-4a9f-ab78-db99b2bb678e"));
  // static DWINGUID IID = { 0xb4211cfa, 0x51b9, 0x4a9f, 0xab, 0x78, 0xdb, 0x99, 0xb2, 0xbb, 0x67, 0x8e };
  /*[id(0x60010000)]*/ int GetDevice(out Direct3DDevice8 ppDevice);
  /*[id(0x60010001)]*/ int SetPrivateData(DXGUID* refguid, void* Data, int SizeOfData, int flags);
  /*[id(0x60010002)]*/ int GetPrivateData(DXGUID* refguid, void* Data, ref int SizeOfData);
  /*[id(0x60010003)]*/ int FreePrivateData(DXGUID* refguid);
  /*[id(0x60010004)]*/ int SetPriority(int PriorityNew);
  /*[id(0x60010005)]*/ int GetPriority();
  /*[id(0x60010006)]*/ void PreLoad();
  /*[id(0x60010007)]*/ CONST_D3DRESOURCETYPE GetType();
  /*[id(0x60010008)]*/ int SetLOD(int LODNew);
  /*[id(0x60010009)]*/ int GetLOD();
  /*[id(0x6001000A)]*/ int GetLevelCount();
}

interface Direct3DResource8 : IUnknown {
  mixin(uuid("1b36bb7b-09b7-410a-b445-7d1430d7b33f"));
  // static DWINGUID IID = { 0x1b36bb7b, 0x09b7, 0x410a, 0xb4, 0x45, 0x7d, 0x14, 0x30, 0xd7, 0xb3, 0x3f };
  /*[id(0x60010000)]*/ int GetDevice(out Direct3DDevice8 ppDevice);
  /*[id(0x60010001)]*/ int SetPrivateData(DXGUID* refguid, void* Data, int SizeOfData, int flags);
  /*[id(0x60010002)]*/ int GetPrivateData(DXGUID* refguid, void* Data, ref int SizeOfData);
  /*[id(0x60010003)]*/ int FreePrivateData(DXGUID* refguid);
  /*[id(0x60010004)]*/ int SetPriority(int PriorityNew);
  /*[id(0x60010005)]*/ int GetPriority();
  /*[id(0x60010006)]*/ void PreLoad();
  /*[id(0x60010007)]*/ CONST_D3DRESOURCETYPE GetType();
}

// DirectSound Interface
interface DirectSound8 : IUnknown {
  mixin(uuid("9f76fb00-8e92-11d1-8808-00c04fc2c603"));
  // static DWINGUID IID = { 0x9f76fb00, 0x8e92, 0x11d1, 0x88, 0x08, 0x00, 0xc0, 0x4f, 0xc2, 0xc6, 0x03 };
  /*[id(0x60010000)]*/ int InternalSetObject(IUnknown lpdd);
  /*[id(0x60010001)]*/ int InternalGetObject(out IUnknown lpdd);
  /*[id(0x60010002)]*/ int CreateSoundBuffer(DSBUFFERDESC* bufferDesc, out DirectSoundSecondaryBuffer8 soundBuffer);
  /*[id(0x60010003)]*/ int CreateSoundBufferFromFile(wchar* filename, ref DSBUFFERDESC bufferDesc, out DirectSoundSecondaryBuffer8 soundBuffer);
  /*[id(0x60010004)]*/ int CreateSoundBufferFromResource(wchar* dll, wchar* resourceName, ref DSBUFFERDESC bufferDesc, out DirectSoundSecondaryBuffer8 soundBuffer);
  /*[id(0x60010005)]*/ int GetCaps(ref DSCAPS Caps);
  /*[id(0x60010006)]*/ int DuplicateSoundBuffer(DirectSoundSecondaryBuffer8 original, out DirectSoundSecondaryBuffer8 Duplicate);
  /*[id(0x60010007)]*/ int SetCooperativeLevel(int hwnd, CONST_DSSCLFLAGS Level);
  /*[id(0x60010008)]*/ int GetSpeakerConfig(out CONST_DSSPEAKERFLAGS speakerConfig);
  /*[id(0x60010009)]*/ int SetSpeakerConfig(CONST_DSSPEAKERFLAGS speakerConfig);
  /*[id(0x6001000A)]*/ int CreatePrimarySoundBuffer(DSBUFFERDESC* bufferDesc, out DirectSoundPrimaryBuffer8 soundBuffer);
}

// DirectSoundBuffer Interface
interface DirectSoundSecondaryBuffer8 : IUnknown {
  mixin(uuid("9f76fb01-8e92-11d1-8808-00c04fc2c603"));
  // static DWINGUID IID = { 0x9f76fb01, 0x8e92, 0x11d1, 0x88, 0x08, 0x00, 0xc0, 0x4f, 0xc2, 0xc6, 0x03 };
  /*[id(0x60010000)]*/ int InternalSetObject(IUnknown lpdd);
  /*[id(0x60010001)]*/ int InternalGetObject(out IUnknown lpdd);
  /*[id(0x60010002)]*/ int GetDirectSound3DBuffer(out DirectSound3DBuffer8 lpdsb);
  /*[id(0x60010003)]*/ int GetCaps(ref DSBCAPS Caps);
  /*[id(0x60010004)]*/ int GetCurrentPosition(out DSCURSORS cursors);
  /*[id(0x60010005)]*/ int GetFormat(ref WAVEFORMATEX Format);
  /*[id(0x60010006)]*/ int GetVolume(out int volume);
  /*[id(0x60010007)]*/ int GetPan(out int pan);
  /*[id(0x60010008)]*/ int GetFrequency(out int frequency);
  /*[id(0x60010009)]*/ int GetStatus(out CONST_DSBSTATUSFLAGS status);
  /*[id(0x6001000A)]*/ int Initialize(DirectSound8 directSound, ref DSBUFFERDESC bufferDesc, ref ubyte wbuf);
  /*[id(0x6001000B)]*/ int WriteBuffer(int Start, int Size, void* Buffer, CONST_DSBLOCKFLAGS flags);
  /*[id(0x6001000C)]*/ int ReadBuffer(int Start, int Size, void* Buffer, CONST_DSBLOCKFLAGS flags);
  /*[id(0x6001000D)]*/ int Play(CONST_DSBPLAYFLAGS flags);
  /*[id(0x6001000E)]*/ int SetCurrentPosition(int newPosition);
  /*[id(0x6001000F)]*/ int SetVolume(int volume);
  /*[id(0x60010010)]*/ int SetPan(int pan);
  /*[id(0x60010011)]*/ int SetFrequency(int frequency);
  /*[id(0x60010012)]*/ int Stop();
  /*[id(0x60010013)]*/ int Restore();
  /*[id(0x60010014)]*/ int SetNotificationPositions(int nElements, SAFEARRAY* psa);
  /*[id(0x60010015)]*/ int SaveToFile(wchar* filename);
  /*[id(0x60010016)]*/ int SetFX(int lEffectsCount, SAFEARRAY* Buffers, SAFEARRAY* lResultIDs);
  /*[id(0x60010017)]*/ int AcquireResources(int lFlags, ref SAFEARRAY lEffectsResults);
  /*[id(0x60010018)]*/ int GetObjectinPath(wchar* guidFX, int lIndex, wchar* iidInterface, out IUnknown ret);
}

// DirectSound3DBuffer Interface
interface DirectSound3DBuffer8 : IUnknown {
  mixin(uuid("9f76fb03-8e92-11d1-8808-00c04fc2c603"));
  // static DWINGUID IID = { 0x9f76fb03, 0x8e92, 0x11d1, 0x88, 0x08, 0x00, 0xc0, 0x4f, 0xc2, 0xc6, 0x03 };
  /*[id(0x60010000)]*/ int InternalSetObject(IUnknown lpdd);
  /*[id(0x60010001)]*/ int InternalGetObject(out IUnknown lpdd);
  /*[id(0x60010002)]*/ int GetDirectSoundBuffer(out DirectSoundSecondaryBuffer8 retVal);
  /*[id(0x60010003)]*/ int GetAllParameters(ref DS3DBUFFER Buffer);
  /*[id(0x60010004)]*/ int GetConeAngles(ref int inCone, ref int outCone);
  /*[id(0x60010005)]*/ int GetConeOrientation(ref D3DVECTOR orientation);
  /*[id(0x60010006)]*/ int GetConeOutsideVolume(out int coneOutsideVolume);
  /*[id(0x60010007)]*/ int GetMaxDistance(out float maxDistance);
  /*[id(0x60010008)]*/ int GetMinDistance(out float minDistance);
  /*[id(0x60010009)]*/ int GetMode(out CONST_DS3DMODEFLAGS Mode);
  /*[id(0x6001000A)]*/ int GetPosition(ref D3DVECTOR Position);
  /*[id(0x6001000B)]*/ int GetVelocity(ref D3DVECTOR velocity);
  /*[id(0x6001000C)]*/ int SetAllParameters(DS3DBUFFER* Buffer, CONST_DS3DAPPLYFLAGS applyFlag);
  /*[id(0x6001000D)]*/ int SetConeAngles(int inCone, int outCone, CONST_DS3DAPPLYFLAGS applyFlag);
  /*[id(0x6001000E)]*/ int SetConeOrientation(float x, float y, float z, CONST_DS3DAPPLYFLAGS applyFlag);
  /*[id(0x6001000F)]*/ int SetConeOutsideVolume(int coneOutsideVolume, CONST_DS3DAPPLYFLAGS applyFlag);
  /*[id(0x60010010)]*/ int SetMaxDistance(float maxDistance, CONST_DS3DAPPLYFLAGS applyFlag);
  /*[id(0x60010011)]*/ int SetMinDistance(float minDistance, CONST_DS3DAPPLYFLAGS applyFlag);
  /*[id(0x60010012)]*/ int SetMode(CONST_DS3DMODEFLAGS Mode, CONST_DS3DAPPLYFLAGS applyFlag);
  /*[id(0x60010013)]*/ int SetPosition(float x, float y, float z, CONST_DS3DAPPLYFLAGS applyFlag);
  /*[id(0x60010014)]*/ int SetVelocity(float x, float y, float z, CONST_DS3DAPPLYFLAGS applyFlag);
}

// DirectSoundPrimaryBuffer Interface
interface DirectSoundPrimaryBuffer8 : IUnknown {
  mixin(uuid("4e6f040e-03fb-4ba1-897c-2265700d5368"));
  // static DWINGUID IID = { 0x4e6f040e, 0x03fb, 0x4ba1, 0x89, 0x7c, 0x22, 0x65, 0x70, 0x0d, 0x53, 0x68 };
  /*[id(0x60010000)]*/ int InternalSetObject(IUnknown lpdd);
  /*[id(0x60010001)]*/ int InternalGetObject(out IUnknown lpdd);
  /*[id(0x60010002)]*/ int GetDirectSound3DListener(out DirectSound3DListener8 lpdsl);
  /*[id(0x60010003)]*/ int GetCaps(ref DSBCAPS Caps);
  /*[id(0x60010004)]*/ int GetCurrentPosition(out DSCURSORS cursors);
  /*[id(0x60010005)]*/ int GetFormat(ref WAVEFORMATEX Format);
  /*[id(0x60010006)]*/ int GetVolume(out int volume);
  /*[id(0x60010007)]*/ int GetPan(out int pan);
  /*[id(0x60010008)]*/ int GetStatus(out CONST_DSBSTATUSFLAGS status);
  /*[id(0x60010009)]*/ int Initialize(DirectSound8 directSound, ref DSBUFFERDESC bufferDesc, ref ubyte wbuf);
  /*[id(0x6001000A)]*/ int WriteBuffer(int Start, int Size, void* Buffer, CONST_DSBLOCKFLAGS flags);
  /*[id(0x6001000B)]*/ int ReadBuffer(int Start, int Size, void* Buffer, CONST_DSBLOCKFLAGS flags);
  /*[id(0x6001000C)]*/ int Play(CONST_DSBPLAYFLAGS flags);
  /*[id(0x6001000D)]*/ int SetFormat(WAVEFORMATEX* Format);
  /*[id(0x6001000E)]*/ int SetVolume(int volume);
  /*[id(0x6001000F)]*/ int SetPan(int pan);
  /*[id(0x60010010)]*/ int Stop();
  /*[id(0x60010011)]*/ int Restore();
}

// DirectSound3dListener Interface
interface DirectSound3DListener8 : IUnknown {
  mixin(uuid("9f76fb02-8e92-11d1-8808-00c04fc2c603"));
  // static DWINGUID IID = { 0x9f76fb02, 0x8e92, 0x11d1, 0x88, 0x08, 0x00, 0xc0, 0x4f, 0xc2, 0xc6, 0x03 };
  /*[id(0x60010000)]*/ int InternalSetObject(IUnknown lpdd);
  /*[id(0x60010001)]*/ int InternalGetObject(out IUnknown lpdd);
  /*[id(0x60010002)]*/ int GetAllParameters(ref DS3DLISTENER listener);
  /*[id(0x60010003)]*/ int GetDistanceFactor(out float distanceFactor);
  /*[id(0x60010004)]*/ int GetDopplerFactor(out float dopplerFactor);
  /*[id(0x60010005)]*/ int GetOrientation(ref D3DVECTOR orientFront, ref D3DVECTOR orientTop);
  /*[id(0x60010006)]*/ int GetPosition(out D3DVECTOR Position);
  /*[id(0x60010007)]*/ int GetRolloffFactor(out float rolloffFactor);
  /*[id(0x60010008)]*/ int GetVelocity(out D3DVECTOR velocity);
  /*[id(0x60010009)]*/ int SetAllParameters(DS3DLISTENER* listener, CONST_DS3DAPPLYFLAGS applyFlag);
  /*[id(0x6001000A)]*/ int SetDistanceFactor(float distanceFactor, CONST_DS3DAPPLYFLAGS applyFlag);
  /*[id(0x6001000B)]*/ int SetDopplerFactor(float dopplerFactor, CONST_DS3DAPPLYFLAGS applyFlag);
  /*[id(0x6001000C)]*/ int SetOrientation(float xFront, float yFront, float zFront, float xTop, float yTop, float zTop, CONST_DS3DAPPLYFLAGS applyFlag);
  /*[id(0x6001000D)]*/ int SetPosition(float x, float y, float z, CONST_DS3DAPPLYFLAGS applyFlag);
  /*[id(0x6001000E)]*/ int SetRolloffFactor(float rolloffFactor, CONST_DS3DAPPLYFLAGS applyFlag);
  /*[id(0x6001000F)]*/ int SetVelocity(float x, float y, float z, CONST_DS3DAPPLYFLAGS applyFlag);
  /*[id(0x60010010)]*/ int CommitDeferredSettings();
  /*[id(0x60010011)]*/ int GetDirectSoundBuffer(out DirectSoundPrimaryBuffer8 retVal);
}

// DirectSoundCapture Interface
interface DirectSoundCapture8 : IUnknown {
  mixin(uuid("9f76fb04-8e92-11d1-8808-00c04fc2c603"));
  // static DWINGUID IID = { 0x9f76fb04, 0x8e92, 0x11d1, 0x88, 0x08, 0x00, 0xc0, 0x4f, 0xc2, 0xc6, 0x03 };
  /*[id(0x60010000)]*/ int InternalSetObject(IUnknown lpdd);
  /*[id(0x60010001)]*/ int InternalGetObject(out IUnknown lpdd);
  /*[id(0x60010002)]*/ int CreateCaptureBuffer(DSCBUFFERDESC* bufferDesc, out DirectSoundCaptureBuffer8 ret);
  /*[id(0x60010003)]*/ int GetCaps(ref DSCCAPS Caps);
}

// DirectSoundCaptureBuffer Interface
interface DirectSoundCaptureBuffer8 : IUnknown {
  mixin(uuid("9f76fb05-8e92-11d1-8808-00c04fc2c603"));
  // static DWINGUID IID = { 0x9f76fb05, 0x8e92, 0x11d1, 0x88, 0x08, 0x00, 0xc0, 0x4f, 0xc2, 0xc6, 0x03 };
  /*[id(0x60010000)]*/ int InternalSetObject(IUnknown lpdd);
  /*[id(0x60010001)]*/ int InternalGetObject(out IUnknown lpdd);
  /*[id(0x60010002)]*/ int GetCaps(ref DSCBCAPS Caps);
  /*[id(0x60010003)]*/ int GetCurrentPosition(ref DSCURSORS cursors);
  /*[id(0x60010004)]*/ int GetFormat(ref WAVEFORMATEX waveformat);
  /*[id(0x60010005)]*/ int GetStatus(out CONST_DSCBSTATUSFLAGS status);
  /*[id(0x60010006)]*/ int Initialize(DirectSoundCaptureBuffer8 captureBuffer, DSCBUFFERDESC* bufferDesc);
  /*[id(0x60010007)]*/ int Start(CONST_DSCBSTARTFLAGS flags);
  /*[id(0x60010008)]*/ int Stop();
  /*[id(0x60010009)]*/ int WriteBuffer(int Start, int Size, void* Buffer, CONST_DSCBLOCKFLAGS flags);
  /*[id(0x6001000A)]*/ int ReadBuffer(int Start, int Size, void* Buffer, CONST_DSCBLOCKFLAGS flags);
  /*[id(0x6001000B)]*/ int SetNotificationPositions(int nElements, SAFEARRAY* psa);
}

// DSEnum Interface
interface DirectSoundEnum8 : IUnknown {
  mixin(uuid("9f76fb07-8e92-11d1-8808-00c04fc2c603"));
  // static DWINGUID IID = { 0x9f76fb07, 0x8e92, 0x11d1, 0x88, 0x08, 0x00, 0xc0, 0x4f, 0xc2, 0xc6, 0x03 };
  /*[id(0x60010000)]*/ int GetGuid(int index, out wchar* guid);
  /*[id(0x60010001)]*/ int GetDescription(int index, out wchar* guid);
  /*[id(0x60010002)]*/ int GetName(int index, out wchar* guid);
  /*[id(0x60010003)]*/ int GetCount(out int count);
}

// DirectSoundFXGargle Interface
interface DirectSoundFXGargle8 : IUnknown {
  mixin(uuid("b9b28963-4adc-44f0-873f-9955244c9bd0"));
  // static DWINGUID IID = { 0xb9b28963, 0x4adc, 0x44f0, 0x87, 0x3f, 0x99, 0x55, 0x24, 0x4c, 0x9b, 0xd0 };
  /*[id(0x60010000)]*/ int InternalSetObject(IUnknown lpdd);
  /*[id(0x60010001)]*/ int InternalGetObject(out IUnknown lpdd);
  /*[id(0x60010002)]*/ int SetAllParameters(ref DSFXGARGLE params);
  /*[id(0x60010003)]*/ int GetAllParameters(out DSFXGARGLE params);
}

// DirectSoundFXChorus Interface
interface DirectSoundFXChorus8 : IUnknown {
  mixin(uuid("e53ac43d-651f-400d-b01f-e8a14512c6d6"));
  // static DWINGUID IID = { 0xe53ac43d, 0x651f, 0x400d, 0xb0, 0x1f, 0xe8, 0xa1, 0x45, 0x12, 0xc6, 0xd6 };
  /*[id(0x60010000)]*/ int InternalSetObject(IUnknown lpdd);
  /*[id(0x60010001)]*/ int InternalGetObject(out IUnknown lpdd);
  /*[id(0x60010002)]*/ int SetAllParameters(ref DSFXCHORUS params);
  /*[id(0x60010003)]*/ int GetAllParameters(out DSFXCHORUS params);
}

// DirectSoundFXFlanger Interface
interface DirectSoundFXFlanger8 : IUnknown {
  mixin(uuid("9f9c7bb0-f4ea-472b-89a8-36faadbce26e"));
  // static DWINGUID IID = { 0x9f9c7bb0, 0xf4ea, 0x472b, 0x89, 0xa8, 0x36, 0xfa, 0xad, 0xbc, 0xe2, 0x6e };
  /*[id(0x60010000)]*/ int InternalSetObject(IUnknown lpdd);
  /*[id(0x60010001)]*/ int InternalGetObject(out IUnknown lpdd);
  /*[id(0x60010002)]*/ int SetAllParameters(ref DSFXFLANGER params);
  /*[id(0x60010003)]*/ int GetAllParameters(out DSFXFLANGER params);
}

// DirectSoundFXEcho Interface
interface DirectSoundFXEcho8 : IUnknown {
  mixin(uuid("e852583a-526f-4875-842b-8db091a20fbc"));
  // static DWINGUID IID = { 0xe852583a, 0x526f, 0x4875, 0x84, 0x2b, 0x8d, 0xb0, 0x91, 0xa2, 0x0f, 0xbc };
  /*[id(0x60010000)]*/ int InternalSetObject(IUnknown lpdd);
  /*[id(0x60010001)]*/ int InternalGetObject(out IUnknown lpdd);
  /*[id(0x60010002)]*/ int SetAllParameters(ref DSFXECHO params);
  /*[id(0x60010003)]*/ int GetAllParameters(out DSFXECHO params);
}

// DirectSoundFXDistortion Interface
interface DirectSoundFXDistortion8 : IUnknown {
  mixin(uuid("3ce4d8d6-b301-49b4-9c63-9a989ca40388"));
  // static DWINGUID IID = { 0x3ce4d8d6, 0xb301, 0x49b4, 0x9c, 0x63, 0x9a, 0x98, 0x9c, 0xa4, 0x03, 0x88 };
  /*[id(0x60010000)]*/ int InternalSetObject(IUnknown lpdd);
  /*[id(0x60010001)]*/ int InternalGetObject(out IUnknown lpdd);
  /*[id(0x60010002)]*/ int SetAllParameters(ref DSFXDISTORTION params);
  /*[id(0x60010003)]*/ int GetAllParameters(out DSFXDISTORTION params);
}

// DirectSoundFXCompressor Interface
interface DirectSoundFXCompressor8 : IUnknown {
  mixin(uuid("f902315c-d34a-4133-bd65-4069230811dd"));
  // static DWINGUID IID = { 0xf902315c, 0xd34a, 0x4133, 0xbd, 0x65, 0x40, 0x69, 0x23, 0x08, 0x11, 0xdd };
  /*[id(0x60010000)]*/ int InternalSetObject(IUnknown lpdd);
  /*[id(0x60010001)]*/ int InternalGetObject(out IUnknown lpdd);
  /*[id(0x60010002)]*/ int SetAllParameters(ref DSFXCOMPRESSOR params);
  /*[id(0x60010003)]*/ int GetAllParameters(out DSFXCOMPRESSOR params);
}

// DirectSoundFXI3DL2Reverb Interface
interface DirectSoundFXI3DL2Reverb8 : IUnknown {
  mixin(uuid("542c5d87-47fc-457b-859a-1a45bbf71a63"));
  // static DWINGUID IID = { 0x542c5d87, 0x47fc, 0x457b, 0x85, 0x9a, 0x1a, 0x45, 0xbb, 0xf7, 0x1a, 0x63 };
  /*[id(0x60010000)]*/ int InternalSetObject(IUnknown lpdd);
  /*[id(0x60010001)]*/ int InternalGetObject(out IUnknown lpdd);
  /*[id(0x60010002)]*/ int SetAllParameters(ref DSFXI3DL2REVERB params);
  /*[id(0x60010003)]*/ int GetAllParameters(out DSFXI3DL2REVERB params);
  /*[id(0x60010004)]*/ int SetPreset(CONST_DSFX_I3DL2_ENVIRONMENT_PRESETS lPreset);
  /*[id(0x60010005)]*/ int GetPreset(out int ret);
  /*[id(0x60010006)]*/ int SetQuality(CONST_DSFX_I3DL2REVERB_QUALITY lQuality);
  /*[id(0x60010007)]*/ int GetQuality(out int ret);
}

// DirectSoundFXParamEQ Interface
interface DirectSoundFXParamEq8 : IUnknown {
  mixin(uuid("cd83b9c1-b4e9-416b-97f5-0642dc952301"));
  // static DWINGUID IID = { 0xcd83b9c1, 0xb4e9, 0x416b, 0x97, 0xf5, 0x06, 0x42, 0xdc, 0x95, 0x23, 0x01 };
  /*[id(0x60010000)]*/ int InternalSetObject(IUnknown lpdd);
  /*[id(0x60010001)]*/ int InternalGetObject(out IUnknown lpdd);
  /*[id(0x60010002)]*/ int SetAllParameters(ref DSFXPARAMEQ params);
  /*[id(0x60010003)]*/ int GetAllParameters(out DSFXPARAMEQ params);
}

// DirectSoundFXWavesReverb Interface
interface DirectSoundFXWavesReverb8 : IUnknown {
  mixin(uuid("a4d4d800-94be-4c33-9a0e-eba0696a63a9"));
  // static DWINGUID IID = { 0xa4d4d800, 0x94be, 0x4c33, 0x9a, 0x0e, 0xeb, 0xa0, 0x69, 0x6a, 0x63, 0xa9 };
  /*[id(0x60010000)]*/ int InternalSetObject(IUnknown lpdd);
  /*[id(0x60010001)]*/ int InternalGetObject(out IUnknown lpdd);
  /*[id(0x60010002)]*/ int SetAllParameters(ref DSFXWAVESREVERB params);
  /*[id(0x60010003)]*/ int GetAllParameters(out DSFXWAVESREVERB params);
}

// DirectMusicLoader Interface
interface DirectMusicLoader8 : IUnknown {
  mixin(uuid("fafa35a0-8b72-11d2-90b2-00c04fc2c603"));
  // static DWINGUID IID = { 0xfafa35a0, 0x8b72, 0x11d2, 0x90, 0xb2, 0x00, 0xc0, 0x4f, 0xc2, 0xc6, 0x03 };
  /*[id(0x60010000)]*/ int InternalSetObject(IUnknown lpdd);
  /*[id(0x60010001)]*/ int InternalGetObject(out IUnknown lpdd);
  /*[id(0x60010002)]*/ int LoadSegment(wchar* filename, out DirectMusicSegment8 ret);
  /*[id(0x60010003)]*/ int LoadStyle(wchar* filename, out DirectMusicStyle8 ret);
  /*[id(0x60010004)]*/ int LoadBand(wchar* filename, out DirectMusicBand8 ret);
  /*[id(0x60010005)]*/ int LoadCollection(wchar* filename, out DirectMusicCollection8 ret);
  /*[id(0x60010006)]*/ int LoadSegmentFromResource(wchar* moduleName, wchar* resourceName, out DirectMusicSegment8 ret);
  /*[id(0x60010007)]*/ int LoadStyleFromResource(wchar* moduleName, wchar* resourceName, out DirectMusicStyle8 ret);
  /*[id(0x60010008)]*/ int LoadBandFromResource(wchar* moduleName, wchar* resourceName, out DirectMusicBand8 ret);
  /*[id(0x60010009)]*/ int LoadCollectionFromResource(wchar* moduleName, wchar* resourceName, out DirectMusicCollection8 ret);
  /*[id(0x6001000A)]*/ int SetSearchDirectory(wchar* dir);
  /*[id(0x6001000B)]*/ int LoadChordMap(wchar* filename, out DirectMusicChordMap8 ret);
  /*[id(0x6001000C)]*/ int LoadChordMapFromResource(wchar* moduleName, wchar* resourceName, out DirectMusicChordMap8 ret);
}

// DirectMusicSegment Interface
interface DirectMusicSegment8 : IUnknown {
  mixin(uuid("fafa35a1-8b72-11d2-90b2-00c04fc2c603"));
  // static DWINGUID IID = { 0xfafa35a1, 0x8b72, 0x11d2, 0x90, 0xb2, 0x00, 0xc0, 0x4f, 0xc2, 0xc6, 0x03 };
  /*[id(0x60010000)]*/ int InternalSetObject(IUnknown lpdd);
  /*[id(0x60010001)]*/ int InternalGetObject(out IUnknown lpdd);
  /*[id(0x60010002)]*/ int Clone(int mtStart, int mtEnd, out DirectMusicSegment8 ppSegment);
  /*[id(0x60010003)]*/ int SetStartPoint(int mtStart);
  /*[id(0x60010004)]*/ int GetStartPoint(out int pmtStart);
  /*[id(0x60010005)]*/ int SetLoopPoints(int mtStart, int mtEnd);
  /*[id(0x60010006)]*/ int GetLoopPointStart(out int pmtStart);
  /*[id(0x60010007)]*/ int GetLoopPointEnd(out int pmtEnd);
  /*[id(0x60010008)]*/ int GetLength(out int pmtLength);
  /*[id(0x60010009)]*/ int SetLength(int mtLength);
  /*[id(0x6001000A)]*/ int GetRepeats(out int lRepeats);
  /*[id(0x6001000B)]*/ int SetRepeats(int lRepeats);
  /*[id(0x6001000C)]*/ int Download(IUnknown downloadpath);
  /*[id(0x6001000D)]*/ int Unload(IUnknown downloadpath);
  /*[id(0x6001000E)]*/ int SetAutoDownloadEnable(short b);
  /*[id(0x6001000F)]*/ int SetTempoEnable(short b);
  /*[id(0x60010010)]*/ int SetTimeSigEnable(short b);
  /*[id(0x60010011)]*/ int SetStandardMidiFile();
  /*[id(0x60010012)]*/ int ConnectToCollection(DirectMusicCollection8 c);
  /*[id(0x60010013)]*/ int GetAudioPathConfig(out IUnknown ret);
  /*[id(0x60010014)]*/ int GetStyle(int lTrack, out DirectMusicStyle8 ret);
  /*[id(0x60010015)]*/ int GetChordMap(int lTrack, int mtTime, ref int mtUntil, out DirectMusicChordMap8 ret);
  /*[id(0x60010016)]*/ int GetName(out wchar* ret);
}

// DirectMusicCollection Interface
interface DirectMusicCollection8 : IUnknown {
  mixin(uuid("fafa35a8-8b72-11d2-90b2-00c04fc2c603"));
  // static DWINGUID IID = { 0xfafa35a8, 0x8b72, 0x11d2, 0x90, 0xb2, 0x00, 0xc0, 0x4f, 0xc2, 0xc6, 0x03 };
  /*[id(0x60010000)]*/ int InternalSetObject(IUnknown lpdd);
  /*[id(0x60010001)]*/ int InternalGetObject(out IUnknown lpdd);
}

// DirectMusicStyle Interface
interface DirectMusicStyle8 : IUnknown {
  mixin(uuid("fafa35a4-8b72-11d2-90b2-00c04fc2c603"));
  // static DWINGUID IID = { 0xfafa35a4, 0x8b72, 0x11d2, 0x90, 0xb2, 0x00, 0xc0, 0x4f, 0xc2, 0xc6, 0x03 };
  /*[id(0x60010000)]*/ int InternalSetObject(IUnknown lpdd);
  /*[id(0x60010001)]*/ int InternalGetObject(out IUnknown lpdd);
  /*[id(0x60010002)]*/ int GetBandName(int index, out wchar* name);
  /*[id(0x60010003)]*/ int GetBandCount(out int count);
  /*[id(0x60010004)]*/ int GetBand(wchar* name, out DirectMusicBand8 ret);
  /*[id(0x60010005)]*/ int GetDefaultBand(out DirectMusicBand8 ret);
  /*[id(0x60010006)]*/ int GetMotifName(int index, out wchar* name);
  /*[id(0x60010007)]*/ int GetMotifCount(out int count);
  /*[id(0x60010008)]*/ int GetMotif(wchar* name, out DirectMusicSegment8 ret);
  /*[id(0x60010009)]*/ int GetTimeSignature(ref DMUS_TIMESIGNATURE pTimeSig);
  /*[id(0x6001000A)]*/ int GetTempo(out double pTempo);
}

// DirectMusicBand Interface
interface DirectMusicBand8 : IUnknown {
  mixin(uuid("fafa35a3-8b72-11d2-90b2-00c04fc2c603"));
  // static DWINGUID IID = { 0xfafa35a3, 0x8b72, 0x11d2, 0x90, 0xb2, 0x00, 0xc0, 0x4f, 0xc2, 0xc6, 0x03 };
  /*[id(0x60010000)]*/ int InternalSetObject(IUnknown lpdd);
  /*[id(0x60010001)]*/ int InternalGetObject(out IUnknown lpdd);
  /*[id(0x60010002)]*/ int CreateSegment(out DirectMusicSegment8 ret);
  /*[id(0x60010003)]*/ int Download(DirectMusicPerformance8 downloadpath);
  /*[id(0x60010004)]*/ int Unload(DirectMusicPerformance8 downloadpath);
}

// DirectMusicPerformance Interface
interface DirectMusicPerformance8 : IUnknown {
  mixin(uuid("fafa35a7-8b72-11d2-90b2-00c04fc2c603"));
  // static DWINGUID IID = { 0xfafa35a7, 0x8b72, 0x11d2, 0x90, 0xb2, 0x00, 0xc0, 0x4f, 0xc2, 0xc6, 0x03 };
  /*[id(0x60010000)]*/ int InternalSetObject(IUnknown lpdd);
  /*[id(0x60010001)]*/ int InternalGetObject(out IUnknown lpdd);
  /*[id(0x60010002)]*/ int CloseDown();
  /*[id(0x60010003)]*/ int GetSegmentState(int mtTime, out DirectMusicSegmentState8 ret);
  /*[id(0x60010004)]*/ int Invalidate(int mtTime, int flags);
  /*[id(0x60010005)]*/ int IsPlaying(DirectMusicSegment8 segment, DirectMusicSegmentState8 segmentState, out short b);
  /*[id(0x60010006)]*/ int AddNotificationType(CONST_DMUS_NOTIFICATION_TYPE Type);
  /*[id(0x60010007)]*/ int RemoveNotificationType(CONST_DMUS_NOTIFICATION_TYPE Type);
  /*[id(0x60010008)]*/ int SetNotificationHandle(int hnd);
  /*[id(0x60010009)]*/ int GetNotificationPMSG(ref DMUS_NOTIFICATION_PMSG message, out short success);
  /*[id(0x6001000A)]*/ int MusicToClockTime(int mtTime, out int ctTime);
  /*[id(0x6001000B)]*/ int ClockToMusicTime(int ctTime, out int mtTime);
  /*[id(0x6001000C)]*/ int GetMusicTime(out int ret);
  /*[id(0x6001000D)]*/ int GetClockTime(out int ret);
  /*[id(0x6001000E)]*/ int GetPrepareTime(out int lMilliSeconds);
  /*[id(0x6001000F)]*/ int GetBumperLength(out int lMilliSeconds);
  /*[id(0x60010010)]*/ int GetLatencyTime(out int ctTime);
  /*[id(0x60010011)]*/ int GetQueueTime(out int ctTime);
  /*[id(0x60010012)]*/ int GetResolvedTime(int ctTime, int flags, out int ret);
  /*[id(0x60010013)]*/ int SetPrepareTime(int lMilliSeconds);
  /*[id(0x60010014)]*/ int SetBumperLength(int lMilliSeconds);
  /*[id(0x60010015)]*/ int AdjustTime(int tAmount);
  /*[id(0x60010016)]*/ int SetMasterAutoDownload(short b);
  /*[id(0x60010017)]*/ int GetMasterAutoDownload(out short b);
  /*[id(0x60010018)]*/ int SetMasterTempo(float tempo);
  /*[id(0x60010019)]*/ int GetMasterTempo(out float tempo);
  /*[id(0x6001001A)]*/ int SetMasterVolume(int vol);
  /*[id(0x6001001B)]*/ int GetMasterVolume(out int v);
  /*[id(0x6001001C)]*/ int SetMasterGrooveLevel(short Level);
  /*[id(0x6001001D)]*/ int GetMasterGrooveLevel(out short Level);
  /*[id(0x6001001E)]*/ int Reset(int resetflags);
  /*[id(0x6001001F)]*/ int GetStyle(int mtTime, ref int mtUntil, out DirectMusicStyle8 ret);
  /*[id(0x60010020)]*/ int GetChordMap(int mtTime, ref int mtUntil, out DirectMusicChordMap8 ret);
  /*[id(0x60010021)]*/ int GetCommand(int mtTime, ref int mtUntil, out ubyte command);
  /*[id(0x60010022)]*/ int GetGrooveLevel(int mtTime, ref int mtUntil, out ubyte Level);
  /*[id(0x60010023)]*/ int GetTempo(int mtTime, ref int mtUntil, out double tempo);
  /*[id(0x60010024)]*/ int GetTimeSig(int mtTime, ref int mtUntil, ref DMUS_TIMESIGNATURE timeSig);
  /*[id(0x60010025)]*/ int SendNotePMSG(int lTime, int flags, int channel, DMUS_NOTE_PMSG* msg);
  /*[id(0x60010026)]*/ int SendCurvePMSG(int lTime, int flags, int channel, DMUS_CURVE_PMSG* msg);
  /*[id(0x60010027)]*/ int SendMIDIPMSG(int lTime, int flags, int channel, ubyte status, ubyte byte1, ubyte byte2);
  /*[id(0x60010028)]*/ int SendPatchPMSG(int lTime, int flags, int channel, ubyte instrument, ubyte byte1, ubyte byte2);
  /*[id(0x60010029)]*/ int SendTempoPMSG(int lTime, int flags, double tempo);
  /*[id(0x6001002A)]*/ int SendTransposePMSG(int lTime, int flags, int channel, short transpose);
  /*[id(0x6001002B)]*/ int SendTimeSigPMSG(int lTime, int flags, DMUS_TIMESIGNATURE* timeSig);
  /*[id(0x6001002C)]*/ int InitAudio(int hwnd, CONST_DMUS_AUDIO lFlags, ref DMUS_AUDIOPARAMS AudioParams, DirectSound8 directSound, CONST_DMUSIC_STANDARD_AUDIO_PATH lDefaultPathType, int lPChannelCount);
  /*[id(0x6001002D)]*/ int PlaySegmentEx(IUnknown Source, CONST_DMUS_SEGF_FLAGS lFlags, int StartTime, IUnknown From, IUnknown AudioPath, out DirectMusicSegmentState8 ppSegmentState);
  /*[id(0x6001002E)]*/ int StopEx(IUnknown ObjectToStop, int lStopTime, CONST_DMUS_SEGF_FLAGS lFlags);
  /*[id(0x6001002F)]*/ int CreateAudioPath(IUnknown SourceConfig, short fActive, out DirectMusicAudioPath8 ppNewPath);
  /*[id(0x60010030)]*/ int CreateStandardAudioPath(CONST_DMUSIC_STANDARD_AUDIO_PATH lType, int lPChannelCount, short fActive, out DirectMusicAudioPath8 ppNewPath);
  /*[id(0x60010031)]*/ int SetDefaultAudioPath(ref DirectMusicAudioPath8 AudioPath);
  /*[id(0x60010032)]*/ int GetDefaultAudioPath(out DirectMusicAudioPath8 ppAudioPath);
}

// DirectMusicSegmentState Interface
interface DirectMusicSegmentState8 : IUnknown {
  mixin(uuid("fafa35a6-8b72-11d2-90b2-00c04fc2c603"));
  // static DWINGUID IID = { 0xfafa35a6, 0x8b72, 0x11d2, 0x90, 0xb2, 0x00, 0xc0, 0x4f, 0xc2, 0xc6, 0x03 };
  /*[id(0x60010000)]*/ int InternalSetObject(IUnknown lpdd);
  /*[id(0x60010001)]*/ int InternalGetObject(out IUnknown lpdd);
  /*[id(0x60010002)]*/ int GetRepeats(out int repeats);
  /*[id(0x60010003)]*/ int GetSeek(out int seek);
  /*[id(0x60010004)]*/ int GetStartPoint(out int seek);
  /*[id(0x60010005)]*/ int GetStartTime(out int seek);
  /*[id(0x60010006)]*/ int GetSegment(out DirectMusicSegment8 segment);
}

// DirectMusicChordMap Interface
interface DirectMusicChordMap8 : IUnknown {
  mixin(uuid("fafa35a5-8b72-11d2-90b2-00c04fc2c603"));
  // static DWINGUID IID = { 0xfafa35a5, 0x8b72, 0x11d2, 0x90, 0xb2, 0x00, 0xc0, 0x4f, 0xc2, 0xc6, 0x03 };
  /*[id(0x60010000)]*/ int InternalSetObject(IUnknown lpdd);
  /*[id(0x60010001)]*/ int InternalGetObject(out IUnknown lpdd);
  /*[id(0x60010002)]*/ int GetScale(out int scale);
}

// DirectMusicAudioPath Interface
interface DirectMusicAudioPath8 : IUnknown {
  mixin(uuid("a4a8597a-ba7a-4648-b321-1701598844d8"));
  // static DWINGUID IID = { 0xa4a8597a, 0xba7a, 0x4648, 0xb3, 0x21, 0x17, 0x01, 0x59, 0x88, 0x44, 0xd8 };
  /*[id(0x60010000)]*/ int InternalSetObject(IUnknown lpdd);
  /*[id(0x60010001)]*/ int InternalGetObject(out IUnknown lpdd);
  /*[id(0x60010002)]*/ int GetObjectinPath(int lPChannel, CONST_DMUSIC_PATH lStage, int lBuffer, wchar* guidObject, int lIndex, wchar* iidInterface, out IUnknown ppObject);
  /*[id(0x60010003)]*/ int Activate(short fActive);
  /*[id(0x60010004)]*/ int SetVolume(int lVolume, int lDuration);
}

// DirectMusicComposer Interface
interface DirectMusicComposer8 : IUnknown {
  mixin(uuid("fafa35a2-8b72-11d2-90b2-00c04fc2c603"));
  // static DWINGUID IID = { 0xfafa35a2, 0x8b72, 0x11d2, 0x90, 0xb2, 0x00, 0xc0, 0x4f, 0xc2, 0xc6, 0x03 };
  /*[id(0x60010000)]*/ int InternalSetObject(IUnknown lpdd);
  /*[id(0x60010001)]*/ int InternalGetObject(out IUnknown lpdd);
  /*[id(0x60010002)]*/ int AutoTransition(DirectMusicPerformance8 performance, DirectMusicSegment8 toSeg, int lCommand, int lFlags, DirectMusicChordMap8 chordmap, out DirectMusicSegment8 ppTransSeg);
  /*[id(0x60010003)]*/ int ComposeSegmentFromTemplate(DirectMusicStyle8 style, DirectMusicSegment8 templateSeg, short activity, DirectMusicChordMap8 chordmap, out DirectMusicSegment8 SectionSeg);
  /*[id(0x60010004)]*/ int ComposeSegmentFromShape(DirectMusicStyle8 style, short numberOfMeasures, short shape, short activity, short bIntro, short bEnd, DirectMusicChordMap8 chordmap, out DirectMusicSegment8 SectionSeg);
  /*[id(0x60010005)]*/ int ComposeTransition(DirectMusicSegment8 fromSeg, DirectMusicSegment8 toSeg, int mtTime, int lCommand, int lFlags, DirectMusicChordMap8 chordmap, out DirectMusicSegment8 SectionSeg);
  /*[id(0x60010006)]*/ int ComposeTemplateFromShape(short numMeasures, short shape, short bIntro, short bEnd, short endLength, out DirectMusicSegment8 TempSeg);
  /*[id(0x60010007)]*/ int ChangeChordMap(DirectMusicSegment8 segment, short trackScale, DirectMusicChordMap8 chordmap);
}

// I_dxj_DirectInput8 Interface
interface DirectInput8 : IUnknown {
  mixin(uuid("819d20c1-8ad2-11d3-ac85-00c04fc2c602"));
  // static DWINGUID IID = { 0x819d20c1, 0x8ad2, 0x11d3, 0xac, 0x85, 0x00, 0xc0, 0x4f, 0xc2, 0xc6, 0x02 };
  /*[id(0x60010000)]*/ int InternalSetObject(IUnknown lpdd);
  /*[id(0x60010001)]*/ int InternalGetObject(out IUnknown lpdd);
  /*[id(0x60010002)]*/ int CreateDevice(wchar* guid, out DirectInputDevice8 dev);
  /*[id(0x60010003)]*/ int GetDIDevices(CONST_DI8DEVICETYPE DeviceType, CONST_DIENUMDEVICESFLAGS flags, out DirectInputEnumDevices8 retVal);
  /*[id(0x60010004)]*/ int GetDeviceStatus(wchar* guid, out short status);
  /*[id(0x60010005)]*/ int RunControlPanel(int hwndOwner);
  /*[id(0x60010006)]*/ int GetDevicesBySemantics(wchar* str1, DIACTIONFORMAT* Format, int flags, out DirectInputEnumDevices8 ret);
  /*[id(0x60010007)]*/ int ConfigureDevices(int hEvent, DICONFIGUREDEVICESPARAMS* CDParams, int flags);
}

// I_dxj_DirectInputDevice8 Interface
interface DirectInputDevice8 : IUnknown {
  mixin(uuid("819d20c3-8ad2-11d3-ac85-00c04fc2c602"));
  // static DWINGUID IID = { 0x819d20c3, 0x8ad2, 0x11d3, 0xac, 0x85, 0x00, 0xc0, 0x4f, 0xc2, 0xc6, 0x02 };
  /*[id(0x60010000)]*/ int InternalSetObject(IUnknown lpdd);
  /*[id(0x60010001)]*/ int InternalGetObject(out IUnknown lpdd);
  /*[id(0x60010002)]*/ int Acquire();
  /*[id(0x60010003)]*/ int GetDeviceObjectsEnum(CONST_DIDFTFLAGS flags, out DirectInputEnumDeviceObjects ppret);
  /*[id(0x60010004)]*/ int GetCapabilities(ref DIDEVCAPS Caps);
  /*[id(0x60010005)]*/ int GetDeviceData(ref SAFEARRAY deviceObjectDataArray, CONST_DIDGDDFLAGS flags, out int c);
  /*[id(0x60010006)]*/ int GetDeviceInfo(out DirectInputDeviceInstance8 deviceInstance);
  /*[id(0x60010007)]*/ int GetDeviceStateKeyboard(ref DIKEYBOARDSTATE state);
  /*[id(0x60010008)]*/ int GetDeviceStateMouse(ref DIMOUSESTATE state);
  /*[id(0x60010009)]*/ int GetDeviceStateMouse2(ref DIMOUSESTATE2 state);
  /*[id(0x6001000A)]*/ int GetDeviceStateJoystick(ref DIJOYSTATE state);
  /*[id(0x6001000B)]*/ int GetDeviceStateJoystick2(ref DIJOYSTATE2 state);
  /*[id(0x6001000C)]*/ int GetDeviceState(int cb, void* state);
  /*[id(0x6001000D)]*/ int GetObjectInfo(int obj, CONST_DIPHFLAGS how, out DirectInputDeviceObjectInstance ret);
  /*[id(0x6001000E)]*/ int GetProperty(wchar* guid, void *propertyInfo);
  /*[id(0x6001000F)]*/ int RunControlPanel(int hwnd);
  /*[id(0x60010010)]*/ int SetCooperativeLevel(int hwnd, CONST_DISCLFLAGS flags);
  /*[id(0x60010011)]*/ int SetCommonDataFormat(CONST_DICOMMONDATAFORMATS Format);
  /*[id(0x60010012)]*/ int SetDataFormat(DIDATAFORMAT* Format, SAFEARRAY* formatArray);
  /*[id(0x60010013)]*/ int SetEventNotification(int hEvent);
  /*[id(0x60010014)]*/ int SetProperty(wchar* guid, void* propertyInfo);
  /*[id(0x60010015)]*/ int Unacquire();
  /*[id(0x60010016)]*/ int Poll();
  /*[id(0x60010017)]*/ int CreateEffect(wchar* effectGuid, DIEFFECT* effectinfo, out DirectInputEffect ret);
  /*[id(0x60010018)]*/ int CreateCustomEffect(DIEFFECT* effectinfo, int channels, int samplePeriod, int nSamples, SAFEARRAY* sampledata, out DirectInputEffect ret);
  /*[id(0x60010019)]*/ int SendDeviceData(int count, SAFEARRAY* Data, CONST_DISDDFLAGS flags, out int retcount);
  /*[id(0x6001001A)]*/ int SendForceFeedbackCommand(CONST_DISFFCFLAGS flags);
  /*[id(0x6001001B)]*/ int GetForceFeedbackState(out CONST_DIGFFSFLAGS state);
  /*[id(0x6001001C)]*/ int GetEffectsEnum(CONST_DIEFTFLAGS effType, out DirectInputEnumEffects ret);
  /*[id(0x6001001D)]*/ int BuildActionMap(ref DIACTIONFORMAT Format, wchar* username, int flags);
  /*[id(0x6001001E)]*/ int SetActionMap(ref DIACTIONFORMAT Format, wchar* username, int flags);
  /*[id(0x6001001F)]*/ int GetImageInfo(out DIDEVICEIMAGEINFOHEADER info);
  /*[id(0x60010020)]*/ int GetImageInfoCount(out int c);
  /*[id(0x60010021)]*/ int WriteEffectToFile(wchar* filename, int flags, wchar* guid, wchar* name, DIEFFECT* CoverEffect);
  /*[id(0x60010022)]*/ int CreateEffectFromFile(wchar* filename, int flags, wchar* effectName, out DirectInputEffect ret);
}

// I_dxj_DIEnumDeviceObjects Interface
interface DirectInputEnumDeviceObjects : IUnknown {
  mixin(uuid("9f76fa08-8e92-11d1-8808-00c04fc2c602"));
  // static DWINGUID IID = { 0x9f76fa08, 0x8e92, 0x11d1, 0x88, 0x08, 0x00, 0xc0, 0x4f, 0xc2, 0xc6, 0x02 };
  /*[id(0x60010000)]*/ int GetItem(int index, out DirectInputDeviceObjectInstance info);
  /*[id(0x60010001)]*/ int GetCount(out int count);
}

// I_dxj_DirectInputDeviceObjectInstance Interface
interface DirectInputDeviceObjectInstance : IUnknown {
  mixin(uuid("9f76fa05-8e92-11d1-8808-00c04fc2c602"));
  // static DWINGUID IID = { 0x9f76fa05, 0x8e92, 0x11d1, 0x88, 0x08, 0x00, 0xc0, 0x4f, 0xc2, 0xc6, 0x02 };
  /*[id(0x60010000)]*/ int GetGuidType(out wchar* ret);
  /*[id(0x60010001)]*/ int GetOfs(out int ret);
  /*[id(0x60010002)]*/ int GetType(out int ret);
  /*[id(0x60010003)]*/ int GetFlags(out CONST_DIDEVICEOBJINSTANCEFLAGS ret);
  /*[id(0x60010004)]*/ int GetName(out wchar* ret);
  /*[id(0x60010005)]*/ int GetCollectionNumber(out short ret);
  /*[id(0x60010006)]*/ int GetDesignatorIndex(out short ret);
  /*[id(0x60010007)]*/ int GetUsagePage(out short ret);
  /*[id(0x60010008)]*/ int GetUsage(out short ret);
  /*[id(0x60010009)]*/ int GetDimension(out int ret);
  /*[id(0x6001000A)]*/ int GetExponent(out short ret);
}

// I_dxj_DirectInputDeviceInstance8 Interface
interface DirectInputDeviceInstance8 : IUnknown {
  mixin(uuid("819d20c2-8ad2-11d3-ac85-00c04fc2c602"));
  // static DWINGUID IID = { 0x819d20c2, 0x8ad2, 0x11d3, 0xac, 0x85, 0x00, 0xc0, 0x4f, 0xc2, 0xc6, 0x02 };
  /*[id(0x60010000)]*/ int GetGuidInstance(out wchar* ret);
  /*[id(0x60010001)]*/ int GetGuidProduct(out wchar* ret);
  /*[id(0x60010002)]*/ int GetProductName(out wchar* ret);
  /*[id(0x60010003)]*/ int GetInstanceName(out wchar* ret);
  /*[id(0x60010004)]*/ int GetGuidFFDriver(out wchar* ret);
  /*[id(0x60010005)]*/ int GetUsagePage(out short ret);
  /*[id(0x60010006)]*/ int GetUsage(out short ret);
  /*[id(0x60010007)]*/ int GetDevType(out int ret);
}

// I_dxj_DirectInputEffect Interface
interface DirectInputEffect : IUnknown {
  mixin(uuid("bcaa7da9-f7ef-11d2-93fd-00c04fc2c602"));
  // static DWINGUID IID = { 0xbcaa7da9, 0xf7ef, 0x11d2, 0x93, 0xfd, 0x00, 0xc0, 0x4f, 0xc2, 0xc6, 0x02 };
  /*[id(0x60010000)]*/ int InternalSetObject(IUnknown lpdd);
  /*[id(0x60010001)]*/ int InternalGetObject(out IUnknown lpdd);
  /*[id(0x60010002)]*/ int Download();
  /*[id(0x60010003)]*/ int GetEffectGuid(out wchar* guid);
  /*[id(0x60010004)]*/ int GetEffectStatus(out int ret);
  /*[id(0x60010005)]*/ int Start(int iterations, int flags);
  /*[id(0x60010006)]*/ int Stop();
  /*[id(0x60010007)]*/ int Unload();
  /*[id(0x60010008)]*/ int SetParameters(DIEFFECT* effectinfo, CONST_DIEPFLAGS flags);
  /*[id(0x60010009)]*/ int GetParameters(ref DIEFFECT effectinfo);
}

// I_dxj_DirectInputEnumEffects Interface
interface DirectInputEnumEffects : IUnknown {
  mixin(uuid("bcaa7daa-f7ef-11d2-93fd-00c04fc2c602"));
  // static DWINGUID IID = { 0xbcaa7daa, 0xf7ef, 0x11d2, 0x93, 0xfd, 0x00, 0xc0, 0x4f, 0xc2, 0xc6, 0x02 };
  /*[id(0x60010000)]*/ int GetCount(out int ret);
  /*[id(0x60010001)]*/ int GetEffectGuid(int i, out wchar* ret);
  /*[id(0x60010002)]*/ int GetType(int i, out CONST_DIEFTFLAGS ret);
  /*[id(0x60010003)]*/ int GetStaticParams(int i, out CONST_DIEPFLAGS ret);
  /*[id(0x60010004)]*/ int GetDynamicParams(int i, out CONST_DIEPFLAGS ret);
  /*[id(0x60010005)]*/ int GetName(int i, out wchar* ret);
}

// I_dxj_DIEnumDevices8 Interface
interface DirectInputEnumDevices8 : IUnknown {
  mixin(uuid("819d20c4-8ad2-11d3-ac85-00c04fc2c602"));
  // static DWINGUID IID = { 0x819d20c4, 0x8ad2, 0x11d3, 0xac, 0x85, 0x00, 0xc0, 0x4f, 0xc2, 0xc6, 0x02 };
  /*[id(0x60010000)]*/ int GetItem(int index, out DirectInputDeviceInstance8 info);
  /*[id(0x60010001)]*/ int GetCount(out int count);
}

// DirectPlay Peer Interface
interface DirectPlay8Peer : IUnknown {
  mixin(uuid("7c34602a-7b81-4c6d-9533-658f2d471efc"));
  // static DWINGUID IID = { 0x7c34602a, 0x7b81, 0x4c6d, 0x95, 0x33, 0x65, 0x8f, 0x2d, 0x47, 0x1e, 0xfc };
  /*[id(0x60010000)]*/ int InternalSetObject(IUnknown lpdd);
  /*[id(0x60010001)]*/ int InternalGetObject(out IUnknown lpdd);
  /*[id(0x60010002)]*/ int SendTo(int idSend, SAFEARRAY* BufferData, int lTimeOut, CONST_DPNSENDFLAGS lFlags, out int hAsyncHandle);
  /*[id(0x60010003)]*/ int CreateGroup(ref DPN_GROUP_INFO GroupInfo, CONST_DPNOPERATIONS lFlags, out int hAsyncHandle);
  /*[id(0x60010004)]*/ int AddPlayerToGroup(int idGroup, int idClient, CONST_DPNOPERATIONS lFlags, out int hAsyncHandle);
  /*[id(0x60010005)]*/ int GetSendQueueInfo(int idPlayer, ref int lNumMsgs, ref int lNumBytes, CONST_DPNGETSENDQUEUEINFO lFlags);
  /*[id(0x60010006)]*/ int SetGroupInfo(int idGroup, ref DPN_GROUP_INFO PlayerInfo, CONST_DPNOPERATIONS lFlags, out int hAsyncHandle);
  /*[id(0x60010007)]*/ int GetGroupInfo(int idGroup, CONST_DPNOPERATIONS lFlags, out DPN_GROUP_INFO layerInfo);
  /*[id(0x60010008)]*/ int SetPeerInfo(DPN_PLAYER_INFO* PlayerInfo, CONST_DPNOPERATIONS lFlags, out int hAsyncHandle);
  /*[id(0x60010009)]*/ int GetPeerInfo(int idPeer, CONST_DPNOPERATIONS lFlags, out DPN_PLAYER_INFO layerInfo);
  /*[id(0x6001000A)]*/ int DestroyGroup(int idGroup, CONST_DPNOPERATIONS lFlags, out int hAsyncHandle);
  /*[id(0x6001000B)]*/ int RemovePlayerFromGroup(int idGroup, int idClient, CONST_DPNOPERATIONS lFlags, out int hAsyncHandle);
  /*[id(0x6001000C)]*/ int DestroyPeer(int idClient, int lFlags, void* UserData, int UserDataSize);
  /*[id(0x6001000D)]*/ int Connect(DPN_APPLICATION_DESC* AppDesc, DirectPlay8Address Address, DirectPlay8Address DeviceInfo, CONST_DPNOPERATIONS lFlags, void* UserData, int UserDataSize, out int hAsyncHandle);
  /*[id(0x6001000E)]*/ int RegisterMessageHandler(DirectPlay8Event event);
  /*[id(0x6001000F)]*/ int EnumHosts(DPN_APPLICATION_DESC* ApplicationDesc, DirectPlay8Address AddrHost, DirectPlay8Address DeviceInfo, int lEnumCount, int lRetryInterval, int lTimeOut, CONST_DPNOPERATIONS lFlags, void* UserData, int UserDataSize, out int lAsync);
  /*[id(0x60010010)]*/ int GetCountServiceProviders(int lFlags, out int ret);
  /*[id(0x60010011)]*/ int GetServiceProvider(int lIndex, out DPN_SERVICE_PROVIDER_INFO ret);
  /*[id(0x60010012)]*/ int GetCountPlayersAndGroups(CONST_DPNENUMCLIENTGROUPFLAGS lFlags, out int ret);
  /*[id(0x60010013)]*/ int GetPlayerOrGroup(int lIndex, out int ret);
  /*[id(0x60010014)]*/ int GetCountGroupMembers(int dpid, int lFlags, out int ret);
  /*[id(0x60010015)]*/ int GetGroupMember(int lIndex, int dpid, out int ret);
  /*[id(0x60010016)]*/ int ReturnBuffer(int lBufferHandle);
  /*[id(0x60010017)]*/ int Host(DPN_APPLICATION_DESC* AppDesc, DirectPlay8Address Addres, int lFlags);
  /*[id(0x60010018)]*/ int CancelAsyncOperation(int lAsyncHandle, CONST_DPNCANCELFLAGS lFlags);
  /*[id(0x60010019)]*/ int GetApplicationDesc(int lFlags, out DPN_APPLICATION_DESC ret);
  /*[id(0x6001001A)]*/ int SetApplicationDesc(ref DPN_APPLICATION_DESC AppDesc, int lFlags);
  /*[id(0x6001001B)]*/ int Close(int lFlags);
  /*[id(0x6001001C)]*/ int GetCaps(int lFlags, out DPN_CAPS ret);
  /*[id(0x6001001D)]*/ int SetCaps(ref DPN_CAPS Caps, int lFlags);
  /*[id(0x6001001E)]*/ int RegisterLobby(int dpnHandle, DirectPlay8LobbiedApplication LobbyApp, int lFlags);
  /*[id(0x6001001F)]*/ int GetConnectionInfo(int idPlayer, int lFlags, out DPN_CONNECTION_INFO pdpConnectionInfo);
  /*[id(0x60010020)]*/ int GetPeerAddress(int idPlayer, int lFlags, out DirectPlay8Address pAddress);
  /*[id(0x60010021)]*/ int GetLocalHostAddress(int lFlags, out DirectPlay8Address pAddress);
  /*[id(0x60010022)]*/ int SetSPCaps(wchar* guidSP, DPN_SP_CAPS* spCaps, int lFlags);
  /*[id(0x60010023)]*/ int GetSPCaps(wchar* guidSP, int lFlags, out DPN_SP_CAPS spCaps);
  /*[id(0x60010024)]*/ int TerminateSession(int lFlags, void* UserData, int UserDataSize);
  /*[id(0x60010025)]*/ int UnRegisterMessageHandler();
}

// DirectPlayAddress Interface
interface DirectPlay8Address : IUnknown {
  mixin(uuid("eca8bd2a-7154-4b23-904b-61ff852a906b"));
  // static DWINGUID IID = { 0xeca8bd2a, 0x7154, 0x4b23, 0x90, 0x4b, 0x61, 0xff, 0x85, 0x2a, 0x90, 0x6b };
  /*[id(0x60010000)]*/ int InternalSetObject(IUnknown lpdd);
  /*[id(0x60010001)]*/ int InternalGetObject(out IUnknown lpdd);
  /*[id(0x60010002)]*/ int BuildFromURL(wchar* SourceURL);
  /*[id(0x60010003)]*/ int Duplicate(out DirectPlay8Address NewAddress);
  /*[id(0x60010004)]*/ int Clear();
  /*[id(0x60010005)]*/ int GetURL(out wchar* URL);
  /*[id(0x60010006)]*/ int GetSP(out wchar* guidSP);
  /*[id(0x60010007)]*/ int GetUserData(void * UserData, out int lBufferSize);
  /*[id(0x60010008)]*/ int SetSP(wchar* guidSP);
  /*[id(0x60010009)]*/ int SetUserData(void* UserData, int lDataSize);
  /*[id(0x6001000A)]*/ int GetNumComponents(out int lNumComponents);
  /*[id(0x6001000B)]*/ int GetDevice(out wchar* guidDevice);
  /*[id(0x6001000C)]*/ int SetDevice(wchar* guidDevice);
  /*[id(0x6001000D)]*/ int SetEqual(DirectPlay8Address Address);
  /*[id(0x6001000E)]*/ int AddComponentLong(wchar* sComponent, int lValue);
  /*[id(0x6001000F)]*/ int AddComponentString(wchar* sComponent, wchar* sValue);
  /*[id(0x60010010)]*/ int GetComponentLong(wchar* sComponent, out int lValue);
  /*[id(0x60010011)]*/ int GetComponentString(wchar* sComponent, out wchar* sValue);
}

// DirectPlay Event Interface
interface DirectPlay8Event : IUnknown {
  mixin(uuid("f9dccd1d-e6b9-45ed-b3e2-c32414c71fa4"));
  // static DWINGUID IID = { 0xf9dccd1d, 0xe6b9, 0x45ed, 0xb3, 0xe2, 0xc3, 0x24, 0x14, 0xc7, 0x1f, 0xa4 };
  /*[id(0x60010000)]*/ int AddRemovePlayerGroup(int lMsgID, int lPlayerID, int lGroupID, ref short fRejectMsg);
  /*[id(0x60010001)]*/ int AppDesc(ref short fRejectMsg);
  /*[id(0x60010002)]*/ int AsyncOpComplete(ref DPNMSG_ASYNC_OP_COMPLETE dpnotify, ref short fRejectMsg);
  /*[id(0x60010003)]*/ int CreateGroup(int lGroupID, int lOwnerID, ref short fRejectMsg);
  /*[id(0x60010004)]*/ int CreatePlayer(int lPlayerID, ref short fRejectMsg);
  /*[id(0x60010005)]*/ int ConnectComplete(ref DPNMSG_CONNECT_COMPLETE dpnotify, ref short fRejectMsg);
  /*[id(0x60010006)]*/ int DestroyGroup(int lGroupID, int lReason, ref short fRejectMsg);
  /*[id(0x60010007)]*/ int DestroyPlayer(int lPlayerID, int lReason, ref short fRejectMsg);
  /*[id(0x60010008)]*/ int EnumHostsQuery(ref DPNMSG_ENUM_HOSTS_QUERY dpnotify, ref short fRejectMsg);
  /*[id(0x60010009)]*/ int EnumHostsResponse(ref DPNMSG_ENUM_HOSTS_RESPONSE dpnotify, ref short fRejectMsg);
  /*[id(0x6001000A)]*/ int HostMigrate(int lNewHostID, ref short fRejectMsg);
  /*[id(0x6001000B)]*/ int IndicateConnect(ref DPNMSG_INDICATE_CONNECT dpnotify, ref short fRejectMsg);
  /*[id(0x6001000C)]*/ int IndicatedConnectAborted(ref short fRejectMsg);
  /*[id(0x6001000D)]*/ int InfoNotify(int lMsgID, int lNotifyID, ref short fRejectMsg);
  /*[id(0x6001000E)]*/ int Receive(ref DPNMSG_RECEIVE dpnotify, ref short fRejectMsg);
  /*[id(0x6001000F)]*/ int SendComplete(ref DPNMSG_SEND_COMPLETE dpnotify, ref short fRejectMsg);
  /*[id(0x60010010)]*/ int TerminateSession(ref DPNMSG_TERMINATE_SESSION dpnotify, ref short fRejectMsg);
}

// DirectPlayLobbiedApplication Interface
interface DirectPlay8LobbiedApplication : IUnknown {
  mixin(uuid("ef390476-6ea0-4ad3-9ea3-768dcb68038d"));
  // static DWINGUID IID = { 0xef390476, 0x6ea0, 0x4ad3, 0x9e, 0xa3, 0x76, 0x8d, 0xcb, 0x68, 0x03, 0x8d };
  /*[id(0x60010000)]*/ int InternalSetObject(IUnknown lpdd);
  /*[id(0x60010001)]*/ int InternalGetObject(out IUnknown lpdd);
  /*[id(0x60010002)]*/ int RegisterMessageHandler(DirectPlay8LobbyEvent lobbyEvent, out int lDPNHandle);
  /*[id(0x60010003)]*/ int RegisterProgram(DPL_PROGRAM_DESC* ProgramDesc, int lFlags);
  /*[id(0x60010004)]*/ int UnRegisterProgram(wchar* guidApplication, int lFlags);
  /*[id(0x60010005)]*/ int Send(int Target, SAFEARRAY* Buffer, int lBufferSize, int lFlags);
  /*[id(0x60010006)]*/ int SetAppAvailable(short fAvailable, CONST_DPLAVAILABLE lFlags);
  /*[id(0x60010007)]*/ int UpdateStatus(int LobbyClient, CONST_DPLSESSION lStatus);
  /*[id(0x60010008)]*/ int Close();
  /*[id(0x60010009)]*/ int UnRegisterMessageHandler();
  /*[id(0x6001000A)]*/ int GetConnectionSettings(int LobbyClient, int lFlags, out DPL_CONNECTION_SETTINGS ConnectionSettings);
  /*[id(0x6001000B)]*/ int SetConnectionSettings(int hTarget, int lFlags, ref DPL_CONNECTION_SETTINGS ConnectionSettings, DirectPlay8Address HostAddress, DirectPlay8Address Device);
}

// DirectPlayLobby Event Interface
interface DirectPlay8LobbyEvent : IUnknown {
  mixin(uuid("f794a01f-2a0d-46a8-9cef-d5678a413bef"));
  // static DWINGUID IID = { 0xf794a01f, 0x2a0d, 0x46a8, 0x9c, 0xef, 0xd5, 0x67, 0x8a, 0x41, 0x3b, 0xef };
  /*[id(0x60010000)]*/ int Receive(ref DPL_MESSAGE_RECEIVE dlNotify, ref short fRejectMsg);
  /*[id(0x60010001)]*/ int Connect(ref DPL_MESSAGE_CONNECT dlNotify, ref short fRejectMsg);
  /*[id(0x60010002)]*/ int Disconnect(int DisconnectID, int lReason);
  /*[id(0x60010003)]*/ int SessionStatus(int status, int lHandle);
  /*[id(0x60010004)]*/ int ConnectionSettings(ref DPL_MESSAGE_CONNECTION_SETTINGS ConnectionSettings);
}

// DirectPlay Client Interface
interface DirectPlay8Client : IUnknown {
  mixin(uuid("3f6521e5-94bc-4a7a-a049-3d199eb59e72"));
  // static DWINGUID IID = { 0x3f6521e5, 0x94bc, 0x4a7a, 0xa0, 0x49, 0x3d, 0x19, 0x9e, 0xb5, 0x9e, 0x72 };
  /*[id(0x60010000)]*/ int InternalSetObject(IUnknown lpdd);
  /*[id(0x60010001)]*/ int InternalGetObject(out IUnknown lpdd);
  /*[id(0x60010002)]*/ int RegisterMessageHandler(DirectPlay8Event event);
  /*[id(0x60010003)]*/ int EnumHosts(DPN_APPLICATION_DESC* ApplicationDesc, DirectPlay8Address AddrHost, DirectPlay8Address DeviceInfo, int lRetryCount, int lRetryInterval, int lTimeOut, CONST_DPNOPERATIONS lFlags, void* UserData, int UserDataSize, out int lAsync);
  /*[id(0x60010004)]*/ int GetCountServiceProviders(int lFlags, out int ret);
  /*[id(0x60010005)]*/ int GetServiceProvider(int lIndex, out DPN_SERVICE_PROVIDER_INFO ret);
  /*[id(0x60010006)]*/ int CancelAsyncOperation(int lAsyncHandle, CONST_DPNCANCELFLAGS lFlags);
  /*[id(0x60010007)]*/ int Connect(DPN_APPLICATION_DESC* AppDesc, DirectPlay8Address Address, DirectPlay8Address DeviceInfo, CONST_DPNOPERATIONS lFlags, void* UserData, int UserDataSize, out int hAsyncHandle);
  /*[id(0x60010008)]*/ int Send(SAFEARRAY* BufferData, int lTimeOut, CONST_DPNSENDFLAGS lFlags, out int hAsyncHandle);
  /*[id(0x60010009)]*/ int GetSendQueueInfo(ref int lNumMsgs, ref int lNumBytes, CONST_DPNGETSENDQUEUEINFO lFlags);
  /*[id(0x6001000A)]*/ int GetApplicationDesc(int lFlags, out DPN_APPLICATION_DESC ret);
  /*[id(0x6001000B)]*/ int SetClientInfo(DPN_PLAYER_INFO* PlayerInfo, CONST_DPNOPERATIONS lFlags, out int hAsyncHandle);
  /*[id(0x6001000C)]*/ int GetServerInfo(int lFlags, out DPN_PLAYER_INFO layerInfo);
  /*[id(0x6001000D)]*/ int Close(int lFlags);
  /*[id(0x6001000E)]*/ int ReturnBuffer(int lBufferHandle);
  /*[id(0x6001000F)]*/ int GetCaps(int lFlags, out DPN_CAPS ret);
  /*[id(0x60010010)]*/ int SetCaps(ref DPN_CAPS Caps, int lFlags);
  /*[id(0x60010011)]*/ int RegisterLobby(int dpnHandle, DirectPlay8LobbiedApplication LobbyApp, int lFlags);
  /*[id(0x60010012)]*/ int GetConnectionInfo(int lFlags, out DPN_CONNECTION_INFO pdpConnectionInfo);
  /*[id(0x60010013)]*/ int GetServerAddress(int lFlags, out DirectPlay8Address pAddress);
  /*[id(0x60010014)]*/ int SetSPCaps(wchar* guidSP, DPN_SP_CAPS* spCaps, int lFlags);
  /*[id(0x60010015)]*/ int GetSPCaps(wchar* guidSP, int lFlags, out DPN_SP_CAPS spCaps);
  /*[id(0x60010016)]*/ int UnRegisterMessageHandler();
}

// DirectPlay Server Interface
interface DirectPlay8Server : IUnknown {
  mixin(uuid("7584bba4-1b39-4dcd-a334-d168cbb5a915"));
  // static DWINGUID IID = { 0x7584bba4, 0x1b39, 0x4dcd, 0xa3, 0x34, 0xd1, 0x68, 0xcb, 0xb5, 0xa9, 0x15 };
  /*[id(0x60010000)]*/ int InternalSetObject(IUnknown lpdd);
  /*[id(0x60010001)]*/ int InternalGetObject(out IUnknown lpdd);
  /*[id(0x60010002)]*/ int RegisterMessageHandler(DirectPlay8Event event);
  /*[id(0x60010003)]*/ int GetCountPlayersAndGroups(CONST_DPNENUMCLIENTGROUPFLAGS lFlags, out int ret);
  /*[id(0x60010004)]*/ int GetPlayerOrGroup(int lIndex, out int ret);
  /*[id(0x60010005)]*/ int GetCountGroupMembers(int dpid, int lFlags, out int ret);
  /*[id(0x60010006)]*/ int GetGroupMember(int lIndex, int dpid, out int ret);
  /*[id(0x60010007)]*/ int GetCountServiceProviders(int lFlags, out int ret);
  /*[id(0x60010008)]*/ int GetServiceProvider(int lIndex, out DPN_SERVICE_PROVIDER_INFO ret);
  /*[id(0x60010009)]*/ int CancelAsyncOperation(int lAsyncHandle, CONST_DPNCANCELFLAGS lFlags);
  /*[id(0x6001000A)]*/ int SendTo(int idSend, SAFEARRAY* BufferData, int lTimeOut, CONST_DPNSENDFLAGS lFlags, out int hAsyncHandle);
  /*[id(0x6001000B)]*/ int CreateGroup(DPN_GROUP_INFO* GroupInfo, CONST_DPNOPERATIONS lFlags, out int hAsyncHandle);
  /*[id(0x6001000C)]*/ int AddPlayerToGroup(int idGroup, int idClient, CONST_DPNOPERATIONS lFlags, out int hAsyncHandle);
  /*[id(0x6001000D)]*/ int GetSendQueueInfo(int idPlayer, ref int lNumMsgs, ref int lNumBytes, CONST_DPNGETSENDQUEUEINFO lFlags);
  /*[id(0x6001000E)]*/ int SetGroupInfo(int idGroup, DPN_GROUP_INFO* PlayerInfo, CONST_DPNOPERATIONS lFlags, out int hAsyncHandle);
  /*[id(0x6001000F)]*/ int GetGroupInfo(int idGroup, int lFlags, out DPN_GROUP_INFO layerInfo);
  /*[id(0x60010010)]*/ int SetServerInfo(DPN_PLAYER_INFO* PlayerInfo, CONST_DPNOPERATIONS lFlags, out int hAsyncHandle);
  /*[id(0x60010011)]*/ int GetClientInfo(int idPeer, int lFlags, out DPN_PLAYER_INFO layerInfo);
  /*[id(0x60010012)]*/ int GetApplicationDesc(int lFlags, out DPN_APPLICATION_DESC ret);
  /*[id(0x60010013)]*/ int SetApplicationDesc(ref DPN_APPLICATION_DESC AppDesc, int lFlags);
  /*[id(0x60010014)]*/ int Host(DPN_APPLICATION_DESC* AppDesc, DirectPlay8Address Address, int lFlags);
  /*[id(0x60010015)]*/ int Close(int lFlags);
  /*[id(0x60010016)]*/ int GetCaps(int lFlags, out DPN_CAPS ret);
  /*[id(0x60010017)]*/ int SetCaps(ref DPN_CAPS Caps, int lFlags);
  /*[id(0x60010018)]*/ int RemovePlayerFromGroup(int idGroup, int idClient, CONST_DPNOPERATIONS lFlags, out int hAsyncHandle);
  /*[id(0x60010019)]*/ int ReturnBuffer(int lBufferHandle);
  /*[id(0x6001001A)]*/ int DestroyClient(int idClient, int lFlags, void* UserData, int UserDataSize);
  /*[id(0x6001001B)]*/ int DestroyGroup(int idGroup, CONST_DPNOPERATIONS lFlags, out int hAsyncHandle);
  /*[id(0x6001001C)]*/ int RegisterLobby(int dpnHandle, DirectPlay8LobbiedApplication LobbyApp, int lFlags);
  /*[id(0x6001001D)]*/ int GetConnectionInfo(int idPlayer, int lFlags, out DPN_CONNECTION_INFO pdpConnectionInfo);
  /*[id(0x6001001E)]*/ int GetClientAddress(int idPlayer, int lFlags, out DirectPlay8Address pAddress);
  /*[id(0x6001001F)]*/ int GetLocalHostAddress(int lFlags, out DirectPlay8Address pAddress);
  /*[id(0x60010020)]*/ int SetSPCaps(wchar* guidSP, DPN_SP_CAPS* spCaps, int lFlags);
  /*[id(0x60010021)]*/ int GetSPCaps(wchar* guidSP, int lFlags, out DPN_SP_CAPS spCaps);
  /*[id(0x60010022)]*/ int UnRegisterMessageHandler();
}

// DirectPlayLobbyClient Interface
interface DirectPlay8LobbyClient : IUnknown {
  mixin(uuid("14716737-3005-4758-896f-b48d001929a5"));
  // static DWINGUID IID = { 0x14716737, 0x3005, 0x4758, 0x89, 0x6f, 0xb4, 0x8d, 0x00, 0x19, 0x29, 0xa5 };
  /*[id(0x60010000)]*/ int InternalSetObject(IUnknown lpdd);
  /*[id(0x60010001)]*/ int InternalGetObject(out IUnknown lpdd);
  /*[id(0x60010002)]*/ int RegisterMessageHandler(DirectPlay8LobbyEvent lobbyEvent);
  /*[id(0x60010003)]*/ int GetCountLocalPrograms(wchar* guidApplication, out int lCount);
  /*[id(0x60010004)]*/ int GetLocalProgram(int lProgID, out DPL_APPLICATION_INFO app);
  /*[id(0x60010005)]*/ int ConnectApplication(DPL_CONNECT_INFO* ConnectionInfo, int lTimeOut, CONST_DPLCONNECT lFlags, out int hApplication);
  /*[id(0x60010006)]*/ int Send(int Target, SAFEARRAY* Buffer, int lBufferSize, int lFlags);
  /*[id(0x60010007)]*/ int ReleaseApplication(int Application);
  /*[id(0x60010008)]*/ int Close();
  /*[id(0x60010009)]*/ int UnRegisterMessageHandler();
  /*[id(0x6001000A)]*/ int GetConnectionSettings(int hLobbyClient, int lFlags, out DPL_CONNECTION_SETTINGS ConnectionSettings);
  /*[id(0x6001000B)]*/ int SetConnectionSettings(int hTarget, int lFlags, ref DPL_CONNECTION_SETTINGS ConnectionSettings, DirectPlay8Address HostAddress, DirectPlay8Address Device);
}

// IDirectPlayVoiceClient Interface
interface DirectPlayVoiceClient8 : IUnknown {
  mixin(uuid("9f76ff0f-8e92-11d1-1515-00c04fc2c312"));
  // static DWINGUID IID = { 0x9f76ff0f, 0x8e92, 0x11d1, 0x15, 0x15, 0x00, 0xc0, 0x4f, 0xc2, 0xc3, 0x12 };
  /*[id(0x60010000)]*/ int InternalSetObject(IUnknown lpdd);
  /*[id(0x60010001)]*/ int InternalGetObject(out IUnknown lpdd);
  /*[id(0x60010002)]*/ int Initialize(IUnknown DplayObj, int lFlags);
  /*[id(0x60010003)]*/ int Connect(DVSOUNDDEVICECONFIG* SoundDeviceConfig, DVCLIENTCONFIG* ClientConfig, int lFlags);
  /*[id(0x60010004)]*/ int Disconnect(int lFlags);
  /*[id(0x60010005)]*/ int GetSessionDesc(out DVSESSIONDESC SessionDesc);
  /*[id(0x60010006)]*/ int GetClientConfig(out DVCLIENTCONFIG ClientConfig);
  /*[id(0x60010007)]*/ int SetClientConfig(DVCLIENTCONFIG* ClientConfig);
  /*[id(0x60010008)]*/ int GetCaps(out DVCAPS Caps);
  /*[id(0x60010009)]*/ int GetCompressionTypeCount(out int v1);
  /*[id(0x6001000A)]*/ int GetCompressionType(int lIndex, ref DVCOMPRESSIONINFO Data, int lFlags);
  /*[id(0x6001000B)]*/ int SetTransmitTargets(SAFEARRAY* playerIDs, int lFlags);
  /*[id(0x6001000C)]*/ int GetTransmitTargets(int lFlags, out SAFEARRAY ret);
  /*[id(0x6001000D)]*/ int SetCurrentSoundDevices(DirectSound8 DirectSoundObj, DirectSoundCapture8 DirectCaptureObj);
  /*[id(0x6001000E)]*/ int GetSoundDevices(ref DirectSound8 DirectSoundObj, ref DirectSoundCapture8 DirectCaptureObj);
  /*[id(0x6001000F)]*/ int Create3DSoundBuffer(int playerID, DirectSoundSecondaryBuffer8 Buffer, int lPriority, CONST_DSBPLAYFLAGS lFlags, out DirectSound3DBuffer8 UserBuffer);
  /*[id(0x60010010)]*/ int Delete3DSoundBuffer(int playerID, DirectSound3DBuffer8 UserBuffer);
  /*[id(0x60010011)]*/ int GetSoundDeviceConfig(out DVSOUNDDEVICECONFIG SoundDeviceConfig);
  /*[id(0x60010012)]*/ int StartClientNotification(DirectPlayVoiceEvent8 event);
  /*[id(0x60010013)]*/ int UnRegisterMessageHandler();
}

// DirectPlayVoice Event Interface
interface DirectPlayVoiceEvent8 : IUnknown {
  mixin(uuid("26ae5141-8010-46ea-861c-f9fc0f8b61d9"));
  // static DWINGUID IID = { 0x26ae5141, 0x8010, 0x46ea, 0x86, 0x1c, 0xf9, 0xfc, 0x0f, 0x8b, 0x61, 0xd9 };
  /*[id(0x60010000)]*/ int SessionLost(int ResultCode);
  /*[id(0x60010001)]*/ int ConnectResult(int ResultCode);
  /*[id(0x60010002)]*/ int DisconnectResult(int ResultCode);
  /*[id(0x60010003)]*/ int CreateVoicePlayer(int playerID, int flags);
  /*[id(0x60010004)]*/ int DeleteVoicePlayer(int playerID);
  /*[id(0x60010005)]*/ int HostMigrated(int NewHostID, ref DirectPlayVoiceServer8 NewServer);
  /*[id(0x60010006)]*/ int InputLevel(int PeakLevel, int RecordVolume);
  /*[id(0x60010007)]*/ int OutputLevel(int PeakLevel, int OutputVolume);
  /*[id(0x60010008)]*/ int PlayerOutputLevel(int SourcePlayerID, int PeakLevel);
  /*[id(0x60010009)]*/ int PlayerVoiceStart(int SourcePlayerID);
  /*[id(0x6001000A)]*/ int PlayerVoiceStop(int SourcePlayerID);
  /*[id(0x6001000B)]*/ int RecordStart(int PeakVolume);
  /*[id(0x6001000C)]*/ int RecordStop(int PeakVolume);
}

// IDirectPlayVoiceServer Interface
interface DirectPlayVoiceServer8 : IUnknown {
  mixin(uuid("9f76ff0f-8e92-11d1-1515-00c04fc2c313"));
  // static DWINGUID IID = { 0x9f76ff0f, 0x8e92, 0x11d1, 0x15, 0x15, 0x00, 0xc0, 0x4f, 0xc2, 0xc3, 0x13 };
  /*[id(0x60010000)]*/ int InternalSetObject(IUnknown lpdd);
  /*[id(0x60010001)]*/ int InternalGetObject(out IUnknown lpdd);
  /*[id(0x60010002)]*/ int Initialize(IUnknown DplayObj, int lFlags);
  /*[id(0x60010003)]*/ int StartSession(DVSESSIONDESC* SessionDesc, int lFlags);
  /*[id(0x60010004)]*/ int StopSession(int lFlags);
  /*[id(0x60010005)]*/ int GetSessionDesc(out DVSESSIONDESC SessionDesc);
  /*[id(0x60010006)]*/ int SetSessionDesc(DVSESSIONDESC* ClientConfig);
  /*[id(0x60010007)]*/ int GetCaps(out DVCAPS Caps);
  /*[id(0x60010008)]*/ int GetCompressionTypeCount(out int v1);
  /*[id(0x60010009)]*/ int GetCompressionType(int lIndex, ref DVCOMPRESSIONINFO Data, int lFlags);
  /*[id(0x6001000A)]*/ int SetTransmitTargets(int playerSourceID, SAFEARRAY* playerTargetIDs, int lFlags);
  /*[id(0x6001000B)]*/ int GetTransmitTargets(int playerSourceID, int lFlags, out SAFEARRAY ret);
  /*[id(0x6001000C)]*/ int StartServerNotification(DirectPlayVoiceEvent8 event);
  /*[id(0x6001000D)]*/ int UnRegisterMessageHandler();
}

// DirectPlayVoiceTest Interface
interface DirectPlayVoiceTest8 : IUnknown {
  mixin(uuid("9f76ff0f-8e92-11d1-1515-00c04fc2c314"));
  // static DWINGUID IID = { 0x9f76ff0f, 0x8e92, 0x11d1, 0x15, 0x15, 0x00, 0xc0, 0x4f, 0xc2, 0xc3, 0x14 };
  /*[id(0x60010000)]*/ int InternalSetObject(IUnknown lpdd);
  /*[id(0x60010001)]*/ int InternalGetObject(out IUnknown lpdd);
  /*[id(0x60010002)]*/ int CheckAudioSetup(wchar* guidPlaybackDevice, wchar* guidCaptureDevice, int hwndOwner, int lFlags, out int v1);
}

interface D3DXFont : IUnknown {
  mixin(uuid("2d501df7-d253-4414-865f-a6d54a753138"));
  // static DWINGUID IID = { 0x2d501df7, 0xd253, 0x4414, 0x86, 0x5f, 0xa6, 0xd5, 0x4a, 0x75, 0x31, 0x38 };
  /*[id(0x60010000)]*/ int GetDevice(out Direct3DDevice8 ppDevice);
  /*[id(0x60010001)]*/ int GetLogFont(ref LOGFONT LOGFONT);
  /*[id(0x60010002)]*/ int Begin();
  /*[id(0x60010003)]*/ int DrawTextA(ubyte* Text, int count, RECT* DestRect, int Format, int color);
  /*[id(0x60010004)]*/ int DrawTextW(wchar* Text, int count, RECT* DestRect, int Format, int color);
  /*[id(0x60010005)]*/ int End();
  /*[id(0x60010006)]*/ int OnLostDevice();
  /*[id(0x60010007)]*/ int OnResetDevice();
}

interface D3DXBuffer : IUnknown {
  mixin(uuid("932e6a7e-c68e-45dd-a7bf-53d19c86db1f"));
  // static DWINGUID IID = { 0x932e6a7e, 0xc68e, 0x45dd, 0xa7, 0xbf, 0x53, 0xd1, 0x9c, 0x86, 0xdb, 0x1f };
  /*[id(0x60010000)]*/ int GetBufferPointer();
  /*[id(0x60010001)]*/ int GetBufferSize();
}

interface ID3DX8 : IUnknown {
  mixin(uuid("3ac50043-cf82-4c44-862e-b206b4f03301"));
  // static DWINGUID IID = { 0x3ac50043, 0xcf82, 0x4c44, 0x86, 0x2e, 0xb2, 0x06, 0xb4, 0xf0, 0x33, 0x01 };
  /*[id(0x60010000)]*/ int CreateFont(Direct3DDevice8 Device, int hFont, out D3DXFont retFont);
  /*[id(0x60010001)]*/ int DrawText(D3DXFont d3dFont, int color, wchar* TextString, RECT* RECT, int Format);
  /*[id(0x60010002)]*/ int GetFVFVertexSize(int FVF, out int Size);
  /*[id(0x60010003)]*/ int AssembleShaderFromFile(wchar* SrcFile, int flags, ref wchar* ErrLog, ref D3DXBuffer Constants, out D3DXBuffer ppVertexShader);
  /*[id(0x60010004)]*/ int AssembleShader(wchar* SrcData, int flags, ref D3DXBuffer Constants, wchar* ErrLog, out D3DXBuffer ppVertexShader);
  /*[id(0x60010005)]*/ int GetErrorString(int hr, out wchar* retStr);
  /*[id(0x60010006)]*/ int LoadSurfaceFromFile(Direct3DSurface8 DestSurface, void* DestPalette, void* DestRect, wchar* SrcFile, void* SrcRect, int Filter, int ColorKey, void * SrcInfo);
  /*[id(0x60010007)]*/ int LoadSurfaceFromFileInMemory(Direct3DSurface8 DestSurface, void* DestPalette, void* DestRect, void* SrcData, int LengthInBytes, void* SrcRect, int Filter, int ColorKey, void * SrcInfo);
  /*[id(0x60010008)]*/ int LoadSurfaceFromSurface(Direct3DSurface8 DestSurface, void* DestPalette, void* DestRect, Direct3DSurface8 SrcSurface, void* SrcPalette, void* SrcRect, int Filter, int ColorKey);
  /*[id(0x60010009)]*/ int LoadSurfaceFromMemory(Direct3DSurface8 DestSurface, void* DestPalette, void* DestRect, void* SrcData, CONST_D3DFORMAT formatSrc, int SrcPitch, void* SrcPalette, RECT* SrcRect, int Filter, int ColorKey);
  /*[id(0x6001000A)]*/ int CheckTextureRequirements(ref Direct3DDevice8 Device, ref int Width, ref int Height, ref int NumMipLevels, int Usage, ref CONST_D3DFORMAT PixelFormat, CONST_D3DPOOL Pool);
  /*[id(0x6001000B)]*/ int CreateTexture(Direct3DDevice8 Device, int Width, int Height, int MipLevels, int Usage, CONST_D3DFORMAT PixelFormat, CONST_D3DPOOL Pool, out Direct3DTexture8 ppTexture);
  /*[id(0x6001000C)]*/ int CreateTextureFromResource(Direct3DDevice8 Device, int hModule, wchar* SrcResource, out Direct3DTexture8 ppTexture);
  /*[id(0x6001000D)]*/ int CreateTextureFromFile(Direct3DDevice8 Device, wchar* SrcFile, out Direct3DTexture8 ppTexture);
  /*[id(0x6001000E)]*/ int CreateTextureFromFileEx(Direct3DDevice8 Device, wchar* SrcFile, int Width, int Height, int MipLevels, int Usage, CONST_D3DFORMAT PixelFormat, CONST_D3DPOOL Pool, int Filter, int MipFilter, int ColorKey, void * SrcInfo, void* Palette, out Direct3DTexture8 ppTexture);
  /*[id(0x6001000F)]*/ int CreateTextureFromFileInMemory(Direct3DDevice8 Device, void* SrcData, int LengthInBytes, out Direct3DTexture8 ppTexture);
  /*[id(0x60010010)]*/ int CreateTextureFromFileInMemoryEx(Direct3DDevice8 Device, void* SrcData, int LengthInBytes, int Width, int Height, int MipLevels, int Usage, CONST_D3DFORMAT PixelFormat, CONST_D3DPOOL Pool, int Filter, int MipFilter, int ColorKey, void * SrcInfo, void* Palette, out Direct3DTexture8 ppTexture);
  /*[id(0x60010011)]*/ int FilterTexture(Direct3DTexture8 texture, void* Palette, int SrcLevel, int Filter);
  /*[id(0x60010012)]*/ int CheckCubeTextureRequirements(Direct3DDevice8 Device, ref int Size, ref int NumMipLevels, int Usage, ref CONST_D3DFORMAT PixelFormat, CONST_D3DPOOL Pool);
  /*[id(0x60010013)]*/ int CreateCubeTexture(Direct3DDevice8 pDevice, int Size, int MipLevels, int Usage, CONST_D3DFORMAT PixelFormat, CONST_D3DPOOL Pool, out Direct3DCubeTexture8 ppCubeTexture);
  /*[id(0x60010014)]*/ int CreateCubeTextureFromFile(Direct3DDevice8 Device, wchar* SrcFile, out Direct3DCubeTexture8 ppCubeTexture);
  /*[id(0x60010015)]*/ int CreateCubeTextureFromFileEx(Direct3DDevice8 Device, wchar* SrcFile, int TextureSize, int MipLevels, int Usage, CONST_D3DFORMAT PixelFormat, CONST_D3DPOOL Pool, int Filter, int MipFilter, int ColorKey, void * SrcInfo, void* Palette, out Direct3DCubeTexture8 ppTexture);
  /*[id(0x60010016)]*/ int CreateCubeTextureFromFileInMemory(Direct3DDevice8 Device, void* SrcData, int LengthInBytes, out Direct3DCubeTexture8 ppTexture);
  /*[id(0x60010017)]*/ int CreateCubeTextureFromFileInMemoryEx(Direct3DDevice8 Device, void* SrcData, int LengthInBytes, int TextureSize, int MipLevels, int Usage, CONST_D3DFORMAT PixelFormat, CONST_D3DPOOL Pool, int Filter, int MipFilter, int ColorKey, void * SrcInfo, void* Palette, out Direct3DCubeTexture8 ppTexture);
  /*[id(0x60010018)]*/ int FilterCubeTexture(Direct3DCubeTexture8 CubeTexture, void* Palette, int SrcLevel, int Filter);
  /*[id(0x60010019)]*/ int CheckVolumeTextureRequirements(Direct3DDevice8 Device, out int Width, out int Height, out int Depth, out int NumMipLevels, int Usage, ref CONST_D3DFORMAT PixelFormat, CONST_D3DPOOL Pool);
  /*[id(0x6001001A)]*/ int CreateTextureFromResourceEx(Direct3DDevice8 Device, int hSrcModule, wchar* SrcResource, int Width, int Height, int MipLevels, int Usage, CONST_D3DFORMAT PixelFormat, CONST_D3DPOOL Pool, int Filter, int MipFilter, int ColorKey, void * SrcInfo, void* Palette, out Direct3DTexture8 retTexture);
  /*[id(0x6001001B)]*/ int CreateVolumeTexture(Direct3DDevice8 Device, int Width, int Height, int Depth, int MipLevels, int Usage, CONST_D3DFORMAT PixelFormat, CONST_D3DPOOL Pool, out Direct3DVolume8 ppVolumeTexture);
  /*[id(0x6001001C)]*/ int FilterVolumeTexture(Direct3DVolume8 VolumeTexture, void* Palette, int SrcLevel, int Filter);
  /*[id(0x6001001D)]*/ int LoadSurfaceFromResource(Direct3DSurface8 DestSurface, void* DestPalette, void* DestRect, int hSrcModule, wchar* SrcResource, void* SrcRect, int Filter, int ColorKey, void * SrcInfo);
  /*[id(0x6001001E)]*/ int LoadVolumeFromVolume(Direct3DVolume8 DestVolume, void* DestPalette, void* DestBox, Direct3DVolume8 SrcVolume, void* SrcPalette, void* SrcBox, int Filter, int ColorKey);
  /*[id(0x6001001F)]*/ int LoadVolumeFromMemory(Direct3DVolume8 DestVolume, void* DestPalette, void* DestBox, void* SrcMemory, int SrcFormat, int SrcRowPitch, int SrcSlicePitch, void* SrcPalette, void* SrcBox, int Filter, int ColorKey);
  /*[id(0x60010020)]*/ int CreateMesh(int numFaces, int NumVertices, int options, void* Declaration, Direct3DDevice8 pD3D, out D3DXMesh ppMesh);
  /*[id(0x60010021)]*/ int CreateMeshFVF(int numFaces, int NumVertices, int options, int FVF, Direct3DDevice8 pD3D, out D3DXMesh ppMesh);
  /*[id(0x60010022)]*/ int CreateSPMesh(D3DXMesh pMesh, void* Adjacency, void* VertexAttributeWeights, void* VertexWeights, out D3DXSPMesh ppSMesh);
  /*[id(0x60010023)]*/ int GeneratePMesh(D3DXMesh Mesh, void* Adjacency, void* VertexAttributeWeights, void* VertexWeights, int minValue, int options, out D3DXPMesh ppPMesh);
  /*[id(0x60010024)]*/ int SimplifyMesh(D3DXMesh Mesh, void* Adjacency, void* VertexAttributeWeights, void* VertexWeights, int minValue, int options, out D3DXMesh ppMesh);
  /*[id(0x60010025)]*/ int ComputeBoundingSphere(void* PointsFVF, int NumVertices, int FVF, D3DVECTOR* Centers, ref float RadiusArray);
  /*[id(0x60010026)]*/ int ComputeBoundingBox(void* PointsFVF, int NumVertices, int FVF, ref D3DVECTOR MinVert, ref D3DVECTOR MaxVert);
  /*[id(0x60010027)]*/ int ComputeNormals(D3DXBaseMesh pMesh);
  /*[id(0x60010028)]*/ int DeclaratorFromFVF(int FVF, out D3DXDECLARATOR Declarator);
  /*[id(0x60010029)]*/ int FVFFromDeclarator(D3DXDECLARATOR* Declarator, out int FVF);
  /*[id(0x6001002A)]*/ int CreateBuffer(int numBytes, out D3DXBuffer ppBuffer);
  /*[id(0x6001002B)]*/ int LoadMeshFromX(wchar* filename, int options, Direct3DDevice8 D3DDevice, ref D3DXBuffer retAdjacency, ref D3DXBuffer retMaterials, ref int retMaterialCount, out D3DXMesh retMesh);
  /*[id(0x6001002C)]*/ int SaveMeshToX(wchar* filename, D3DXMesh Mesh, void* AdjacencyArray, D3DXMATERIAL* MaterialArray, int MaterialCount, int xFormat);
  /*[id(0x6001002D)]*/ int LoadMeshFromXof(IUnknown xofobjMesh, int options, Direct3DDevice8 D3DDevice, ref D3DXBuffer retBufAdjacency, ref D3DXBuffer retMaterials, ref int retMaterialCount, out D3DXMesh retMesh);
  /*[id(0x6001002E)]*/ int TessellateNPatches(D3DXMesh MeshIn, void* adjacencyIn, float NumSegs, short QuadraticInterpNormals, D3DXBuffer adjacencyOut, out D3DXMesh MeshOut);
  /*[id(0x6001002F)]*/ int BufferGetMaterial(D3DXBuffer MaterialBuffer, int index, out D3DMATERIAL8 mat);
  /*[id(0x60010030)]*/ int BufferGetTextureName(D3DXBuffer MaterialBuffer, int index, out wchar* retName);
  /*[id(0x60010031)]*/ int BufferGetData(D3DXBuffer Buffer, int index, int typesize, int typecount, void * Data);
  /*[id(0x60010032)]*/ int BufferSetData(D3DXBuffer Buffer, int index, int typesize, int typecount, void * Data);
  /*[id(0x60010033)]*/ int Intersect(D3DXMesh MeshIn, D3DVECTOR* RayPos, D3DVECTOR* RayDir, out int retHit, out int retFaceIndex, out float U, out float v, out float retDist, out int countHits, out D3DXBuffer AllHits);
  /*[id(0x60010034)]*/ int SphereBoundProbe(D3DVECTOR* Center, float Radius, D3DVECTOR* RayPosition, D3DVECTOR* Raydirection, out short retHit);
  /*[id(0x60010035)]*/ int ComputeBoundingSphereFromMesh(D3DXMesh MeshIn, ref D3DVECTOR Centers, ref float RadiusArray);
  /*[id(0x60010036)]*/ int ComputeBoundingBoxFromMesh(D3DXMesh MeshIn, ref D3DVECTOR MinArray, ref D3DVECTOR MaxArray);
  /*[id(0x60010037)]*/ int CreateSkinMesh(int numFaces, int NumVertices, int numBones, int options, void* Declaration, Direct3DDevice8 D3DDevice, out D3DXSkinMesh SkinMesh);
  /*[id(0x60010038)]*/ int CreateSkinMeshFVF(int numFaces, int NumVertices, int numBones, int options, int FVF, Direct3DDevice8 D3DDevice, out D3DXSkinMesh ppSkinMesh);
  /*[id(0x60010039)]*/ int CreateSkinMeshFromMesh(D3DXMesh Mesh, int numBones, out D3DXSkinMesh ppSkinMesh);
  /*[id(0x6001003A)]*/ int LoadSkinMeshFromXof(IUnknown xofobjMesh, int options, Direct3DDevice8 D3DDevice, ref D3DXBuffer adjacencyOut, ref D3DXBuffer MaterialsOut, ref int NumMatOut, ref D3DXBuffer BoneNamesOut, ref D3DXBuffer BoneTransformsOut, out D3DXSkinMesh ppMesh);
  /*[id(0x6001003B)]*/ int CreatePolygon(Direct3DDevice8 D3DDevice, float Length, int Sides, ref D3DXBuffer retAdjacency, out D3DXMesh retMesh);
  /*[id(0x6001003C)]*/ int CreateBox(Direct3DDevice8 D3DDevice, float Width, float Height, float Depth, ref D3DXBuffer retAdjacency, out D3DXMesh retMesh);
  /*[id(0x6001003D)]*/ int CreateCylinder(Direct3DDevice8 D3DDevice, float Radius1, float Radius2, float Length, int Slices, int Stacks, ref D3DXBuffer retAdjacency, out D3DXMesh retMesh);
  /*[id(0x6001003E)]*/ int CreateSphere(Direct3DDevice8 D3DDevice, float Radius, int Slices, int Stacks, ref D3DXBuffer retAdjacency, out D3DXMesh retMesh);
  /*[id(0x6001003F)]*/ int CreateTorus(Direct3DDevice8 D3DDevice, float InnerRadius, float OuterRadius, int Sides, int Rings, ref D3DXBuffer retAdjacency, out D3DXMesh retMesh);
  /*[id(0x60010040)]*/ int CreateTeapot(Direct3DDevice8 D3DDevice, ref D3DXBuffer retAdjacency, out D3DXMesh retMesh);
  /*[id(0x60010041)]*/ int CreateText(Direct3DDevice8 D3DDevice, int hDC, wchar* Text, float Deviation, float Extrusion, ref D3DXMesh retMesh, ref D3DXBuffer adjacencyOut, void * GlyphMetrics);
  /*[id(0x60010042)]*/ int BufferGetBoneName(D3DXBuffer BoneNameBuffer, int index, out wchar* retName);
  /*[id(0x60010043)]*/ int CreateSprite(Direct3DDevice8 D3DDevice, out D3DXSprite retSprite);
  /*[id(0x60010044)]*/ int CreateRenderToSurface(Direct3DDevice8 D3DDevice, int Width, int Height, CONST_D3DFORMAT Format, int DepthStencil, CONST_D3DFORMAT DepthStencilFormat, out D3DXRenderToSurface RetRenderToSurface);
  /*[id(0x60010045)]*/ int CleanMesh(D3DXMesh MeshIn, void* Adjacency, ref wchar* ErrLog, ref D3DXBuffer adjacencyOut, out D3DXMesh MeshOut);
  /*[id(0x60010046)]*/ int ValidMesh(D3DXMesh MeshIn, void* Adjacency, wchar* ErrLog, out short ret);
  /*[id(0x60010047)]*/ int BoxBoundProbe(D3DVECTOR* MinVert, D3DVECTOR* MaxVert, D3DVECTOR* RayPosition, D3DVECTOR* Raydirection, out short ret);
  /*[id(0x60010048)]*/ int SavePMeshToFile(wchar* filename, D3DXPMesh Mesh, D3DXMATERIAL* MaterialArray, int MaterialCount);
  /*[id(0x60010049)]*/ int LoadPMeshFromFile(wchar* filename, int options, Direct3DDevice8 D3DDevice, out D3DXBuffer retMaterials, out int RetNumMaterials, out D3DXPMesh RetPMesh);
  /*[id(0x6001004A)]*/ int BufferGetBoneCombo(D3DXBuffer BoneComboBuffer, int index, ref D3DXBONECOMBINATION boneCombo);
  /*[id(0x6001004B)]*/ int BufferGetBoneComboBoneIds(D3DXBuffer BoneComboBuffer, int index, int paletteSize, void* BoneIds);
  /*[id(0x6001004C)]*/ int SaveSurfaceToFile(wchar* DestFile, CONST_D3DXIMAGE_FILEFORMAT DestFormat, Direct3DSurface8 SrcSurface, PALETTEENTRY* SrcPalette, RECT* SrcRect);
  /*[id(0x6001004D)]*/ int SaveVolumeToFile(wchar* DestFile, CONST_D3DXIMAGE_FILEFORMAT DestFormat, Direct3DVolume8 SrcVolume, PALETTEENTRY* SrcPalette, void* SrcBox);
  /*[id(0x6001004E)]*/ int SaveTextureToFile(wchar* DestFile, CONST_D3DXIMAGE_FILEFORMAT DestFormat, Direct3DBaseTexture8 SrcTexture, PALETTEENTRY* SrcPalette);
}

interface D3DXMesh : IUnknown {
  mixin(uuid("ccae5c3b-4dd1-4d0f-997e-4684ca64557f"));
  // static DWINGUID IID = { 0xccae5c3b, 0x4dd1, 0x4d0f, 0x99, 0x7e, 0x46, 0x84, 0xca, 0x64, 0x55, 0x7f };
  /*[id(0x60010000)]*/ int DrawSubset(int AttribId);
  /*[id(0x60010001)]*/ int GetNumFaces();
  /*[id(0x60010002)]*/ int GetNumVertices();
  /*[id(0x60010003)]*/ int GetFVF();
  /*[id(0x60010004)]*/ int GetDeclaration(ref int Declaration);
  /*[id(0x60010005)]*/ int GetOptions();
  /*[id(0x60010006)]*/ int GetDevice(out Direct3DDevice8 ret);
  /*[id(0x60010007)]*/ int CloneMeshFVF(int options, int FVF, Direct3DDevice8 D3DDevice, out D3DXMesh ppCloneMesh);
  /*[id(0x60010008)]*/ int CloneMesh(int options, void* Declaration, Direct3DDevice8 D3DDevice, out D3DXMesh ppCloneMesh);
  /*[id(0x60010009)]*/ int GetVertexBuffer(out Direct3DVertexBuffer8 ppVB);
  /*[id(0x6001000A)]*/ int GetIndexBuffer(out Direct3DIndexBuffer8 ppIB);
  /*[id(0x6001000B)]*/ int LockVertexBuffer(int flags, out int VBuffAddr);
  /*[id(0x6001000C)]*/ int UnlockVertexBuffer();
  /*[id(0x6001000D)]*/ int LockIndexBuffer(int flags, out int IBuffAddr);
  /*[id(0x6001000E)]*/ int UnlockIndexBuffer();
  /*[id(0x6001000F)]*/ int GetAttributeTable(void * attribEntry, ref int attribTabSize);
  /*[id(0x60010010)]*/ int ConvertPointRepsToAdjacency(void* PointRep, void* Adjacency);
  /*[id(0x60010011)]*/ int ConvertAdjacencyToPointReps(void* Adjacency, void* PointRep);
  /*[id(0x60010012)]*/ int GenerateAdjacency(float epsilon, void * Adjacency);
  /*[id(0x60010013)]*/ int LockAttributeBuffer(int flags, out int pData);
  /*[id(0x60010014)]*/ int UnlockAttributeBuffer();
  /*[id(0x60010015)]*/ int Optimize(int flags, void * Adjacency, void * optAdj, void * FaceRemap, out D3DXBuffer VertexRemapOut, out D3DXMesh ppOptMesh);
  /*[id(0x60010016)]*/ int OptimizeInplace(int flags, void* adjacencyIn, void * adjacencyOut, void* FaceRemap, out D3DXBuffer VertexRemapOut);
}

interface D3DXSPMesh : IUnknown {
  mixin(uuid("bc3bbde2-1f7d-11d3-b929-00c04f68dc23"));
  // static DWINGUID IID = { 0xbc3bbde2, 0x1f7d, 0x11d3, 0xb9, 0x29, 0x00, 0xc0, 0x4f, 0x68, 0xdc, 0x23 };
  /*[id(0x60010000)]*/ int GetNumFaces();
  /*[id(0x60010001)]*/ int GetNumVertices();
  /*[id(0x60010002)]*/ int GetFVF();
  /*[id(0x60010003)]*/ int GetDeclaration(ref int Declaration);
  /*[id(0x60010004)]*/ int GetOptions();
  /*[id(0x60010005)]*/ int GetDevice(out Direct3DDevice8 ret);
  /*[id(0x60010006)]*/ int CloneMeshFVF(int options, int FVF, Direct3DDevice8 D3DDevice, void * adjacencyOut, void * VertexRemapOut, out D3DXPMesh ppCloneMesh);
  /*[id(0x60010007)]*/ int CloneMesh(int options, void* Declaration, Direct3DDevice8 D3DDevice, void * adjacencyOut, void * VertexRemapOut, out D3DXPMesh ppCloneMesh);
  /*[id(0x60010008)]*/ int ClonePMeshFVF(int options, int FVF, Direct3DDevice8 pD3D, void * VertexRemapOut, out D3DXPMesh ppCloneMesh);
  /*[id(0x60010009)]*/ int ClonePMesh(int options, void* Declaration, Direct3DDevice8 pD3D, void * VertexRemapOut, out D3DXPMesh ppCloneMesh);
  /*[id(0x6001000A)]*/ int ReduceFaces(int faces);
  /*[id(0x6001000B)]*/ int ReduceVertices(int vertices);
  /*[id(0x6001000C)]*/ int GetMaxFaces();
  /*[id(0x6001000D)]*/ int GetMaxVertices();
}

interface D3DXPMesh : IUnknown {
  mixin(uuid("15981aa8-1a05-48e3-bbe7-ff5d49654e3f"));
  // static DWINGUID IID = { 0x15981aa8, 0x1a05, 0x48e3, 0xbb, 0xe7, 0xff, 0x5d, 0x49, 0x65, 0x4e, 0x3f };
  /*[id(0x60010000)]*/ int DrawSubset(int AttribId);
  /*[id(0x60010001)]*/ int GetNumFaces();
  /*[id(0x60010002)]*/ int GetNumVertices();
  /*[id(0x60010003)]*/ int GetFVF();
  /*[id(0x60010004)]*/ int GetDeclaration(ref int Declaration);
  /*[id(0x60010005)]*/ int GetOptions();
  /*[id(0x60010006)]*/ int GetDevice(out Direct3DDevice8 ret);
  /*[id(0x60010007)]*/ int CloneMeshFVF(int options, int FVF, Direct3DDevice8 D3DDevice, out D3DXMesh ppCloneMesh);
  /*[id(0x60010008)]*/ int CloneMesh(int options, void* Declaration, Direct3DDevice8 D3DDevice, out D3DXMesh ppCloneMesh);
  /*[id(0x60010009)]*/ int GetVertexBuffer(out Direct3DVertexBuffer8 ppVB);
  /*[id(0x6001000A)]*/ int GetIndexBuffer(out Direct3DIndexBuffer8 ppIB);
  /*[id(0x6001000B)]*/ int LockVertexBuffer(int flags, out int VBuffAddr);
  /*[id(0x6001000C)]*/ int UnlockVertexBuffer();
  /*[id(0x6001000D)]*/ int LockIndexBuffer(int flags, out int IBuffAddr);
  /*[id(0x6001000E)]*/ int UnlockIndexBuffer();
  /*[id(0x6001000F)]*/ int GetAttributeTable(void * attribEntry, ref int attribTabSize);
  /*[id(0x60010010)]*/ int ConvertPointRepsToAdjacency(void* PointRep, void* Adjacency);
  /*[id(0x60010011)]*/ int ConvertAdjacencyToPointReps(void* Adjacency, void* PointRep);
  /*[id(0x60010012)]*/ int GenerateAdjacency(float epsilon, void * Adjacency);
  /*[id(0x60010013)]*/ int ClonePMeshFVF(int options, int FVF, Direct3DDevice8 D3DDevice, out D3DXPMesh ppCloneMesh);
  /*[id(0x60010014)]*/ int ClonePMesh(int options, void* Declaration, Direct3DDevice8 D3DDevice, out D3DXPMesh ppCloneMesh);
  /*[id(0x60010015)]*/ int SetNumFaces(int faces);
  /*[id(0x60010016)]*/ int SetNumVertices(int vertices);
  /*[id(0x60010017)]*/ int GetMaxFaces();
  /*[id(0x60010018)]*/ int GetMinFaces();
  /*[id(0x60010019)]*/ int GetMaxVertices();
  /*[id(0x6001001A)]*/ int GetMinVertices();
  /*[id(0x6001001B)]*/ int Save(int pIStream, int MaterialBufferHandle, int NumMaterials);
  /*[id(0x6001001C)]*/ int Optimize(int flags, void * adjacencyOut, void * FaceRemap, ref D3DXBuffer VertexRemapOut, out D3DXMesh ppOptMesh);
  /*[id(0x6001001D)]*/ int OptimizeBaseLOD(int flags, void * FaceRemap);
  /*[id(0x6001001E)]*/ int TrimByFaces(int NewFacesMin, int NewFacesMax, ref int rgiFaceRemap, ref int rgiVertRemap);
  /*[id(0x6001001F)]*/ int TrimByVertices(int NewVerticesMin, int NewVerticesMax, ref int rgiFaceRemap, ref int rgiVertRemap);
  /*[id(0x60010020)]*/ int GetAdjacency(void *adjacencyOut);
}

interface D3DXBaseMesh : IUnknown {
  mixin(uuid("2a835771-bf4d-43f4-8e14-82a809f17d8a"));
  // static DWINGUID IID = { 0x2a835771, 0xbf4d, 0x43f4, 0x8e, 0x14, 0x82, 0xa8, 0x09, 0xf1, 0x7d, 0x8a };
  /*[id(0x60010000)]*/ int DrawSubset(int AttribId);
  /*[id(0x60010001)]*/ int GetNumFaces();
  /*[id(0x60010002)]*/ int GetNumVertices();
  /*[id(0x60010003)]*/ int GetFVF();
  /*[id(0x60010004)]*/ int GetDeclaration(ref int Declaration);
  /*[id(0x60010005)]*/ int GetOptions();
  /*[id(0x60010006)]*/ int GetDevice(out Direct3DDevice8 ret);
  /*[id(0x60010007)]*/ int CloneMeshFVF(int options, int FVF, Direct3DDevice8 D3DDevice, out D3DXMesh ppCloneMesh);
  /*[id(0x60010008)]*/ int CloneMesh(int options, void* Declaration, Direct3DDevice8 D3DDevice, out D3DXMesh ppCloneMesh);
  /*[id(0x60010009)]*/ int GetVertexBuffer(out Direct3DVertexBuffer8 ppVB);
  /*[id(0x6001000A)]*/ int GetIndexBuffer(out Direct3DIndexBuffer8 ppIB);
  /*[id(0x6001000B)]*/ int LockVertexBuffer(int flags, out int VBuffAddr);
  /*[id(0x6001000C)]*/ int UnlockVertexBuffer();
  /*[id(0x6001000D)]*/ int LockIndexBuffer(int flags, out int IBuffAddr);
  /*[id(0x6001000E)]*/ int UnlockIndexBuffer();
  /*[id(0x6001000F)]*/ int GetAttributeTable(void * attribEntry, ref int attribTabSize);
  /*[id(0x60010010)]*/ int ConvertPointRepsToAdjacency(void* PointRep, void* Adjacency);
  /*[id(0x60010011)]*/ int ConvertAdjacencyToPointReps(void* Adjacency, void* PointRep);
  /*[id(0x60010012)]*/ int GenerateAdjacency(float epsilon, void * Adjacency);
}

interface D3DXSkinMesh : IUnknown {
  mixin(uuid("82a53844-f322-409e-a2e9-992e1104069d"));
  // static DWINGUID IID = { 0x82a53844, 0xf322, 0x409e, 0xa2, 0xe9, 0x99, 0x2e, 0x11, 0x04, 0x06, 0x9d };
  /*[id(0x60010000)]*/ int GetNumFaces();
  /*[id(0x60010001)]*/ int GetNumVertices();
  /*[id(0x60010002)]*/ int GetFVF();
  /*[id(0x60010003)]*/ int GetDeclaration(ref int Declaration);
  /*[id(0x60010004)]*/ int GetOptions();
  /*[id(0x60010005)]*/ int GetDevice(out Direct3DDevice8 ret);
  /*[id(0x60010006)]*/ int GetVertexBuffer(out Direct3DVertexBuffer8 ppVB);
  /*[id(0x60010007)]*/ int GetIndexBuffer(out Direct3DIndexBuffer8 ppIB);
  /*[id(0x60010008)]*/ int LockVertexBuffer(int flags, out int VBuffAddr);
  /*[id(0x60010009)]*/ int UnlockVertexBuffer();
  /*[id(0x6001000A)]*/ int LockIndexBuffer(int flags, out int IBuffAddr);
  /*[id(0x6001000B)]*/ int UnlockIndexBuffer();
  /*[id(0x6001000C)]*/ int LockAttributeBuffer(int flags, out int pData);
  /*[id(0x6001000D)]*/ int UnlockAttributeBuffer();
  /*[id(0x6001000E)]*/ int GetNumBones();
  /*[id(0x6001000F)]*/ int GetOriginalMesh(out D3DXMesh pMesh);
  /*[id(0x60010010)]*/ int SetBoneInfluence(int bone, int numInfluences, int* vertices, float* weights);
  /*[id(0x60010011)]*/ int GetNumBoneInfluences(int bone);
  /*[id(0x60010012)]*/ int GetBoneInfluence(int bone, ref int vertices, ref float weights);
  /*[id(0x60010013)]*/ int GetMaxVertexInfluences(out int maxVertexInfluences);
  /*[id(0x60010014)]*/ int GetMaxFaceInfluences(out int maxFaceInfluences);
  /*[id(0x60010015)]*/ int ConvertToBlendedMesh(int options, void* adjacencyIn, void * adjacencyOut, ref int RetNumBoneCombinations, ref D3DXBuffer RetBoneCombinationTable, void * pFaceRemap, ref D3DXBuffer VertexRemap, out D3DXMesh retMesh);
  /*[id(0x60010016)]*/ int ConvertToIndexedBlendedMesh(int options, void* adjacencyIn, int paletteSize, void * adjacencyOut, ref int RetNumBoneCombinations, ref D3DXBuffer RetBoneCombinationTable, void * pFaceRemap, ref D3DXBuffer VertexRemap, out D3DXMesh retMesh);
  /*[id(0x60010017)]*/ int GenerateSkinnedMesh(int options, float minWeight, void* adjacencyIn, void * adjacencyOut, void * pFaceRemap, ref D3DXBuffer VertexRemap, out D3DXMesh retMesh);
  /*[id(0x60010018)]*/ int UpdateSkinnedMesh(void* BoneTransformsIn, D3DMATRIX* BoneInvTransforms, ref D3DXMesh retMesh);
}

interface D3DXSprite : IUnknown {
  mixin(uuid("e8691849-87b8-4929-9050-1b0542d5538c"));
  // static DWINGUID IID = { 0xe8691849, 0x87b8, 0x4929, 0x90, 0x50, 0x1b, 0x05, 0x42, 0xd5, 0x53, 0x8c };
  /*[id(0x60010000)]*/ int GetDevice(out Direct3DDevice8 ppDevice);
  /*[id(0x60010001)]*/ int Begin();
  /*[id(0x60010002)]*/ int Draw(Direct3DTexture8 SrcTexture, void* SrcRect, D3DVECTOR2* Scaling, D3DVECTOR2* RotationCenter, float Rotation, D3DVECTOR2* Translation, int color);
  /*[id(0x60010003)]*/ int DrawTransform(Direct3DTexture8 SrcTexture, void* SrcRect, D3DMATRIX* TransformMatrix, int color);
  /*[id(0x60010004)]*/ int End();
  /*[id(0x60010005)]*/ int OnLostDevice();
  /*[id(0x60010006)]*/ int OnResetDevice();
}

interface D3DXRenderToSurface : IUnknown {
  mixin(uuid("69cc587c-e40c-458d-b5d3-b029e18eb60a"));
  // static DWINGUID IID = { 0x69cc587c, 0xe40c, 0x458d, 0xb5, 0xd3, 0xb0, 0x29, 0xe1, 0x8e, 0xb6, 0x0a };
  /*[id(0x60010000)]*/ int GetDevice(out Direct3DDevice8 ppDevice);
  /*[id(0x60010001)]*/ int GetDesc(out D3DXRTS_DESC Parameters);
  /*[id(0x60010002)]*/ int BeginScene(Direct3DSurface8 Surface, D3DVIEWPORT8* viewport);
  /*[id(0x60010003)]*/ int EndScene();
  /*[id(0x60010004)]*/ int OnLostDevice();
  /*[id(0x60010005)]*/ int OnResetDevice();
}

// I_dxj_DirectXFile Interface
interface DirectXFile : IUnknown {
  mixin(uuid("e7ff12e3-96a5-11d3-ac85-00c04fc2c602"));
  // static DWINGUID IID = { 0xe7ff12e3, 0x96a5, 0x11d3, 0xac, 0x85, 0x00, 0xc0, 0x4f, 0xc2, 0xc6, 0x02 };
  /*[id(0x60010000)]*/ int CreateEnumObject(wchar* filename, out DirectXFileEnum ret);
  /*[id(0x60010001)]*/ int CreateSaveObject(wchar* filename, int flags, out DirectXFileSave ret);
  /*[id(0x60010002)]*/ int RegisterTemplates(void* templatedata, int Size);
  /*[id(0x60010003)]*/ int RegisterDefaultTemplates();
}

// I_dxj_DirectXFileEnum  Interface
interface DirectXFileEnum : IUnknown {
  mixin(uuid("e7ff12e4-96a5-11d3-ac85-00c04fc2c602"));
  // static DWINGUID IID = { 0xe7ff12e4, 0x96a5, 0x11d3, 0xac, 0x85, 0x00, 0xc0, 0x4f, 0xc2, 0xc6, 0x02 };
  /*[id(0x60010000)]*/ int GetNextDataObject(out DirectXFileData ret);
  /*[id(0x60010001)]*/ int GetDataObjectById(wchar* id, DirectXFileData* ret);
  /*[id(0x60010002)]*/ int GetDataObjectByName(wchar* id, DirectXFileData* ret);
}

// I_dxj_DirectXFileData Interface
interface DirectXFileData : IUnknown {
  mixin(uuid("e7ff12e7-96a5-11d3-ac85-00c04fc2c602"));
  // static DWINGUID IID = { 0xe7ff12e7, 0x96a5, 0x11d3, 0xac, 0x85, 0x00, 0xc0, 0x4f, 0xc2, 0xc6, 0x02 };
  /*[id(0x60010000)]*/ int InternalGetObject(out IUnknown ret);
  /*[id(0x60010001)]*/ int InternalSetObject(IUnknown realinterface);
  /*[id(0x60010002)]*/ int GetName(out wchar* name);
  /*[id(0x60010003)]*/ int GetId(out wchar* name);
  /*[id(0x60010004)]*/ int GetDataSize(wchar* name, out int Size);
  /*[id(0x60010005)]*/ int GetData(wchar* name, void* Data);
  /*[id(0x60010006)]*/ int GetType(out wchar* Type);
  /*[id(0x60010007)]*/ int GetNextObject(out DirectXFileObject Type);
  /*[id(0x60010008)]*/ int AddDataObject(DirectXFileData Data);
  /*[id(0x60010009)]*/ int AddDataReference(wchar* name, wchar* guid);
  /*[id(0x6001000A)]*/ int AddBinaryObject(wchar* name, wchar* guidObject, wchar* MimeType, void* Data, int Size);
  /*[id(0x6001000B)]*/ int GetDataFromOffset(wchar* name, int Offset, int bytecount, void* Data);
}

// I_dxj_DirectXFileObject Interface
interface DirectXFileObject : IUnknown {
  mixin(uuid("e7ff12e6-96a5-11d3-ac85-00c04fc2c602"));
  // static DWINGUID IID = { 0xe7ff12e6, 0x96a5, 0x11d3, 0xac, 0x85, 0x00, 0xc0, 0x4f, 0xc2, 0xc6, 0x02 };
  /*[id(0x60010000)]*/ int GetName(out wchar* name);
  /*[id(0x60010001)]*/ int GetId(out wchar* name);
}

// I_dxj_DirectXFileSave Interface
interface DirectXFileSave : IUnknown {
  mixin(uuid("e7ff12e5-96a5-11d3-ac85-00c04fc2c602"));
  // static DWINGUID IID = { 0xe7ff12e5, 0x96a5, 0x11d3, 0xac, 0x85, 0x00, 0xc0, 0x4f, 0xc2, 0xc6, 0x02 };
  /*[id(0x60010000)]*/ int SaveTemplates(int count, SAFEARRAY* templateGuids);
  /*[id(0x60010001)]*/ int CreateDataObject(wchar* templateGuid, wchar* name, wchar* dataTypeGuid, int bytecount, void* Data, out DirectXFileData ret);
  /*[id(0x60010002)]*/ int SaveData(DirectXFileData dataObj);
}

// I_dxj_DirectXFileReference Interface
interface DirectXFileReference : IUnknown {
  mixin(uuid("e7ff12e8-96a5-11d3-ac85-00c04fc2c602"));
  // static DWINGUID IID = { 0xe7ff12e8, 0x96a5, 0x11d3, 0xac, 0x85, 0x00, 0xc0, 0x4f, 0xc2, 0xc6, 0x02 };
  /*[id(0x60010000)]*/ int GetName(out wchar* name);
  /*[id(0x60010001)]*/ int GetId(out wchar* name);
  /*[id(0x60010002)]*/ int Resolve(out DirectXFileData obj);
}

// I_dxj_DirectXFileBinary Interface
interface DirectXFileBinary : IUnknown {
  mixin(uuid("e7ff12e9-96a5-11d3-ac85-00c04fc2c602"));
  // static DWINGUID IID = { 0xe7ff12e9, 0x96a5, 0x11d3, 0xac, 0x85, 0x00, 0xc0, 0x4f, 0xc2, 0xc6, 0x02 };
  /*[id(0x60010000)]*/ int GetName(out wchar* name);
  /*[id(0x60010001)]*/ int GetId(out wchar* name);
  /*[id(0x60010002)]*/ int GetSize(out int Size);
  /*[id(0x60010003)]*/ int GetMimeType(out wchar* mime);
  /*[id(0x60010004)]*/ int Read(void* Data, int Size, out int Read);
}

// DirectX8 root object functions
interface IDirectX8 : IUnknown {
  mixin(uuid("e7ff1301-96a5-11d3-ac85-00c04fc2c602"));
  // static DWINGUID IID = { 0xe7ff1301, 0x96a5, 0x11d3, 0xac, 0x85, 0x00, 0xc0, 0x4f, 0xc2, 0xc6, 0x02 };
  /*[id(0x60010000)]*/ int DirectSoundCreate(wchar* guid, out DirectSound8 ret);
  /*[id(0x60010001)]*/ int DirectSoundCaptureCreate(wchar* guid, out DirectSoundCapture8 ret);
  /*[id(0x60010002)]*/ int GetDSEnum(out DirectSoundEnum8 retVal);
  /*[id(0x60010003)]*/ int GetDSCaptureEnum(out DirectSoundEnum8 retVal);
  /*[id(0x60010004)]*/ int DirectInputCreate(out DirectInput8 ret);
  /*[id(0x60010005)]*/ int DirectMusicLoaderCreate(out DirectMusicLoader8 ret);
  /*[id(0x60010006)]*/ int DirectMusicComposerCreate(out DirectMusicComposer8 ret);
  /*[id(0x60010007)]*/ int DirectMusicPerformanceCreate(out DirectMusicPerformance8 ret);
  /*[id(0x60010008)]*/ int CreateEvent(DirectXEvent8 event, out int h);
  /*[id(0x60010009)]*/ int SetEvent(int eventid);
  /*[id(0x6001000A)]*/ int DestroyEvent(int eventid);
  /*[id(0x6001000B)]*/ int CreateNewGuid(out wchar* retGuid);
  /*[id(0x6001000C)]*/ int DirectPlayVoiceClientCreate(out DirectPlayVoiceClient8 ret);
  /*[id(0x6001000D)]*/ int DirectPlayVoiceServerCreate(out DirectPlayVoiceServer8 ret);
  /*[id(0x6001000E)]*/ int DirectPlayVoiceTestCreate(out DirectPlayVoiceTest8 ret);
  /*[id(0x6001000F)]*/ int DirectXFileCreate(out DirectXFile ret);
  /*[id(0x60010010)]*/ int DirectPlayPeerCreate(out DirectPlay8Peer ret);
  /*[id(0x60010011)]*/ int DirectPlayServerCreate(out DirectPlay8Server ret);
  /*[id(0x60010012)]*/ int DirectPlayClientCreate(out DirectPlay8Client ret);
  /*[id(0x60010013)]*/ int DirectPlayAddressCreate(out DirectPlay8Address ret);
  /*[id(0x60010014)]*/ int Direct3DCreate(out Direct3D8 ret);
  /*[id(0x60010015)]*/ int DirectPlayLobbyClientCreate(out DirectPlay8LobbyClient ret);
  /*[id(0x60010016)]*/ int DirectPlayLobbiedApplicationCreate(out DirectPlay8LobbiedApplication ret);
}

// CoClasses

// D3DX8
abstract class D3DX8 {
  mixin(uuid("58356c5d-0bfd-48ed-93c5-f4520b6233de"));
  // static DWINGUID CLSID = { 0x58356c5d, 0x0bfd, 0x48ed, 0x93, 0xc5, 0xf4, 0x52, 0x0b, 0x62, 0x33, 0xde };
  mixin Interfaces!(ID3DX8);
}

// DirectX8
abstract class DirectX8 {
  mixin(uuid("e7ff1300-96a5-11d3-ac85-00c04fc2c602"));
  // static DWINGUID CLSID = { 0xe7ff1300, 0x96a5, 0x11d3, 0xac, 0x85, 0x00, 0xc0, 0x4f, 0xc2, 0xc6, 0x02 };
  mixin Interfaces!(IDirectX8);
}

// Global variables
const wchar* DSFX_STANDARD_GARGLE = "GUID_DSFX_STANDARD_GARGLE";
const wchar* DSFX_STANDARD_CHORUS = "GUID_DSFX_STANDARD_CHORUS";
const wchar* DSFX_STANDARD_FLANGER = "GUID_DSFX_STANDARD_FLANGER";
const wchar* DSFX_STANDARD_ECHO = "GUID_DSFX_STANDARD_ECHO";
const wchar* DSFX_STANDARD_DISTORTION = "GUID_DSFX_STANDARD_DISTORTION";
const wchar* DSFX_STANDARD_COMPRESSOR = "GUID_DSFX_STANDARD_COMPRESSOR";
const wchar* DSFX_STANDARD_I3DL2REVERB = "GUID_DSFX_STANDARD_I3DL2REVERB";
const wchar* DSFX_STANDARD_PARAMEQ = "GUID_DSFX_STANDARD_PARAMEQ";
const wchar* DSFX_STANDARD_WAVES_REVERB = "GUID_DSFX_WAVES_REVERB";
const wchar* IID_DirectSoundFXChorus = "IID_DirectSoundFXChorus";
const wchar* IID_DirectSoundFXCompressor = "IID_DirectSoundFXCompressor";
const wchar* IID_DirectSoundFXDistortion = "IID_DirectSoundFXDistortion";
const wchar* IID_DirectSoundFXEcho = "IID_DirectSoundFXEcho";
const wchar* IID_DirectSoundFXFlanger = "IID_DirectSoundFXFlanger";
const wchar* IID_DirectSoundFXGargle = "IID_DirectSoundFXGargle";
const wchar* IID_DirectSoundFXI3DL2REVERB = "IID_DirectSoundFXI3DL2REVERB";
const wchar* IID_DirectSoundFXParamEq = "IID_DirectSoundFXParamEq";
const wchar* IID_DirectSoundFXWavesReverb = "IID_DirectSoundFXWavesReverb";
const wchar* IID_DirectSoundSecondaryBuffer = "IID_IDirectSoundBuffer8";
const wchar* IID_DirectSoundPrimaryBuffer = "IID_IDirectSoundBuffer";
const wchar* IID_DirectSound3DBuffer = "IID_IDirectSound3DBuffer";
const wchar* IID_DirectSound3DListener = "IID_IDirectSound3DListener";
const wchar* GUID_ALL = "GUID_ALL_OBJECTS";
const wchar* GUID_DS3DALG_DEFAULT = "DS3DALG_DEFAULT";
const wchar* GUID_DS3DALG_NO_VIRTUALIZATION = "DS3DALG_NO_VIRTUALIZATION";
const wchar* GUID_DS3DALG_HRTF_FULL = "DS3DALG_HRTF_FULL";
const wchar* GUID_DS3DALG_HRTF_LIGHT = "DS3DALG_HRTF_LIGHT";
const wchar* DIPROP_AUTOCENTER = "diprop_autocenter";
const wchar* DIPROP_AXISMODE = "diprop_axismode";
const wchar* DIPROP_BUFFERSIZE = "diprop_buffersize";
const wchar* DIPROP_CALIBRATIONMODE = "diprop_calibrationmode";
const wchar* DIPROP_DEADZONE = "diprop_deadzone";
const wchar* DIPROP_RANGE = "diprop_range";
const wchar* DIPROP_SATURATION = "diprop_saturation";
const wchar* DIPROP_KEYNAME = "diprop_keyname";
const wchar* DIPROP_SCANCODE = "diprop_scancode";
const wchar* DIPROP_GRANULARITY = "diprop_granularity";
const wchar* DIPROP_FFGAIN = "diprop_ffgain";
const wchar* DIPROP_FFLOAD = "diprop_ffload";
const wchar* DIPROP_CALIBRATION = "diprop_calibration";
const wchar* DIPROP_GUIDANDPATH = "diprop_guidandpath";
const wchar* DIPROP_INSTANCENAME = "diprop_instancename";
const wchar* DIPROP_PRODUCTNAME = "diprop_productname";
const wchar* DIPROP_JOYSTICKID = "diprop_joystickid";
const wchar* DIPROP_GETPORTDISPLAYNAME = "diprop_getportdisplayname";
const wchar* DIPROP_PHYSICALRANGE = "diprop_physicalrange";
const wchar* DIPROP_LOGICALRANGE = "diprop_logicalrange";
const wchar* DIPROP_CPOINTS = "diprop_cpoints";
const wchar* DIPROP_APPDATA = "diprop_appdata";
const wchar* DIPROP_USERNAME = "diprop_username";
const wchar* DPN_KEY_APPLICATION_INSTANCE = "applicationinstance";
const wchar* DPN_KEY_BAUD = "baud";
const wchar* DPN_KEY_DEVICE = "device";
const wchar* DPN_KEY_FLOWCONTROL = "flowcontrol";
const wchar* DPN_KEY_HOSTNAME = "hostname";
const wchar* DPN_KEY_PARITY = "parity";
const wchar* DPN_KEY_PHONENUMBER = "phonenumber";
const wchar* DPN_KEY_PORT = "port";
const wchar* DPN_KEY_PROGRAM = "program";
const wchar* DPN_KEY_PROVIDER = "provider";
const wchar* DPN_KEY_STOPBITS = "stopbits";
const int DPN_BAUD_RATE_9600 = 0x00002580;
const int DPN_BAUD_RATE_14400 = 0x00003840;
const int DPN_BAUD_RATE_19200 = 0x00004B00;
const int DPN_BAUD_RATE_38400 = 0x00009600;
const int DPN_BAUD_RATE_56000 = 0x0000DAC0;
const int DPN_BAUD_RATE_57600 = 0x0000E100;
const int DPN_BAUD_RATE_115200 = 0x0001C200;
const wchar* DPN_STOP_BITS_ONE = "1";
const wchar* DPN_STOP_BITS_ONE_FIVE = "1.5";
const wchar* DPN_STOP_BITS_TWO = "2";
const wchar* DPN_PARITY_NONE = "NONE";
const wchar* DPN_PARITY_EVEN = "EVEN";
const wchar* DPN_PARITY_ODD = "ODD";
const wchar* DPN_PARITY_MARK = "MARK";
const wchar* DPN_PARITY_SPACE = "SPACE";
const wchar* DPN_FLOW_CONTROL_NONE = "NONE";
const wchar* DPN_FLOW_CONTROL_XONXOFF = "XONXOFF";
const wchar* DPN_FLOW_CONTROL_RTS = "RTS";
const wchar* DPN_FLOW_CONTROL_DTR = "DTR";
const wchar* DPN_FLOW_CONTROL_RTSDTR = "RTSDTR";
const wchar* DPN_SEPARATOR_KEYVALUE = "=";
const wchar* DPN_SEPARATOR_USERDATA = "#";
const wchar* DPN_SEPARATOR_COMPONENT = ";";
const wchar* DPN_ESCAPECHAR = "%";
const wchar* DPN_HEADER = "x-directplay:/";
const wchar* DPN_VALUE_TCPIPPROVIDER = "IP";
const wchar* DPN_VALUE_IPXPROVIDER = "IPX";
const wchar* DPN_VALUE_MODEMPROVIDER = "MODEM";
const wchar* DPN_VALUE_SERIALPROVIDER = "SERIAL";
const wchar* DP8SP_TCPIP = "CLSID_DP8SP_TCPIP";
const wchar* DP8SP_IPX = "CLSID_DP8SP_IPX";
const wchar* DP8SP_MODEM = "CLSID_DP8SP_MODEM";
const wchar* DP8SP_SERIAL = "CLSID_DP8SP_SERIAL";
const wchar* DSDEVID_DEFAULTPLAYBACK = "DSDEVID_DEFAULTPLAYBACK";
const wchar* DSDEVID_DEFAULTCAPTURE = "DSDEVID_DEFAULTCAPTURE";
const wchar* DSDEVID_DEFAULTVOICEPLAYBACK = "DSDEVID_DEFAULTVOICEPLAYBACK";
const wchar* DSDEVID_DEFAULTVOICECAPTURE = "DSDEVID_DEFAULTVOICECAPTURE";

// Global functions

extern (Windows):

/*[id(0x60000000)]*/ int D3DVertexBuffer8SetData(Direct3DVertexBuffer8 VBuffer, int Offset, int Size, int flags, void* Data);
/*[id(0x60000001)]*/ int D3DVertexBuffer8GetData(Direct3DVertexBuffer8 VBuffer, int Offset, int Size, int flags, void* Data);
/*[id(0x60000002)]*/ int D3DIndexBuffer8SetData(Direct3DIndexBuffer8 IBuffer, int Offset, int Size, int flags, void* Data);
/*[id(0x60000003)]*/ int D3DIndexBuffer8GetData(Direct3DIndexBuffer8 IBuffer, int Offset, int Size, int flags, void* Data);
/*[id(0x60000004)]*/ int D3DXMeshVertexBuffer8SetData(IUnknown d3dxmeshobj, int Offset, int Size, int flags, void* Data);
/*[id(0x60000005)]*/ int D3DXMeshVertexBuffer8GetData(IUnknown d3dxmeshobj, int Offset, int Size, int flags, void* Data);
/*[id(0x60000006)]*/ int D3DXMeshIndexBuffer8SetData(IUnknown d3dxmeshobj, int Offset, int Size, int flags, void* Data);
/*[id(0x60000007)]*/ int D3DXMeshIndexBuffer8GetData(IUnknown d3dxmeshobj, int Offset, int Size, int flags, void* Data);
/*[id(0x60000008)]*/ int DXCopyMemory(void* dest, void* src, int Size);
/*[id(0x60000000)]*/ int NewBuffer(ref SAFEARRAY Buffer, out int lOffset);
/*[id(0x60000001)]*/ int AddDataToBuffer(ref SAFEARRAY Buffer, void* lData, int lSize, ref int lOffset);
/*[id(0x60000002)]*/ int AddStringToBuffer(ref SAFEARRAY Buffer, wchar* StringData, ref int lOffset);
/*[id(0x60000003)]*/ int GetDataFromBuffer(SAFEARRAY* Buffer, void* lData, int lSize, ref int lOffset);
/*[id(0x60000004)]*/ int GetStringFromBuffer(SAFEARRAY* Buffer, ref int lOffset, out wchar* sData);
/*[id(0x60000000)]*/ float D3DXVec2Length(D3DVECTOR2* v);
/*[id(0x60000001)]*/ float D3DXVec2LengthSq(D3DVECTOR2* v);
/*[id(0x60000002)]*/ float D3DXVec2Dot(D3DVECTOR2* v1, D3DVECTOR2* V2);
/*[id(0x60000003)]*/ float D3DXVec2CCW(D3DVECTOR2* v1, D3DVECTOR2* V2);
/*[id(0x60000004)]*/ int D3DXVec2Add(ref D3DVECTOR2 VOut, D3DVECTOR2* v1, D3DVECTOR2* V2);
/*[id(0x60000005)]*/ int D3DXVec2Subtract(ref D3DVECTOR2 VOut, D3DVECTOR2* v1, D3DVECTOR2* V2);
/*[id(0x60000006)]*/ int D3DXVec2Minimize(ref D3DVECTOR2 VOut, D3DVECTOR2* v1, D3DVECTOR2* V2);
/*[id(0x60000007)]*/ int D3DXVec2Maximize(ref D3DVECTOR2 VOut, D3DVECTOR2* v1, D3DVECTOR2* V2);
/*[id(0x60000008)]*/ int D3DXVec2Scale(ref D3DVECTOR2 VOut, D3DVECTOR2* v1, float s);
/*[id(0x60000009)]*/ int D3DXVec2Lerp(ref D3DVECTOR2 VOut, D3DVECTOR2* v1, D3DVECTOR2* V2, float s);
/*[id(0x6000000A)]*/ int D3DXVec2Normalize(ref D3DVECTOR2 VOut, D3DVECTOR2* v);
/*[id(0x6000000B)]*/ int D3DXVec2Hermite(ref D3DVECTOR2 VOut, D3DVECTOR2* v1, D3DVECTOR2* T1, D3DVECTOR2* V2, D3DVECTOR2* T2, float s);
/*[id(0x6000000C)]*/ int D3DXVec2BaryCentric(ref D3DVECTOR2 VOut, D3DVECTOR2* v1, D3DVECTOR2* V2, D3DVECTOR2* V3, float f, float g);
/*[id(0x6000000D)]*/ int D3DXVec2Transform(ref D3DVECTOR4 VOut, D3DVECTOR2* v1, D3DMATRIX* M);
/*[id(0x6000000E)]*/ int D3DXVec2TransformCoord(ref D3DVECTOR2 VOut, D3DVECTOR2* v1, D3DMATRIX* M);
/*[id(0x6000000F)]*/ int D3DXVec2TransformNormal(ref D3DVECTOR2 VOut, D3DVECTOR2* v1, D3DMATRIX* M);
/*[id(0x60000010)]*/ int D3DXVec2CatmullRom(ref D3DVECTOR2 VOut, D3DVECTOR2* V0, D3DVECTOR2* v1, D3DVECTOR2* V2, D3DVECTOR2* V3, float s);
/*[id(0x60000000)]*/ float D3DXVec3Length(D3DVECTOR* v);
/*[id(0x60000001)]*/ float D3DXVec3LengthSq(D3DVECTOR* v);
/*[id(0x60000002)]*/ float D3DXVec3Dot(D3DVECTOR* v1, D3DVECTOR* V2);
/*[id(0x60000003)]*/ int D3DXVec3Cross(ref D3DVECTOR VOut, D3DVECTOR* v1, D3DVECTOR* V2);
/*[id(0x60000004)]*/ int D3DXVec3Add(ref D3DVECTOR VOut, D3DVECTOR* v1, D3DVECTOR* V2);
/*[id(0x60000005)]*/ int D3DXVec3Subtract(ref D3DVECTOR VOut, D3DVECTOR* v1, D3DVECTOR* V2);
/*[id(0x60000006)]*/ int D3DXVec3Minimize(ref D3DVECTOR VOut, D3DVECTOR* v1, D3DVECTOR* V2);
/*[id(0x60000007)]*/ int D3DXVec3Maximize(ref D3DVECTOR VOut, D3DVECTOR* v1, D3DVECTOR* V2);
/*[id(0x60000008)]*/ int D3DXVec3Scale(ref D3DVECTOR VOut, D3DVECTOR* v1, float s);
/*[id(0x60000009)]*/ int D3DXVec3Lerp(ref D3DVECTOR VOut, D3DVECTOR* v1, D3DVECTOR* V2, float s);
/*[id(0x6000000A)]*/ int D3DXVec3Normalize(ref D3DVECTOR VOut, D3DVECTOR* v);
/*[id(0x6000000B)]*/ int D3DXVec3Hermite(ref D3DVECTOR VOut, D3DVECTOR* v1, D3DVECTOR* T1, D3DVECTOR* V2, D3DVECTOR* T2, float s);
/*[id(0x6000000C)]*/ int D3DXVec3BaryCentric(ref D3DVECTOR VOut, D3DVECTOR* v1, D3DVECTOR* V2, D3DVECTOR* V3, float f, float g);
/*[id(0x6000000D)]*/ int D3DXVec3Transform(ref D3DVECTOR4 VOut, D3DVECTOR* v1, D3DMATRIX* M);
/*[id(0x6000000E)]*/ int D3DXVec3TransformCoord(ref D3DVECTOR VOut, D3DVECTOR* v1, D3DMATRIX* M);
/*[id(0x6000000F)]*/ int D3DXVec3TransformNormal(ref D3DVECTOR VOut, D3DVECTOR* v1, D3DMATRIX* M);
/*[id(0x60000010)]*/ int D3DXVec3CatmullRom(ref D3DVECTOR VOut, D3DVECTOR* V0, D3DVECTOR* v1, D3DVECTOR* V2, D3DVECTOR* V3, float s);
/*[id(0x60000011)]*/ int D3DXVec3Project(ref D3DVECTOR VOut, D3DVECTOR* v, D3DVIEWPORT8* viewport, D3DMATRIX* Projection, D3DMATRIX* view, D3DMATRIX* World);
/*[id(0x60000012)]*/ int D3DXVec3Unproject(ref D3DVECTOR VOut, D3DVECTOR* v, D3DVIEWPORT8* viewport, D3DMATRIX* Projection, D3DMATRIX* view, D3DMATRIX* World);
/*[id(0x60000000)]*/ float D3DXVec4Length(D3DVECTOR4* v);
/*[id(0x60000001)]*/ float D3DXVec4LengthSq(D3DVECTOR4* v);
/*[id(0x60000002)]*/ float D3DXVec4Dot(D3DVECTOR4* v1, D3DVECTOR4* V4);
/*[id(0x60000003)]*/ int D3DXVec4Add(ref D3DVECTOR4 VOut, D3DVECTOR4* v1, D3DVECTOR4* V2);
/*[id(0x60000004)]*/ int D3DXVec4Subtract(ref D3DVECTOR4 VOut, D3DVECTOR4* v1, D3DVECTOR4* V2);
/*[id(0x60000005)]*/ int D3DXVec4Minimize(ref D3DVECTOR4 VOut, D3DVECTOR4* v1, D3DVECTOR4* V2);
/*[id(0x60000006)]*/ int D3DXVec4Maximize(ref D3DVECTOR4 VOut, D3DVECTOR4* v1, D3DVECTOR4* V2);
/*[id(0x60000007)]*/ int D3DXVec4Scale(ref D3DVECTOR4 VOut, D3DVECTOR4* v1, float s);
/*[id(0x60000008)]*/ int D3DXVec4Lerp(ref D3DVECTOR4 VOut, D3DVECTOR4* v1, D3DVECTOR4* V2, float s);
/*[id(0x60000009)]*/ int D3DXVec4Cross(ref D3DVECTOR4 VOut, D3DVECTOR4* v1, D3DVECTOR4* V2, D3DVECTOR4* V3);
/*[id(0x6000000A)]*/ int D3DXVec4Normalize(ref D3DVECTOR4 VOut, D3DVECTOR4* v);
/*[id(0x6000000B)]*/ int D3DXVec4Hermite(ref D3DVECTOR4 VOut, D3DVECTOR* v1, D3DVECTOR4* T1, D3DVECTOR* V2, D3DVECTOR4* T2, float s);
/*[id(0x6000000C)]*/ int D3DXVec4BaryCentric(ref D3DVECTOR4 VOut, D3DVECTOR4* v1, D3DVECTOR4* V2, D3DVECTOR4* V3, float f, float g);
/*[id(0x6000000D)]*/ int D3DXVec4Transform(ref D3DVECTOR4 VOut, D3DVECTOR4* v1, D3DMATRIX* M);
/*[id(0x6000000E)]*/ int D3DXVec4CatmullRom(ref D3DVECTOR4 VOut, D3DVECTOR4* V0, D3DVECTOR4* v1, D3DVECTOR4* V2, D3DVECTOR4* V3, float s);
/*[id(0x60000000)]*/ int D3DXMatrixIdentity(ref D3DMATRIX MOut);
/*[id(0x60000001)]*/ int D3DXMatrixIsIdentity(D3DMATRIX* M);
/*[id(0x60000002)]*/ float D3DXMatrixfDeterminant(D3DMATRIX* M);
/*[id(0x60000003)]*/ int D3DXMatrixMultiply(ref D3DMATRIX MOut, D3DMATRIX* M1, D3DMATRIX* M2);
/*[id(0x60000004)]*/ int D3DXMatrixTranspose(ref D3DMATRIX MOut, D3DMATRIX* M);
/*[id(0x60000005)]*/ int D3DXMatrixInverse(ref D3DMATRIX MOut, ref float Determinant, D3DMATRIX* M);
/*[id(0x60000006)]*/ int D3DXMatrixScaling(ref D3DMATRIX MOut, float x, float y, float z);
/*[id(0x60000007)]*/ int D3DXMatrixTranslation(ref D3DMATRIX MOut, float x, float y, float z);
/*[id(0x60000008)]*/ int D3DXMatrixRotationX(ref D3DMATRIX MOut, float angle);
/*[id(0x60000009)]*/ int D3DXMatrixRotationY(ref D3DMATRIX MOut, float angle);
/*[id(0x6000000A)]*/ int D3DXMatrixRotationZ(ref D3DMATRIX MOut, float angle);
/*[id(0x6000000B)]*/ int D3DXMatrixRotationAxis(ref D3DMATRIX MOut, D3DVECTOR* VAxis, float angle);
/*[id(0x6000000C)]*/ int D3DXMatrixRotationQuaternion(ref D3DMATRIX MOut, D3DQUATERNION* Q);
/*[id(0x6000000D)]*/ int D3DXMatrixRotationYawPitchRoll(ref D3DMATRIX MOut, float yaw, float Pitch, float roll);
/*[id(0x6000000E)]*/ int D3DXMatrixTransformation(ref D3DMATRIX MOut, D3DVECTOR* VScaleCenter, D3DQUATERNION* QScaleRotation, D3DVECTOR* VScale, D3DVECTOR* VRotationCenter, D3DQUATERNION* QRotation, D3DVECTOR* VTranslation);
/*[id(0x6000000F)]*/ int D3DXMatrixAffineTransformation(ref D3DMATRIX MOut, float Scaling, D3DVECTOR* VRotationCenter, D3DQUATERNION* QRotation, D3DVECTOR* VTranslation);
/*[id(0x60000010)]*/ int D3DXMatrixLookAtRH(ref D3DMATRIX MOut, D3DVECTOR* VEye, D3DVECTOR* VAt, D3DVECTOR* VUp);
/*[id(0x60000011)]*/ int D3DXMatrixLookAtLH(ref D3DMATRIX MOut, D3DVECTOR* VEye, D3DVECTOR* VAt, D3DVECTOR* VUp);
/*[id(0x60000012)]*/ int D3DXMatrixPerspectiveRH(ref D3DMATRIX MOut, float w, float h, float zn, float zf);
/*[id(0x60000013)]*/ int D3DXMatrixPerspectiveLH(ref D3DMATRIX MOut, float w, float h, float zn, float zf);
/*[id(0x60000014)]*/ int D3DXMatrixPerspectiveFovRH(ref D3DMATRIX MOut, float fovy, float aspect, float zn, float zf);
/*[id(0x60000015)]*/ int D3DXMatrixPerspectiveFovLH(ref D3DMATRIX MOut, float fovy, float aspect, float zn, float zf);
/*[id(0x60000016)]*/ int D3DXMatrixPerspectiveOffCenterRH(ref D3DMATRIX MOut, float l, float r, float b, float t, float zn, float zf);
/*[id(0x60000017)]*/ int D3DXMatrixPerspectiveOffCenterLH(ref D3DMATRIX MOut, float l, float r, float b, float t, float zn, float zf);
/*[id(0x60000018)]*/ int D3DXMatrixOrthoRH(ref D3DMATRIX MOut, float w, float h, float zn, float zf);
/*[id(0x60000019)]*/ int D3DXMatrixOrthoLH(ref D3DMATRIX MOut, float w, float h, float zn, float zf);
/*[id(0x6000001A)]*/ int D3DXMatrixOrthoOffCenterRH(ref D3DMATRIX MOut, float l, float r, float b, float t, float zn, float zf);
/*[id(0x6000001B)]*/ int D3DXMatrixOrthoOffCenterLH(ref D3DMATRIX MOut, float l, float r, float b, float t, float zn, float zf);
/*[id(0x6000001C)]*/ int D3DXMatrixShadow(ref D3DMATRIX MOut, D3DVECTOR4* VLight, D3DPLANE* plane);
/*[id(0x6000001D)]*/ int D3DXMatrixReflect(ref D3DMATRIX MOut, D3DPLANE* plane);
/*[id(0x60000000)]*/ float D3DXQuaternionLength(D3DQUATERNION* Q);
/*[id(0x60000001)]*/ float D3DXQuaternionLengthSq(D3DQUATERNION* Q);
/*[id(0x60000002)]*/ int D3DXQuaternionIdentity(ref D3DQUATERNION QOut);
/*[id(0x60000003)]*/ int D3DXQuaternionIsIdentity(D3DQUATERNION* Q);
/*[id(0x60000004)]*/ int D3DXQuaternionConjugate(ref D3DQUATERNION QOut, D3DQUATERNION* Q);
/*[id(0x60000005)]*/ int D3DXQuaternionToAxisAngle(ref D3DQUATERNION Q, ref D3DVECTOR VAxis, ref float angle);
/*[id(0x60000006)]*/ int D3DXQuaternionRotationMatrix(ref D3DQUATERNION QOut, D3DMATRIX* M);
/*[id(0x60000007)]*/ int D3DXQuaternionRotationAxis(ref D3DQUATERNION QOut, D3DVECTOR* VAxis, float angle);
/*[id(0x60000008)]*/ int D3DXQuaternionRotationYawPitchRoll(ref D3DQUATERNION QOut, float yaw, float Pitch, float roll);
/*[id(0x60000009)]*/ int D3DXQuaternionMultiply(ref D3DQUATERNION QOut, D3DQUATERNION* Q1, D3DQUATERNION* Q2);
/*[id(0x6000000A)]*/ int D3DXQuaternionNormalize(ref D3DQUATERNION QOut, D3DQUATERNION* Q);
/*[id(0x6000000B)]*/ int D3DXQuaternionInverse(ref D3DQUATERNION QOut, D3DQUATERNION* Q);
/*[id(0x6000000C)]*/ int D3DXQuaternionLn(ref D3DQUATERNION QOut, D3DQUATERNION* Q);
/*[id(0x6000000D)]*/ int D3DXQuaternionExp(ref D3DQUATERNION QOut, D3DQUATERNION* Q);
/*[id(0x6000000E)]*/ int D3DXQuaternionSlerp(ref D3DQUATERNION QOut, D3DQUATERNION* Q1, D3DQUATERNION* Q2, float t);
/*[id(0x6000000F)]*/ int D3DXQuaternionSquad(ref D3DQUATERNION QOut, D3DQUATERNION* Q1, D3DQUATERNION* Q2, D3DQUATERNION* Q3, D3DQUATERNION* Q4, float t);
/*[id(0x60000010)]*/ int D3DXQuaternionBaryCentric(ref D3DQUATERNION QOut, D3DQUATERNION* Q1, D3DQUATERNION* Q2, D3DQUATERNION* Q3, float f, float g);
/*[id(0x60000011)]*/ float D3DXQuaternionDot(D3DQUATERNION* Q1, D3DQUATERNION* Q2);
/*[id(0x60000000)]*/ float D3DXPlaneDot(D3DPLANE* P1, D3DPLANE* P2);
/*[id(0x60000001)]*/ float D3DXPlaneDotCoord(D3DPLANE* P1, D3DVECTOR* v);
/*[id(0x60000002)]*/ float D3DXPlaneDotNormal(D3DPLANE* P1, D3DVECTOR* v);
/*[id(0x60000003)]*/ int D3DXPlaneNormalize(ref D3DPLANE POut, D3DPLANE* P);
/*[id(0x60000004)]*/ int D3DXPlaneIntersectLine(ref D3DPLANE POut, D3DPLANE* P, D3DVECTOR* v1, D3DVECTOR* V2);
/*[id(0x60000005)]*/ int D3DXPlaneFromPointNormal(ref D3DPLANE POut, D3DVECTOR* VPoint, D3DVECTOR* VNormal);
/*[id(0x60000006)]*/ int D3DXPlaneFromPoints(ref D3DPLANE POut, D3DVECTOR* v1, D3DVECTOR* V2, D3DVECTOR* V3);
/*[id(0x60000007)]*/ int D3DXPlaneTransform(ref D3DPLANE POut, D3DPLANE* P, D3DMATRIX* M);
/*[id(0x60000000)]*/ int D3DXColorNegative(ref D3DCOLORVALUE COut, D3DCOLORVALUE* c);
/*[id(0x60000001)]*/ int D3DXColorAdd(ref D3DCOLORVALUE COut, D3DCOLORVALUE* C1, D3DCOLORVALUE* C2);
/*[id(0x60000002)]*/ int D3DXColorSubtract(ref D3DCOLORVALUE COut, D3DCOLORVALUE* C1, D3DCOLORVALUE* C2);
/*[id(0x60000003)]*/ int D3DXColorScale(ref D3DCOLORVALUE COut, D3DCOLORVALUE* C1, float s);
/*[id(0x60000004)]*/ int D3DXColorModulate(ref D3DCOLORVALUE COut, D3DCOLORVALUE* C1, D3DCOLORVALUE* C2);
/*[id(0x60000005)]*/ int D3DXColorLerp(ref D3DCOLORVALUE COut, D3DCOLORVALUE* C1, D3DCOLORVALUE* C2, float s);
/*[id(0x60000006)]*/ int D3DXColorAdjustSaturation(ref D3DCOLORVALUE COut, D3DCOLORVALUE* C1, float s);
/*[id(0x60000007)]*/ int D3DXColorAdjustContrast(ref D3DCOLORVALUE COut, D3DCOLORVALUE* C1, float c);
/*[id(0x60000000)]*/ int D3DColorRGBA(short r, short g, short b, short a);
/*[id(0x60000001)]*/ int D3DColorARGB(short a, short r, short g, short b);
/*[id(0x60000002)]*/ int D3DColorXRGB(short r, short g, short b);
/*[id(0x60000003)]*/ int D3DColorMake(float r, float g, float b, float a);
