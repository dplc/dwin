// DirectX 7 for Visual Basic Type Library
// Version 1.0

/*[uuid("e1211242-8e94-11d1-8808-00c04fc2c602")]*/
module dwin.sys.win32.com.tlb.more.dx7vb;

private import dwin.sys.win32.com.tlb.stdole2;
private import dwin.sys.win32.com.Core;

// Enums

enum CONST_D3DVERTEXBLENDFLAGS {
  D3DVBLEND_DISABLE = 0x00000000,
  D3DVBLEND_1WEIGHT = 0x00000001,
  D3DVBLEND_2WEIGHTS = 0x00000002,
  D3DVBLEND_3WEIGHTS = 0x00000003,
}

enum CONST_D3DTEXTURETRANSFORMFLAGS {
  D3DTTFF_DISABLE = 0x00000000,
  D3DTTFF_COUNT1 = 0x00000001,
  D3DTTFF_COUNT2 = 0x00000002,
  D3DTTFF_COUNT3 = 0x00000003,
  D3DTTFF_COUNT4 = 0x00000004,
  D3DTTFF_PROJECTED = 0x00000100,
}

enum CONST_D3DVTXPCAPSFLAGS {
  D3DVTXPCAPS_TEXGEN = 0x00000001,
  D3DVTXPCAPS_MATERIALSOURCE7 = 0x00000002,
  D3DVTXPCAPS_VERTEXFOG = 0x00000004,
  D3DVTXPCAPS_DIRECTIONALLIGHTS = 0x00000008,
  D3DVTXPCAPS_POSITIONALLIGHTS = 0x00000010,
  D3DVTXPCAPS_NONLOCALVIEWER = 0x00000020,
}

enum CONST_D3DFDSFLAGS {
  D3DFDS_COLORMODE = 0x00000001,
  D3DFDS_GUID = 0x00000002,
  D3DFDS_HARDWARE = 0x00000004,
  D3DFDS_TRIANGLES = 0x00000008,
  D3DFDS_LINES = 0x00000010,
  D3DFDS_MISCCAPS = 0x00000020,
  D3DFDS_RASTERCAPS = 0x00000040,
  D3DFDS_ZCMPCAPS = 0x00000080,
  D3DFDS_ALPHACMPCAPS = 0x00000100,
  D3DFDS_SRCBLENDCAPS = 0x00000200,
  D3DFDS_DSTBLENDCAPS = 0x00000400,
  D3DFDS_SHADECAPS = 0x00000800,
  D3DFDS_TEXTURECAPS = 0x00001000,
  D3DFDS_TEXTUREFILTERCAPS = 0x00002000,
  D3DFDS_TEXTUREBLENDCAPS = 0x00004000,
  D3DFDS_TEXTUREADDRESSCAPS = 0x00008000,
}

enum CONST_D3DTEXOPCAPSFLAGS {
  D3DTEXOPCAPS_DISABLE = 0x00000001,
  D3DTEXOPCAPS_SELECTARG1 = 0x00000002,
  D3DTEXOPCAPS_SELECTARG2 = 0x00000004,
  D3DTEXOPCAPS_MODULATE = 0x00000008,
  D3DTEXOPCAPS_MODULATE2X = 0x00000010,
  D3DTEXOPCAPS_MODULATE4X = 0x00000020,
  D3DTEXOPCAPS_ADD = 0x00000040,
  D3DTEXOPCAPS_ADDSIGNED = 0x00000080,
  D3DTEXOPCAPS_ADDSIGNED2X = 0x00000100,
  D3DTEXOPCAPS_SUBTRACT = 0x00000200,
  D3DTEXOPCAPS_ADDSMOOTH = 0x00000400,
  D3DTEXOPCAPS_BLENDDIFFUSEALPHA = 0x00000800,
  D3DTEXOPCAPS_BLENDTEXTUREALPHA = 0x00001000,
  D3DTEXOPCAPS_BLENDFACTORALPHA = 0x00002000,
  D3DTEXOPCAPS_BLENDTEXTUREALPHAPM = 0x00004000,
  D3DTEXOPCAPS_BLENDCURRENTALPHA = 0x00008000,
  D3DTEXOPCAPS_PREMODULATE = 0x00010000,
  D3DTEXOPCAPS_MODULATEALPHA_ADDCOLOR = 0x00020000,
  D3DTEXOPCAPS_MODULATECOLOR_ADDALPHA = 0x00040000,
  D3DTEXOPCAPS_MODULATEINVALPHA_ADDCOLOR = 0x00080000,
  D3DTEXOPCAPS_MODULATEINVCOLOR_ADDALPHA = 0x00100000,
  D3DTEXOPCAPS_BUMPENVMAP = 0x00200000,
  D3DTEXOPCAPS_BUMPENVMAPLUMINANCE = 0x00400000,
  D3DTEXOPCAPS_DOTPRODUCT3 = 0x00800000,
}

enum CONST_D3DDPFLAGS {
  D3DDP_DEFAULT = 0x00000000,
  D3DDP_WAIT = 0x00000001,
}

enum CONST_D3DCLEARFLAGS {
  D3DCLEAR_TARGET = 0x00000001,
  D3DCLEAR_ZBUFFER = 0x00000002,
  D3DCLEAR_STENCIL = 0x00000004,
  D3DCLEAR_ALL = 0x00000007,
}

enum CONST_D3DLIGHTCAPSFLAGS {
  D3DLIGHTCAPS_POINT = 0x00000001,
  D3DLIGHTCAPS_SPOT = 0x00000002,
  D3DLIGHTCAPS_DIRECTIONAL = 0x00000004,
}

enum CONST_D3DVOPFLAGS {
  D3DVOP_LIGHT = 0x00000400,
  D3DVOP_TRANSFORM = 0x00000001,
  D3DVOP_CLIP = 0x00000004,
  D3DVOP_EXTENTS = 0x00000008,
}

enum CONST_D3DCOLORMODEL {
  D3DCOLOR_MONO = 0x00000001,
  D3DCOLOR_RGB = 0x00000002,
}

enum CONST_D3DLIGHTTYPE {
  D3DLIGHT_POINT = 0x00000001,
  D3DLIGHT_SPOT = 0x00000002,
  D3DLIGHT_DIRECTIONAL = 0x00000003,
}

enum CONST_D3DLIGHTINGMODELFLAGS {
  D3DLIGHTINGMODEL_RGB = 0x00000001,
  D3DLIGHTINGMODEL_MONO = 0x00000002,
}

enum CONST_D3DCAPSRASTER {
  D3DPRASTERCAPS_DITHER = 0x00000001,
  D3DPRASTERCAPS_ROP2 = 0x00000002,
  D3DPRASTERCAPS_XOR = 0x00000004,
  D3DPRASTERCAPS_PAT = 0x00000008,
  D3DPRASTERCAPS_ZTEST = 0x00000010,
  D3DPRASTERCAPS_SUBPIXEL = 0x00000020,
  D3DPRASTERCAPS_SUBPIXELX = 0x00000040,
  D3DPRASTERCAPS_FOGVERTEX = 0x00000080,
  D3DPRASTERCAPS_FOGTABLE = 0x00000100,
  D3DPRASTERCAPS_STIPPLE = 0x00000200,
  D3DPRASTERCAPS_ANTIALIASSORTDEPENDENT = 0x00000400,
  D3DPRASTERCAPS_ANTIALIASSORTINDEPENDENT = 0x00000800,
  D3DPRASTERCAPS_ANTIALIASEDGES = 0x00001000,
  D3DPRASTERCAPS_MIPMAPLODBIAS = 0x00002000,
  D3DPRASTERCAPS_ZBIAS = 0x00004000,
  D3DPRASTERCAPS_ZBUFFERLESSHSR = 0x00008000,
  D3DPRASTERCAPS_FOGRANGE = 0x00010000,
  D3DPRASTERCAPS_ANISOTROPY = 0x00020000,
  D3DPRASTERCAPS_WBUFFER = 0x00040000,
  D3DPRASTERCAPS_WFOG = 0x00100000,
  D3DPRASTERCAPS_ZFOG = 0x00200000,
}

enum CONST_D3DCAPSCMP {
  D3DPCMPCAPS_NEVER = 0x00000001,
  D3DPCMPCAPS_LESS = 0x00000002,
  D3DPCMPCAPS_EQUAL = 0x00000004,
  D3DPCMPCAPS_LESSEQUAL = 0x00000008,
  D3DPCMPCAPS_GREATER = 0x00000010,
  D3DPCMPCAPS_NOTEQUAL = 0x00000020,
  D3DPCMPCAPS_GREATEREQUAL = 0x00000040,
  D3DPCMPCAPS_ALWAYS = 0x00000080,
}

enum CONST_D3DCAPSBLEND {
  D3DPBLENDCAPS_ZERO = 0x00000001,
  D3DPBLENDCAPS_ONE = 0x00000002,
  D3DPBLENDCAPS_SRCCOLOR = 0x00000004,
  D3DPBLENDCAPS_INVSRCCOLOR = 0x00000008,
  D3DPBLENDCAPS_SRCALPHA = 0x00000010,
  D3DPBLENDCAPS_INVSRCALPHA = 0x00000020,
  D3DPBLENDCAPS_DESTALPHA = 0x00000040,
  D3DPBLENDCAPS_INVDESTALPHA = 0x00000080,
  D3DPBLENDCAPS_DESTCOLOR = 0x00000100,
  D3DPBLENDCAPS_INVDESTCOLOR = 0x00000200,
  D3DPBLENDCAPS_SRCALPHASAT = 0x00000400,
  D3DPBLENDCAPS_BOTHSRCALPHA = 0x00000800,
  D3DPBLENDCAPS_BOTHINVSRCALPHA = 0x00001000,
}

enum CONST_D3DCAPSSHADE {
  D3DPSHADECAPS_COLORFLATMONO = 0x00000001,
  D3DPSHADECAPS_COLORFLATRGB = 0x00000002,
  D3DPSHADECAPS_COLORGOURAUDMONO = 0x00000004,
  D3DPSHADECAPS_COLORGOURAUDRGB = 0x00000008,
  D3DPSHADECAPS_COLORPHONGMONO = 0x00000010,
  D3DPSHADECAPS_COLORPHONGRGB = 0x00000020,
  D3DPSHADECAPS_SPECULARFLATMONO = 0x00000040,
  D3DPSHADECAPS_SPECULARFLATRGB = 0x00000080,
  D3DPSHADECAPS_SPECULARGOURAUDMONO = 0x00000100,
  D3DPSHADECAPS_SPECULARGOURAUDRGB = 0x00000200,
  D3DPSHADECAPS_SPECULARPHONGMONO = 0x00000400,
  D3DPSHADECAPS_SPECULARPHONGRGB = 0x00000800,
  D3DPSHADECAPS_ALPHAFLATBLEND = 0x00001000,
  D3DPSHADECAPS_ALPHAFLATSTIPPLED = 0x00002000,
  D3DPSHADECAPS_ALPHAGOURAUDBLEND = 0x00004000,
  D3DPSHADECAPS_ALPHAGOURAUDSTIPPLED = 0x00008000,
  D3DPSHADECAPS_ALPHAPHONGBLEND = 0x00010000,
  D3DPSHADECAPS_ALPHAPHONGSTIPPLED = 0x00020000,
  D3DPSHADECAPS_FOGFLAT = 0x00040000,
  D3DPSHADECAPS_FOGGOURAUD = 0x00080000,
  D3DPSHADECAPS_FOGPHONG = 0x00100000,
}

enum CONST_D3DCAPSTEXTURE {
  D3DPTEXTURECAPS_PERSPECTIVE = 0x00000001,
  D3DPTEXTURECAPS_POW2 = 0x00000002,
  D3DPTEXTURECAPS_ALPHA = 0x00000004,
  D3DPTEXTURECAPS_TRANSPARENCY = 0x00000008,
  D3DPTEXTURECAPS_BORDER = 0x00000010,
  D3DPTEXTURECAPS_SQUAREONLY = 0x00000020,
  D3DPTEXTURECAPS_TEXREPEATNOTSCALEDBYSIZE = 0x00000040,
  D3DPTEXTURECAPS_ALPHAPALETTE = 0x00000080,
  D3DPTEXTURECAPS_NONPOW2CONDITIONAL = 0x00000100,
  D3DPTEXTURECAPS_TEXTURETRANSFORM = 0x00000200,
  D3DPTEXTURECAPS_PROJECTED = 0x00000400,
  D3DPTEXTURECAPS_CUBEMAP = 0x00000800,
  D3DPTEXTURECAPS_COLORKEYBLEND = 0x00001000,
}

enum CONST_D3DCAPSTEXTUREFILTER {
  D3DPTFILTERCAPS_NEAREST = 0x00000001,
  D3DPTFILTERCAPS_LINEAR = 0x00000002,
  D3DPTFILTERCAPS_MIPNEAREST = 0x00000004,
  D3DPTFILTERCAPS_MIPLINEAR = 0x00000008,
  D3DPTFILTERCAPS_LINEARMIPNEAREST = 0x00000010,
  D3DPTFILTERCAPS_LINEARMIPLINEAR = 0x00000020,
}

enum CONST_D3DCAPSTEXTUREADDRESS {
  D3DPTADDRESSCAPS_WRAP = 0x00000001,
  D3DPTADDRESSCAPS_MIRROR = 0x00000002,
  D3DPTADDRESSCAPS_CLAMP = 0x00000004,
  D3DPTADDRESSCAPS_BORDER = 0x00000008,
  D3DPTADDRESSCAPS_INDEPENDENTUV = 0x00000010,
}

enum CONST_D3DDEVICEDESCCAPS {
  D3DDEVCAPS_FLOATTLVERTEX = 0x00000001,
  D3DDEVCAPS_SORTINCREASINGZ = 0x00000002,
  D3DDEVCAPS_SORTDECREASINGZ = 0x00000004,
  D3DDEVCAPS_SORTEXACT = 0x00000008,
  D3DDEVCAPS_TLVERTEXSYSTEMMEMORY = 0x00000040,
  D3DDEVCAPS_TLVERTEXVIDEOMEMORY = 0x00000080,
  D3DDEVCAPS_TEXTURESYSTEMMEMORY = 0x00000100,
  D3DDEVCAPS_TEXTUREVIDEOMEMORY = 0x00000200,
  D3DDEVCAPS_DRAWPRIMTLVERTEX = 0x00000400,
  D3DDEVCAPS_CANRENDERAFTERFLIP = 0x00000800,
  D3DDEVCAPS_TEXTURENONLOCALVIDMEM = 0x00001000,
  D3DDEVCAPS_SEPARATETEXTUREMEMORIES = 0x00004000,
  D3DDEVCAPS_HWTRANSFORMANDLIGHT = 0x00008000,
  D3DDEVCAPS_CANBLTSYSTONONLOCAL = 0x00020000,
  D3DDEVCAPS_HWRASTERIZATION = 0x00080000,
}

enum CONST_D3DCLIPFLAGS {
  D3DCLIP_LEFT = 0x00000001,
  D3DCLIP_RIGHT = 0x00000002,
  D3DCLIP_TOP = 0x00000004,
  D3DCLIP_BOTTOM = 0x00000008,
  D3DCLIP_FRONT = 0x00000010,
  D3DCLIP_BACK = 0x00000020,
  D3DCLIP_GEN0 = 0x00000040,
  D3DCLIP_GEN1 = 0x00000080,
  D3DCLIP_GEN2 = 0x00000100,
  D3DCLIP_GEN3 = 0x00000200,
  D3DCLIP_GEN4 = 0x00000400,
  D3DCLIP_GEN5 = 0x00000800,
  D3DSTATUS_CLIPINTERSECTIONLEFT = 0x00001000,
  D3DSTATUS_CLIPINTERSECTIONRIGHT = 0x00002000,
  D3DSTATUS_CLIPINTERSECTIONTOP = 0x00004000,
  D3DSTATUS_CLIPINTERSECTIONBOTTOM = 0x00008000,
  D3DSTATUS_CLIPINTERSECTIONFRONT = 0x00010000,
  D3DSTATUS_CLIPINTERSECTIONBACK = 0x00020000,
  D3DSTATUS_CLIPINTERSECTIONGEN0 = 0x00040000,
  D3DSTATUS_CLIPINTERSECTIONGEN1 = 0x00080000,
  D3DSTATUS_CLIPINTERSECTIONGEN2 = 0x00100000,
  D3DSTATUS_CLIPINTERSECTIONGEN3 = 0x00200000,
  D3DSTATUS_CLIPINTERSECTIONGEN4 = 0x00400000,
  D3DSTATUS_CLIPINTERSECTIONGEN5 = 0x00800000,
  D3DSTATUS_CLIPUNIONLEFT = 0x00000001,
  D3DSTATUS_CLIPUNIONRIGHT = 0x00000002,
  D3DSTATUS_CLIPUNIONTOP = 0x00000004,
  D3DSTATUS_CLIPUNIONBOTTOM = 0x00000008,
  D3DSTATUS_CLIPUNIONFRONT = 0x00000010,
  D3DSTATUS_CLIPUNIONBACK = 0x00000020,
  D3DSTATUS_CLIPUNIONGEN0 = 0x00000040,
  D3DSTATUS_CLIPUNIONGEN1 = 0x00000080,
  D3DSTATUS_CLIPUNIONGEN2 = 0x00000100,
  D3DSTATUS_CLIPUNIONGEN3 = 0x00000200,
  D3DSTATUS_CLIPUNIONGEN4 = 0x00000400,
  D3DSTATUS_CLIPUNIONGEN5 = 0x00000800,
  D3DSTATUS_ZNOTVISIBLE = 0x01000000,
  D3DSTATUS_CLIPUNIONALL = 0x00FFF000,
  D3DSTATUS_CLIPINTERSECTIONALL = 0x00FFF000,
  D3DSTATUS_DEFAULT = 0x01FFF000,
}

enum CONST_D3DCLIPSTATUSFLAGS {
  D3DCLIPSTATUS_STATUS = 0x00000001,
  D3DCLIPSTATUS_EXTENTS2 = 0x00000002,
  D3DCLIPSTATUS_EXTENTS3 = 0x00000004,
}

enum CONST_D3DLIGHTFLAGS {
  D3DLIGHT_ACTIVE = 0x00000001,
  D3DLIGHT_NO_SPECULAR = 0x00000002,
  D3DLIGHT_ALL = 0x00000003,
}

enum CONST_DDPALFLAGS {
  PC_DEFAULT = 0x00000000,
  PC_RESERVED = 0x00000001,
  PC_EXPLICIT = 0x00000002,
  PC_NOCOLLAPSE = 0x00000004,
}

enum CONST_DDDEVICEIDFLAGS {
  DDGDI_DEFAULT = 0x00000000,
  DDGDI_GETHOSTIDENTIFIER = 0x00000001,
}

enum CONST_D3DVBCAPSFLAGS {
  D3DVBCAPS_SYSTEMMEMORY = 0x00000800,
  D3DVBCAPS_WRITEONLY = 0x00010000,
  D3DVBCAPS_OPTIMIZED = 0x80000000,
  D3DVBCAPS_DONOTCLIP = 0x00000001,
  D3DVBCAPS_DEFAULT = 0x00000000,
}

enum CONST_D3DFVFCAPSFLAGS {
  D3DFVFCAPS_TEXCOORDCOUNTMASK = 0x0000FFFF,
  D3DFVFCAPS_DONOTSTRIPELEMENTS = 0x00080000,
}

enum CONST_D3DFVFFLAGS {
  D3DFVF_XYZ = 0x00000002,
  D3DFVF_XYZRHW = 0x00000004,
  D3DFVF_XYZB1 = 0x00000006,
  D3DFVF_XYZB2 = 0x00000008,
  D3DFVF_XYZB3 = 0x0000000A,
  D3DFVF_XYZB4 = 0x0000000C,
  D3DFVF_XYZB5 = 0x0000000E,
  D3DFVF_NORMAL = 0x00000010,
  D3DFVF_DIFFUSE = 0x00000040,
  D3DFVF_SPECULAR = 0x00000080,
  D3DFVF_TEX0 = 0x00000000,
  D3DFVF_TEX1 = 0x00000100,
  D3DFVF_TEX2 = 0x00000200,
  D3DFVF_TEX3 = 0x00000300,
  D3DFVF_TEX4 = 0x00000400,
  D3DFVF_TEX5 = 0x00000500,
  D3DFVF_TEX6 = 0x00000600,
  D3DFVF_TEX7 = 0x00000700,
  D3DFVF_TEX8 = 0x00000800,
  D3DFVF_VERTEX = 0x00000112,
  D3DFVF_LVERTEX = 0x000001E2,
  D3DFVF_TLVERTEX = 0x000001C4,
}

enum CONST_D3DTAFLAGS {
  D3DTA_SELECTMASK = 0x0000000F,
  D3DTA_DIFFUSE = 0x00000000,
  D3DTA_CURRENT = 0x00000001,
  D3DTA_TEXTURE = 0x00000002,
  D3DTA_TFACTOR = 0x00000003,
  D3DTA_COMPLEMENT = 0x00000010,
  D3DTA_ALPHAREPLICATE = 0x00000020,
  D3DTA_SPECULAR = 0x00000004,
}

enum CONST_D3DCAPSMISC {
  D3DPMISCCAPS_MASKPLANES = 0x00000001,
  D3DPMISCCAPS_MASKZ = 0x00000002,
  D3DPMISCCAPS_CONFORMANT = 0x00000008,
  D3DPMISCCAPS_CULLNONE = 0x00000010,
  D3DPMISCCAPS_CULLCW = 0x00000020,
  D3DPMISCCAPS_CULLCCW = 0x00000040,
}

enum CONST_D3D {
  D3DRENDERSTATE_WRAPBIAS = 0x00000080,
  D3DDP_MAXTEXCOORD = 0x00000008,
  D3DWRAPCOORD_0 = 0x00000001,
  D3DWRAPCOORD_1 = 0x00000002,
  D3DWRAPCOORD_2 = 0x00000004,
  D3DWRAPCOORD_3 = 0x00000008,
}

enum CONST_D3DRMCREATEDEVICEFLAGS {
  D3DRMDEVICE_DEFAULT = 0x00000000,
  D3DRMDEVICE_NOZBUFFER = 0x00000001,
}

enum CONST_D3DRMADDFACESFLAGS {
  D3DRMADDFACES_DEFAULT = 0x00000000,
  D3DRMADDFACES_VERTICESONLY = 0x00000001,
}

enum CONST_D3DRMMESHBUILDERENABLEFLAGS {
  D3DRMMESHBUILDER_RENDERENABLE = 0x00000001,
  D3DRMMESHBUILDER_PICKENABLE = 0x00000002,
  D3DRMMESHBUILDER_PICKANDRENDERENABLE = 0x00000003,
}

enum CONST_D3DRMMESHBUILDERAGEFLAGS {
  D3DRMMESHBUILDERAGE_GEOMETRY = 0x00000001,
  D3DRMMESHBUILDERAGE_MATERIALS = 0x00000002,
  D3DRMMESHBUILDERAGE_TEXTURES = 0x00000004,
}

enum CONST_D3DRMPARENTINGFLAGS {
  D3DRMMESHBUILDER_DIRECTPARENT = 0x00000001,
  D3DRMMESHBUILDER_ROOTMESH = 0x00000002,
}

enum CONST_D3DRMADDMESHBUILDERFLAGS {
  D3DRMADDMESHBUILDER_DONTCOPYAPPDATA = 0x00000001,
  D3DRMADDMESHBUILDER_FLATTENSUBMESHES = 0x00000002,
  D3DRMADDMESHBUILDER_NOSUBMESHES = 0x00000004,
}

enum CONST_D3DRMGENERATENORMALSFLAGS {
  D3DRMGENERATENORMALS_PRECOMPACT = 0x00000001,
  D3DRMGENERATENORMALS_USECREASEANGLE = 0x00000002,
}

enum CONST_D3DRMTEXTURECACHEFLAGS {
  D3DRMTEXTURE_FORCERESIDENT = 0x00000001,
  D3DRMTEXTURE_STATIC = 0x00000002,
  D3DRMTEXTURE_DOWNSAMPLEPOINT = 0x00000004,
  D3DRMTEXTURE_DOWNSAMPLEBILINEAR = 0x00000008,
  D3DRMTEXTURE_DOWNSAMPLEREDUCEDEPTH = 0x00000010,
  D3DRMTEXTURE_DOWNSAMPLENONE = 0x00000020,
}

enum CONST_D3DRMLIGHTTYPE {
  D3DRMLIGHT_AMBIENT = 0x00000000,
  D3DRMLIGHT_POINT = 0x00000001,
  D3DRMLIGHT_SPOT = 0x00000002,
  D3DRMLIGHT_DIRECTIONAL = 0x00000003,
}

enum CONST_D3DRMVIEWPORTCLEARFLAGS {
  D3DRMCLEAR_TARGET = 0x00000001,
  D3DRMCLEAR_ZBUFFER = 0x00000002,
  D3DRMCLEAR_DIRTYRECTS = 0x00000004,
  D3DRMCLEAR_ALL = 0x00000007,
}

enum CONST_D3DRMRENDERQUALITY {
  D3DRMSHADE_FLAT = 0x00000000,
  D3DRMSHADE_GOURAUD = 0x00000001,
  D3DRMSHADE_PHONG = 0x00000002,
  D3DRMSHADE_MASK = 0x00000007,
  D3DRMSHADE_MAX = 0x00000008,
  D3DRMLIGHT_OFF = 0x00000000,
  D3DRMLIGHT_ON = 0x00000008,
  D3DRMLIGHT_MASK = 0x00000038,
  D3DRMLIGHT_MAX = 0x00000040,
  D3DRMFILL_POINTS = 0x00000000,
  D3DRMFILL_WIREFRAME = 0x00000040,
  D3DRMFILL_SOLID = 0x00000080,
  D3DRMFILL_MASK = 0x000001C0,
  D3DRMFILL_MAX = 0x00000200,
  D3DRMRENDER_WIREFRAME = 0x00000040,
  D3DRMRENDER_UNLITFLAT = 0x00000080,
  D3DRMRENDER_FLAT = 0x00000088,
  D3DRMRENDER_GOURAUD = 0x00000089,
  D3DRMRENDER_PHONG = 0x0000008A,
}

enum CONST_D3DRMTEXTURECHANGEDFLAGS {
  D3DRMTEXTURE_CHANGEDPIXELS = 0x00000040,
  D3DRMTEXTURE_CHANGEDPALETTE = 0x00000080,
  D3DRMTEXTURE_INVALIDATEONLY = 0x00000100,
}

enum CONST_D3DRMTEXTUREQUALITY {
  D3DRMTEXTURE_NEAREST = 0x00000000,
  D3DRMTEXTURE_LINEAR = 0x00000001,
  D3DRMTEXTURE_MIPNEAREST = 0x00000002,
  D3DRMTEXTURE_MIPLINEAR = 0x00000003,
  D3DRMTEXTURE_LINEARMIPNEAREST = 0x00000004,
  D3DRMTEXTURE_LINEARMIPLINEAR = 0x00000005,
}

enum CONST_D3DRMCOMBINETYPE {
  D3DRMCOMBINE_REPLACE = 0x00000000,
  D3DRMCOMBINE_BEFORE = 0x00000001,
  D3DRMCOMBINE_AFTER = 0x00000002,
}

enum CONST_D3DRMPALETTEFLAGS {
  D3DRMPALETTE_FREE = 0x00000000,
  D3DRMPALETTE_READONLY = 0x00000001,
  D3DRMPALETTE_RESERVED = 0x00000002,
}

enum CONST_D3DRMWRAPTYPE {
  D3DRMWRAP_FLAT = 0x00000000,
  D3DRMWRAP_CYLINDER = 0x00000001,
  D3DRMWRAP_SPHERE = 0x00000002,
  D3DRMWRAP_CHROME = 0x00000003,
}

enum CONST_D3DRMPROJECTIONTYPE {
  D3DRMPROJECT_PERSPECTIVE = 0x00000000,
  D3DRMPROJECT_ORTHOGRAPHIC = 0x00000001,
  D3DRMPROJECT_RIGHTHANDPERSPECTIVE = 0x00000002,
  D3DRMPROJECT_RIGHTHANDORTHOGRAPHIC = 0x00000003,
}

enum CONST_D3DRMXOFFORMAT {
  D3DRMXOF_BINARY = 0x00000000,
  D3DRMXOF_COMPRESSED = 0x00000001,
  D3DRMXOF_TEXT = 0x00000002,
}

enum CONST_D3DRMCOLORSOURCE {
  D3DRMCOLOR_FROMFACE = 0x00000000,
  D3DRMCOLOR_FROMVERTEX = 0x00000001,
}

enum CONST_D3DRMFRAMECONSTRAINT {
  D3DRMCONSTRAIN_Z = 0x00000000,
  D3DRMCONSTRAIN_Y = 0x00000001,
  D3DRMCONSTRAIN_X = 0x00000002,
}

enum CONST_D3DRMMATERIALMODE {
  D3DRMMATERIAL_FROMMESH = 0x00000000,
  D3DRMMATERIAL_FROMPARENT = 0x00000001,
  D3DRMMATERIAL_FROMFRAME = 0x00000002,
}

enum CONST_D3DRMFOGMODE {
  D3DRMFOG_LINEAR = 0x00000000,
  D3DRMFOG_EXPONENTIAL = 0x00000001,
  D3DRMFOG_EXPONENTIALSQUARED = 0x00000002,
}

enum CONST_D3DRMZBUFFERMODE {
  D3DRMZBUFFER_FROMPARENT = 0x00000000,
  D3DRMZBUFFER_ENABLE = 0x00000001,
  D3DRMZBUFFER_DISABLE = 0x00000002,
}

enum CONST_D3DRMSORTMODE {
  D3DRMSORT_FROMPARENT = 0x00000000,
  D3DRMSORT_NONE = 0x00000001,
  D3DRMSORT_FRONTTOBACK = 0x00000002,
  D3DRMSORT_BACKTOFRONT = 0x00000003,
}

enum CONST_D3DRMRAYPICKFLAGS {
  D3DRMRAYPICK_ONLYBOUNDINGBOXES = 0x00000001,
  D3DRMRAYPICK_IGNOREFURTHERPRIMITIVES = 0x00000002,
  D3DRMRAYPICK_INTERPOLATEUV = 0x00000004,
  D3DRMRAYPICK_INTERPOLATECOLOR = 0x00000008,
  D3DRMRAYPICK_INTERPOLATENORMAL = 0x00000010,
}

enum CONST_D3DRMADDTRIANGLESVT {
  D3DRMFVF_TYPE = 0x00000001,
  D3DRMFVF_NORMAL = 0x00000002,
  D3DRMFVF_COLOR = 0x00000004,
  D3DRMFVF_TEXTURECOORDS = 0x00000008,
}

enum CONST_D3DRMADDTRIANGLESFLAGS {
  D3DRMVERTEX_STRIP = 0x00000001,
  D3DRMVERTEX_FAN = 0x00000002,
  D3DRMVERTEX_LIST = 0x00000004,
}

enum CONST_D3DRMFOGMETHOD {
  D3DRMFOGMETHOD_VERTEX = 0x00000001,
  D3DRMFOGMETHOD_TABLE = 0x00000002,
  D3DRMFOGMETHOD_ANY = 0x00000004,
}

enum CONST_D3DRMTRAVERALFLAGS {
  D3DRMFRAME_RENDERENABLE = 0x00000001,
  D3DRMFRAME_PICKENABLE = 0x00000002,
  D3DRMFRAME_RENDERANDPICKENABLE = 0x00000003,
}

enum CONST_D3DRMINTERPOLATIONFLAGS {
  D3DRMINTERPOLATION_OPEN = 0x00000001,
  D3DRMINTERPOLATION_CLOSED = 0x00000002,
  D3DRMINTERPOLATION_NEAREST = 0x00000100,
  D3DRMINTERPOLATION_LINEAR = 0x00000004,
  D3DRMINTERPOLATION_SPLINE = 0x00000008,
  D3DRMINTERPOLATION_VERTEXCOLOR = 0x00000040,
  D3DRMINTERPOLATION_SLERPNORMALS = 0x00000080,
}

enum CONST_D3DRMHANDEDNESS {
  D3DRMOPTIONS_LEFTHANDED = 0x00000001,
  D3DRMOPTIONS_RIGHTHANDED = 0x00000002,
}

enum CONST_D3DRMWIREFRAMEFLAGS {
  D3DRMWIREFRAME_CULL = 0x00000001,
  D3DRMWIREFRAME_HIDDENLINE = 0x00000002,
  D3DRMWIREFRAME_CULLANDHIDELINES = 0x00000003,
}

enum CONST_D3DRMCALLBACKORDERFLAGS {
  D3DRMCALLBACK_PREORDER = 0x00000000,
  D3DRMCALLBACK_POSTORDER = 0x00000001,
}

enum CONST_D3DRMRENDERMODEFLAGS {
  D3DRMRENDERMODE_DEFAULT = 0x00000000,
  D3DRMRENDERMODE_BLENDEDTRANSPARENCY = 0x00000001,
  D3DRMRENDERMODE_SORTEDTRANSPARENCY = 0x00000002,
  D3DRMRENDERMODE_LIGHTINMODELSPACE = 0x00000008,
  D3DRMRENDERMODE_VIEWDEPENDENTSPECULAR = 0x00000010,
  D3DRMRENDERMODE_DISABLESORTEDALPHAZWRITE = 0x00000020,
}

enum CONST_D3DRMPMESHSTATUSFLAGS {
  D3DRMPMESHSTATUS_VALID = 0x00000001,
  D3DRMPMESHSTATUS_INTERRUPTED = 0x00000002,
  D3DRMPMESHSTATUS_BASEMESHCOMPLETE = 0x00000004,
  D3DRMPMESHSTATUS_COMPLETE = 0x00000008,
  D3DRMPMESHSTATUS_RENDERABLE = 0x00000010,
}

enum CONST_D3DRMPMESHEVENTFLAGS {
  D3DRMPMESHEVENT_BASEMESH = 0x00000001,
  D3DRMPMESHEVENT_COMPLETE = 0x00000002,
}

enum CONST_D3DRMFPTFFLAGS {
  D3DRMFPTF_ALPHA = 0x00000001,
  D3DRMFPTF_NOALPHA = 0x00000002,
  D3DRMFPTF_PALETTIZED = 0x00000004,
  D3DRMFPTF_NOTPALETTIZED = 0x00000008,
}

enum CONST_D3DRMMAPPINGFLAGS {
  D3DRMMAP_WRAPU = 0x00000001,
  D3DRMMAP_WRAPV = 0x00000002,
  D3DRMMAP_PERSPCORRECT = 0x00000004,
}

enum CONST_D3DRMSTATECHANGEFLAGS {
  D3DRMSTATECHANGE_UPDATEONLY = 0x00000001,
  D3DRMSTATECHANGE_VOLATILE = 0x00000002,
  D3DRMSTATECHANGE_NONVOLATILE = 0x00000004,
  D3DRMSTATECHANGE_RENDER = 0x00000020,
  D3DRMSTATECHANGE_LIGHT = 0x00000040,
}

enum CONST_D3DRMLOADFLAGS {
  D3DRMLOAD_FROMFILE = 0x00000000,
  D3DRMLOAD_FROMRESOURCE = 0x00000001,
  D3DRMLOAD_FROMMEMORY = 0x00000002,
  D3DRMLOAD_FROMSTREAM = 0x00000004,
  D3DRMLOAD_FROMUR = 0x00000008,
  D3DRMLOAD_BYNAME = 0x00000010,
  D3DRMLOAD_BYPOSITION = 0x00000020,
  D3DRMLOAD_BYGUID = 0x00000040,
  D3DRMLOAD_FIRST = 0x00000080,
  D3DRMLOAD_INSTANCEBYREFERENCE = 0x00000100,
  D3DRMLOAD_INSTANCEBYCOPYING = 0x00000200,
  D3DRMLOAD_ASYNCHRONOUS = 0x00000400,
}

enum CONST_D3DRMSAVEFLAGS {
  D3DRMXOFSAVE_NORMALS = 0x00000001,
  D3DRMXOFSAVE_TEXTURECOORDINATES = 0x00000002,
  D3DRMXOFSAVE_MATERIALS = 0x00000004,
  D3DRMXOFSAVE_TEXTURENAMES = 0x00000008,
  D3DRMXOFSAVE_ALL = 0x0000000F,
  D3DRMXOFSAVE_TEMPLATES = 0x00000010,
  D3DRMXOFSAVE_TEXTURETOPOLOGY = 0x00000020,
}

enum CONST_D3DRMMATERIALOVERRIDEFLAGS {
  D3DRMMATERIALOVERRIDE_DIFFUSE_ALPHAONLY = 0x00000001,
  D3DRMMATERIALOVERRIDE_DIFFUSE_RGBONLY = 0x00000002,
  D3DRMMATERIALOVERRIDE_DIFFUSE = 0x00000003,
  D3DRMMATERIALOVERRIDE_AMBIENT = 0x00000004,
  D3DRMMATERIALOVERRIDE_EMISSIVE = 0x00000008,
  D3DRMMATERIALOVERRIDE_SPECULAR = 0x00000010,
  D3DRMMATERIALOVERRIDE_POWER = 0x00000020,
  D3DRMMATERIALOVERRIDE_TEXTURE = 0x00000040,
  D3DRMMATERIALOVERRIDE_DIFFUSE_ALPHAMULTIPLY = 0x00000080,
  D3DRMMATERIALOVERRIDE_ALL = 0x000000FF,
}

enum CONST_D3DSHADEMODE {
  D3DSHADE_FLAT = 0x00000001,
  D3DSHADE_GOURAUD = 0x00000002,
  D3DSHADE_PHONG = 0x00000003,
}

enum CONST_D3DFILLMODE {
  D3DFILL_POINT = 0x00000001,
  D3DFILL_WIREFRAME = 0x00000002,
  D3DFILL_SOLID = 0x00000003,
}

enum CONST_D3DBLEND {
  D3DBLEND_ZERO = 0x00000001,
  D3DBLEND_ONE = 0x00000002,
  D3DBLEND_SRCCOLOR = 0x00000003,
  D3DBLEND_INVSRCCOLOR = 0x00000004,
  D3DBLEND_SRCALPHA = 0x00000005,
  D3DBLEND_INVSRCALPHA = 0x00000006,
  D3DBLEND_DESTALPHA = 0x00000007,
  D3DBLEND_INVDESTALPHA = 0x00000008,
  D3DBLEND_DESTCOLOR = 0x00000009,
  D3DBLEND_INVDESTCOLOR = 0x0000000A,
  D3DBLEND_SRCALPHASAT = 0x0000000B,
  D3DBLEND_BOTHSRCALPHA = 0x0000000C,
  D3DBLEND_BOTHINVSRCALPHA = 0x0000000D,
}

enum CONST_D3DTEXTUREADDRESS {
  D3DTADDRESS_WRAP = 0x00000001,
  D3DTADDRESS_MIRROR = 0x00000002,
  D3DTADDRESS_CLAMP = 0x00000003,
  D3DTADDRESS_BORDER = 0x00000004,
}

enum CONST_D3DCULL {
  D3DCULL_NONE = 0x00000001,
  D3DCULL_CW = 0x00000002,
  D3DCULL_CCW = 0x00000003,
}

enum CONST_D3DCMPFUNC {
  D3DCMP_NEVER = 0x00000001,
  D3DCMP_LESS = 0x00000002,
  D3DCMP_EQUAL = 0x00000003,
  D3DCMP_LESSEQUAL = 0x00000004,
  D3DCMP_GREATER = 0x00000005,
  D3DCMP_NOTEQUAL = 0x00000006,
  D3DCMP_GREATEREQUAL = 0x00000007,
  D3DCMP_ALWAYS = 0x00000008,
}

enum CONST_D3DSTENCILOP {
  D3DSTENCILOP_KEEP = 0x00000001,
  D3DSTENCILOP_ZERO = 0x00000002,
  D3DSTENCILOP_REPLACE = 0x00000003,
  D3DSTENCILOP_INCRSAT = 0x00000004,
  D3DSTENCILOP_DECRSAT = 0x00000005,
  D3DSTENCILOP_INVERT = 0x00000006,
  D3DSTENCILOP_INCR = 0x00000007,
  D3DSTENCILOP_DECR = 0x00000008,
}

enum CONST_D3DFOGMODE {
  D3DFOG_NONE = 0x00000000,
  D3DFOG_EXP = 0x00000001,
  D3DFOG_EXP2 = 0x00000002,
  D3DFOG_LINEAR = 0x00000003,
}

enum CONST_D3DZBUFFERTYPE {
  D3DZB_FALSE = 0x00000000,
  D3DZB_TRUE = 0x00000001,
  D3DZB_USEW = 0x00000002,
}

enum CONST_D3DANTIALIASMODE {
  D3DANTIALIAS_NONE = 0x00000000,
  D3DANTIALIAS_SORTDEPENDENT = 0x00000001,
  D3DANTIALIAS_SORTINDEPENDENT = 0x00000002,
}

enum CONST_D3DPROCESSVERTICESFLAGS {
  D3DPV_DEFAULT = 0x00000000,
  D3DPV_DONOTCOPYDATA = 0x00000001,
}

enum CONST_D3DPRIMITIVETYPE {
  D3DPT_POINTLIST = 0x00000001,
  D3DPT_LINELIST = 0x00000002,
  D3DPT_LINESTRIP = 0x00000003,
  D3DPT_TRIANGLELIST = 0x00000004,
  D3DPT_TRIANGLESTRIP = 0x00000005,
  D3DPT_TRIANGLEFAN = 0x00000006,
}

enum CONST_D3DTRANSFORMSTATETYPE {
  D3DTRANSFORMSTATE_WORLD = 0x00000001,
  D3DTRANSFORMSTATE_VIEW = 0x00000002,
  D3DTRANSFORMSTATE_PROJECTION = 0x00000003,
}

enum CONST_D3DRENDERSTATETYPE {
  D3DRENDERSTATE_ANTIALIAS = 0x00000002,
  D3DRENDERSTATE_TEXTUREPERSPECTIVE = 0x00000004,
  D3DRENDERSTATE_ZENABLE = 0x00000007,
  D3DRENDERSTATE_FILLMODE = 0x00000008,
  D3DRENDERSTATE_SHADEMODE = 0x00000009,
  D3DRENDERSTATE_LINEPATTERN = 0x0000000A,
  D3DRENDERSTATE_ZWRITEENABLE = 0x0000000E,
  D3DRENDERSTATE_ALPHATESTENABLE = 0x0000000F,
  D3DRENDERSTATE_LASTPIXEL = 0x00000010,
  D3DRENDERSTATE_SRCBLEND = 0x00000013,
  D3DRENDERSTATE_DESTBLEND = 0x00000014,
  D3DRENDERSTATE_CULLMODE = 0x00000016,
  D3DRENDERSTATE_ZFUNC = 0x00000017,
  D3DRENDERSTATE_ALPHAREF = 0x00000018,
  D3DRENDERSTATE_ALPHAFUNC = 0x00000019,
  D3DRENDERSTATE_DITHERENABLE = 0x0000001A,
  D3DRENDERSTATE_ALPHABLENDENABLE = 0x0000001B,
  D3DRENDERSTATE_FOGENABLE = 0x0000001C,
  D3DRENDERSTATE_SPECULARENABLE = 0x0000001D,
  D3DRENDERSTATE_ZVISIBLE = 0x0000001E,
  D3DRENDERSTATE_STIPPLEDALPHA = 0x00000021,
  D3DRENDERSTATE_FOGCOLOR = 0x00000022,
  D3DRENDERSTATE_FOGTABLEMODE = 0x00000023,
  D3DRENDERSTATE_EDGEANTIALIAS = 0x00000028,
  D3DRENDERSTATE_COLORKEYENABLE = 0x00000029,
  D3DRENDERSTATE_ZBIAS = 0x0000002F,
  D3DRENDERSTATE_RANGEFOGENABLE = 0x00000030,
  D3DRENDERSTATE_STENCILENABLE = 0x00000034,
  D3DRENDERSTATE_STENCILFAIL = 0x00000035,
  D3DRENDERSTATE_STENCILZFAIL = 0x00000036,
  D3DRENDERSTATE_STENCILPASS = 0x00000037,
  D3DRENDERSTATE_STENCILFUNC = 0x00000038,
  D3DRENDERSTATE_STENCILREF = 0x00000039,
  D3DRENDERSTATE_STENCILMASK = 0x0000003A,
  D3DRENDERSTATE_STENCILWRITEMASK = 0x0000003B,
  D3DRENDERSTATE_TEXTUREFACTOR = 0x0000003C,
  D3DRENDERSTATE_WRAP0 = 0x00000080,
  D3DRENDERSTATE_WRAP1 = 0x00000081,
  D3DRENDERSTATE_WRAP2 = 0x00000082,
  D3DRENDERSTATE_WRAP3 = 0x00000083,
  D3DRENDERSTATE_WRAP4 = 0x00000084,
  D3DRENDERSTATE_WRAP5 = 0x00000085,
  D3DRENDERSTATE_WRAP6 = 0x00000086,
  D3DRENDERSTATE_WRAP7 = 0x00000087,
  D3DRENDERSTATE_CLIPPING = 0x00000088,
  D3DRENDERSTATE_LIGHTING = 0x00000089,
  D3DRENDERSTATE_EXTENTS = 0x0000008A,
  D3DRENDERSTATE_AMBIENT = 0x0000008B,
  D3DRENDERSTATE_FOGVERTEXMODE = 0x0000008C,
  D3DRENDERSTATE_COLORVERTEX = 0x0000008D,
  D3DRENDERSTATE_LOCALVIEWER = 0x0000008E,
  D3DRENDERSTATE_NORMALIZENORMALS = 0x0000008F,
  D3DRENDERSTATE_COLORKEYBLENDENABLE = 0x00000090,
  D3DRENDERSTATE_DIFFUSEMATERIALSOURCE = 0x00000091,
  D3DRENDERSTATE_SPECULARMATERIALSOURCE = 0x00000092,
  D3DRENDERSTATE_AMBIENTMATERIALSOURCE = 0x00000093,
  D3DRENDERSTATE_EMISSIVEMATERIALSOURCE = 0x00000094,
  D3DRENDERSTATE_ALPHASOURCE = 0x00000095,
  D3DRENDERSTATE_FOGFACTORSOURCE = 0x00000096,
  D3DRENDERSTATE_VERTEXBLEND = 0x00000097,
  D3DRENDERSTATE_CLIPPLANEENABLE = 0x00000098,
}

enum CONST_D3DRENDERSTATESINGLE {
  D3DRENDERSTATE_FOGSTART = 0x00000024,
  D3DRENDERSTATE_FOGEND = 0x00000025,
  D3DRENDERSTATE_FOGDENSITY = 0x00000026,
}

enum CONST_DDLOCKFLAGS {
  DDLOCK_SURFACEMEMORYPTR = 0x00000000,
  DDLOCK_WAIT = 0x00000001,
  DDLOCK_EVENT = 0x00000002,
  DDLOCK_READONLY = 0x00000010,
  DDLOCK_WRITEONLY = 0x00000020,
  DDLOCK_NOSYSLOCK = 0x00000800,
  DDLOCK_DONOTWAIT = 0x00004000,
}

enum CONST_DDPCAPSFLAGS {
  DDPCAPS_4BIT = 0x00000001,
  DDPCAPS_8BITENTRIES = 0x00000002,
  DDPCAPS_8BIT = 0x00000004,
  DDPCAPS_INITIALIZE = 0x00000008,
  DDPCAPS_PRIMARYSURFACE = 0x00000010,
  DDPCAPS_PRIMARYSURFACELEFT = 0x00000020,
  DDPCAPS_ALLOW256 = 0x00000040,
  DDPCAPS_VSYNC = 0x00000080,
  DDPCAPS_1BIT = 0x00000100,
  DDPCAPS_2BIT = 0x00000200,
  DDPCAPS_ALPHA = 0x00000400,
}

enum CONST_DDEDMFLAGS {
  DDEDM_DEFAULT = 0x00000000,
  DDEDM_REFRESHRATES = 0x00000001,
  DDEDM_STANDARDVGAMODES = 0x00000002,
}

enum CONST_DDSCLFLAGS {
  DDSCL_FULLSCREEN = 0x00000001,
  DDSCL_ALLOWREBOOT = 0x00000002,
  DDSCL_NOWINDOWCHANGES = 0x00000004,
  DDSCL_NORMAL = 0x00000008,
  DDSCL_EXCLUSIVE = 0x00000010,
  DDSCL_ALLOWMODEX = 0x00000040,
  DDSCL_CREATEDEVICEWINDOW = 0x00000200,
  DDSCL_MULTITHREADED = 0x00000400,
  DDSCL_SETDEVICEWINDOW = 0x00000100,
  DDSCL_SETFOCUSWINDOW = 0x00000080,
}

enum CONST_DDSDMFLAGS {
  DDSDM_DEFAULT = 0x00000000,
  DDSDM_STANDARDVGAMODE = 0x00000001,
}

enum CONST_DDBLTFLAGS {
  DDBLT_ASYNC = 0x00000200,
  DDBLT_COLORFILL = 0x00000400,
  DDBLT_DDFX = 0x00000800,
  DDBLT_DDROPS = 0x00001000,
  DDBLT_KEYDEST = 0x00002000,
  DDBLT_KEYDESTOVERRIDE = 0x00004000,
  DDBLT_KEYSRC = 0x00008000,
  DDBLT_KEYSRCOVERRIDE = 0x00010000,
  DDBLT_ROP = 0x00020000,
  DDBLT_ROTATIONANGLE = 0x00040000,
  DDBLT_WAIT = 0x01000000,
  DDBLT_DEPTHFILL = 0x02000000,
  DDBLT_DONOTWAIT = 0x08000000,
}

enum CONST_DDBLTFASTFLAGS {
  DDBLTFAST_NOCOLORKEY = 0x00000000,
  DDBLTFAST_SRCCOLORKEY = 0x00000001,
  DDBLTFAST_DESTCOLORKEY = 0x00000002,
  DDBLTFAST_WAIT = 0x00000010,
  DDBLTFAST_DONOTWAIT = 0x00000020,
}

enum CONST_DDFLIPFLAGS {
  DDFLIP_WAIT = 0x00000001,
  DDFLIP_EVEN = 0x00000002,
  DDFLIP_ODD = 0x00000004,
  DDFLIP_NOVSYNC = 0x00000008,
  DDFLIP_STEREO = 0x00000010,
  DDFLIP_DONOTWAIT = 0x00000020,
  DDFLIP_INTERFVAL2 = 0x20000000,
  DDFLIP_INTERFVAL3 = 0x30000000,
  DDFLIP_INTERFVAL4 = 0x40000000,
}

enum CONST_DDENUMOVERLAYZFLAGS {
  DDENUMOVERLAYZ_BACKTOFRONT = 0x00000000,
  DDENUMOVERLAYZ_FRONTTOBACK = 0x00000001,
}

enum CONST_DDOVERFLAGS {
  DDOVER_ALPHADEST = 0x00000001,
  DDOVER_ALPHADESTCONSTOVERRIDE = 0x00000002,
  DDOVER_ALPHADESTNEG = 0x00000004,
  DDOVER_ALPHADESTSURFACEOVERRIDE = 0x00000008,
  DDOVER_ALPHAEDGEBLEND = 0x00000010,
  DDOVER_ALPHASRC = 0x00000020,
  DDOVER_ALPHASRCCONSTOVERRIDE = 0x00000040,
  DDOVER_ALPHASRCNEG = 0x00000080,
  DDOVER_ALPHASRCSURFACEOVERRIDE = 0x00000100,
  DDOVER_HIDE = 0x00000200,
  DDOVER_KEYDEST = 0x00000400,
  DDOVER_KEYDESTOVERRIDE = 0x00000800,
  DDOVER_KEYSRC = 0x00001000,
  DDOVER_KEYSRCOVERRIDE = 0x00002000,
  DDOVER_SHOW = 0x00004000,
  DDOVER_ADDDIRTYRECT = 0x00008000,
  DDOVER_REFRESHDIRTYRECTS = 0x00010000,
  DDOVER_REFRESHALL = 0x00020000,
  DDOVER_DDFX = 0x00080000,
  DDOVER_AUTOFLIP = 0x00100000,
  DDOVER_BOB = 0x00200000,
  DDOVER_OVERRIDEBOBWEAVE = 0x00400000,
  DDOVER_INTERLEAVED = 0x00800000,
  DDOVER_ARGBSCALEFACTORS = 0x02000000,
  DDOVER_DEGRADEARGBSCALING = 0x04000000,
}

enum CONST_DDOVERZFLAGS {
  DDOVERZ_SENDTOFRONT = 0x00000000,
  DDOVERZ_SENDTOBACK = 0x00000001,
  DDOVERZ_MOVEFORWARD = 0x00000002,
  DDOVERZ_MOVEBACKWARD = 0x00000003,
  DDOVERZ_INSERTINFRONTOF = 0x00000004,
  DDOVERZ_INSERTINBACKOF = 0x00000005,
}

enum CONST_DDGFSFLAGS {
  DDGFS_CANFLIP = 0x00000001,
  DDGFS_ISFLIPDONE = 0x00000002,
}

enum CONST_DDGBSFLAGS {
  DDGBS_CANBLT = 0x00000001,
  DDGBS_ISBLTDONE = 0x00000002,
}

enum CONST_DDCKEYFLAGS {
  DDCKEY_COLORSPACE = 0x00000001,
  DDCKEY_DESTBLT = 0x00000002,
  DDCKEY_DESTOVERLAY = 0x00000004,
  DDCKEY_SRCBLT = 0x00000008,
  DDCKEY_SRCOVERLAY = 0x00000010,
}

enum CONST_DDSGRFLAGS {
  DDSGR_DEFAULT = 0x00000000,
  DDSGR_CALIBRATE = 0x00000001,
}

enum CONST_DBOOLFLAGS {
  D_FALSE = 0x00000000,
  D_TRUE = 0x00000001,
}

enum CONST_DDBITDEPTHFLAGS {
  DDBD_1 = 0x00004000,
  DDBD_2 = 0x00002000,
  DDBD_4 = 0x00001000,
  DDBD_8 = 0x00000800,
  DDBD_16 = 0x00000400,
  DDBD_24 = 0x00000200,
  DDBD_32 = 0x00000100,
}

enum CONST_DDSURFACEDESCFLAGS {
  DDSD_CAPS = 0x00000001,
  DDSD_HEIGHT = 0x00000002,
  DDSD_WIDTH = 0x00000004,
  DDSD_PITCH = 0x00000008,
  DDSD_BACKBUFFERCOUNT = 0x00000020,
  DDSD_ZBUFFERBITDEPTH = 0x00000040,
  DDSD_ALPHABITDEPTH = 0x00000080,
  DDSD_TEXTURESTAGE = 0x00100000,
  DDSD_LPSURFACE = 0x00000800,
  DDSD_PIXELFORMAT = 0x00001000,
  DDSD_CKDESTOVERLAY = 0x00002000,
  DDSD_CKDESTBLT = 0x00004000,
  DDSD_CKSRCOVERLAY = 0x00008000,
  DDSD_CKSRCBLT = 0x00010000,
  DDSD_MIPMAPCOUNT = 0x00020000,
  DDSD_REFRESHRATE = 0x00040000,
  DDSD_LINEARSIZE = 0x00080000,
  DDSD_ALL = 0x000FF9EE,
}

enum CONST_DDCOLORFLAGS {
  DDCOLOR_BRIGHTNESS = 0x00000001,
  DDCOLOR_CONTRAST = 0x00000002,
  DDCOLOR_HUE = 0x00000004,
  DDCOLOR_SATURATION = 0x00000008,
  DDCOLOR_SHARPNESS = 0x00000010,
  DDCOLOR_GAMMA = 0x00000020,
  DDCOLOR_COLORENABLE = 0x00000040,
}

enum CONST_DDSURFACECAPSFLAGS {
  DDSCAPS_ALPHA = 0x00000002,
  DDSCAPS_BACKBUFFER = 0x00000004,
  DDSCAPS_COMPLEX = 0x00000008,
  DDSCAPS_FLIP = 0x00000010,
  DDSCAPS_FRONTBUFFER = 0x00000020,
  DDSCAPS_OFFSCREENPLAIN = 0x00000040,
  DDSCAPS_OVERLAY = 0x00000080,
  DDSCAPS_PALETTE = 0x00000100,
  DDSCAPS_PRIMARYSURFACE = 0x00000200,
  DDSCAPS_PRIMARYSURFACELEFT = 0x00000400,
  DDSCAPS_SYSTEMMEMORY = 0x00000800,
  DDSCAPS_TEXTURE = 0x00001000,
  DDSCAPS_3DDEVICE = 0x00002000,
  DDSCAPS_VIDEOMEMORY = 0x00004000,
  DDSCAPS_VISIBLE = 0x00008000,
  DDSCAPS_WRITEONLY = 0x00010000,
  DDSCAPS_ZBUFFER = 0x00020000,
  DDSCAPS_OWNDC = 0x00040000,
  DDSCAPS_LIVEVIDEO = 0x00080000,
  DDSCAPS_HWCODEC = 0x00100000,
  DDSCAPS_MODEX = 0x00200000,
  DDSCAPS_MIPMAP = 0x00400000,
  DDSCAPS_RESERVED2 = 0x00800000,
  DDSCAPS_ALLOCONLOAD = 0x04000000,
  DDSCAPS_VIDEOPORT = 0x08000000,
  DDSCAPS_LOCALVIDMEM = 0x10000000,
  DDSCAPS_NONLOCALVIDMEM = 0x20000000,
  DDSCAPS_STANDARDVGAMODE = 0x40000000,
  DDSCAPS_OPTIMIZED = 0x80000000,
}

enum CONST_DDSURFACECAPS2FLAGS {
  DDSCAPS2_HARDWAREDEINTERLACE = 0x00000002,
  DDSCAPS2_HINTDYNAMIC = 0x00000004,
  DDSCAPS2_HINTSTATIC = 0x00000008,
  DDSCAPS2_TEXTUREMANAGE = 0x00000010,
  DDSCAPS2_OPAQUE = 0x00000080,
  DDSCAPS2_HINTANTIALIASING = 0x00000100,
  DDSCAPS2_CUBEMAP = 0x00000200,
  DDSCAPS2_CUBEMAP_POSITIVEX = 0x00000400,
  DDSCAPS2_CUBEMAP_NEGATIVEX = 0x00000800,
  DDSCAPS2_CUBEMAP_POSITIVEY = 0x00001000,
  DDSCAPS2_CUBEMAP_NEGATIVEY = 0x00002000,
  DDSCAPS2_CUBEMAP_POSITIVEZ = 0x00004000,
  DDSCAPS2_CUBEMAP_NEGATIVEZ = 0x00008000,
  DDSCAPS2_CUBEMAP_ALLFACES = 0x0000FE00,
  DDSCAPS2_MIPMAPSUBLEVEL = 0x00010000,
  DDSCAPS2_D3DTEXTUREMANAGE = 0x00020000,
  DDSCAPS2_STEREOSURFACELEFT = 0x00080000,
}

enum CONST_DDCAPS1FLAGS {
  DDCAPS_3D = 0x00000001,
  DDCAPS_ALIGNBOUNDARYDEST = 0x00000002,
  DDCAPS_ALIGNSIZEDEST = 0x00000004,
  DDCAPS_ALIGNBOUNDARYSRC = 0x00000008,
  DDCAPS_ALIGNSIZESRC = 0x00000010,
  DDCAPS_ALIGNSTRIDE = 0x00000020,
  DDCAPS_BLT = 0x00000040,
  DDCAPS_BLTQUEUE = 0x00000080,
  DDCAPS_BLTFOURCC = 0x00000100,
  DDCAPS_BLTSTRETCH = 0x00000200,
  DDCAPS_GDI = 0x00000400,
  DDCAPS_OVERLAY = 0x00000800,
  DDCAPS_OVERLAYCANTCLIP = 0x00001000,
  DDCAPS_OVERLAYFOURCC = 0x00002000,
  DDCAPS_OVERLAYSTRETCH = 0x00004000,
  DDCAPS_PALETTE = 0x00008000,
  DDCAPS_PALETTEVSYNC = 0x00010000,
  DDCAPS_READSCANLINE = 0x00020000,
  DDCAPS_STEREOVIEW = 0x00040000,
  DDCAPS_VBI = 0x00080000,
  DDCAPS_ZBLTS = 0x00100000,
  DDCAPS_ZOVERLAYS = 0x00200000,
  DDCAPS_COLORKEY = 0x00400000,
  DDCAPS_ALPHA = 0x00800000,
  DDCAPS_COLORKEYHWASSIST = 0x01000000,
  DDCAPS_NOHARDWARE = 0x02000000,
  DDCAPS_BLTCOLORFILL = 0x04000000,
  DDCAPS_BANKSWITCHED = 0x08000000,
  DDCAPS_BLTDEPTHFILL = 0x10000000,
  DDCAPS_CANCLIP = 0x20000000,
  DDCAPS_CANCLIPSTRETCHED = 0x40000000,
  DDCAPS_CANBLTSYSMEM = 0x80000000,
}

enum CONST_DDCAPS2FLAGS {
  DDCAPS2_CERTIFIED = 0x00000001,
  DDCAPS2_NO2DDURING3DSCENE = 0x00000002,
  DDCAPS2_VIDEOPORT = 0x00000004,
  DDCAPS2_AUTOFLIPOVERLAY = 0x00000008,
  DDCAPS2_CANBOBINTERLEAVED = 0x00000010,
  DDCAPS2_CANBOBNONINTERLEAVED = 0x00000020,
  DDCAPS2_COLORCONTROLOVERLAY = 0x00000040,
  DDCAPS2_COLORCONTROLPRIMARY = 0x00000080,
  DDCAPS2_CANDROPZ16BIT = 0x00000100,
  DDCAPS2_NONLOCALVIDMEM = 0x00000200,
  DDCAPS2_NONLOCALVIDMEMCAPS = 0x00000400,
  DDCAPS2_NOPAGELOCKREQUIRED = 0x00000800,
  DDCAPS2_WIDESURFACES = 0x00001000,
  DDCAPS2_CANFLIPODDEVEN = 0x00002000,
  DDCAPS2_CANBOBHARDWARE = 0x00004000,
  DDCAPS2_COPYFOURCC = 0x00008000,
  DDCAPS2_PRIMARYGAMMA = 0x00020000,
  DDCAPS2_CANRENDERWINDOWED = 0x00080000,
  DDCAPS2_CANCALIBRATEGAMMA = 0x00100000,
  DDCAPS2_FLIPINTERVAL = 0x00200000,
  DDCAPS2_FLIPNOVSYNC = 0x00400000,
  DDCAPS2_CANMANAGETEXTURE = 0x00800000,
  DDCAPS2_STEREO = 0x02000000,
}

enum CONST_DDFXCAPSFLAGS {
  DDFXCAPS_BLTARITHSTRETCHY = 0x00000020,
  DDFXCAPS_BLTARITHSTRETCHYN = 0x00000010,
  DDFXCAPS_BLTMIRRORLEFTRIGHT = 0x00000040,
  DDFXCAPS_BLTMIRRORUPDOWN = 0x00000080,
  DDFXCAPS_BLTROTATION = 0x00000100,
  DDFXCAPS_BLTROTATION90 = 0x00000200,
  DDFXCAPS_BLTSHRINKX = 0x00000400,
  DDFXCAPS_BLTSHRINKXN = 0x00000800,
  DDFXCAPS_BLTSHRINKY = 0x00001000,
  DDFXCAPS_BLTSHRINKYN = 0x00002000,
  DDFXCAPS_BLTSTRETCHX = 0x00004000,
  DDFXCAPS_BLTSTRETCHXN = 0x00008000,
  DDFXCAPS_BLTSTRETCHY = 0x00010000,
  DDFXCAPS_BLTSTRETCHYN = 0x00020000,
  DDFXCAPS_OVERLAYARITHSTRETCHY = 0x00040000,
  DDFXCAPS_OVERLAYARITHSTRETCHYN = 0x00000008,
  DDFXCAPS_OVERLAYSHRINKX = 0x00080000,
  DDFXCAPS_OVERLAYSHRINKXN = 0x00100000,
  DDFXCAPS_OVERLAYSHRINKY = 0x00200000,
  DDFXCAPS_OVERLAYSHRINKYN = 0x00400000,
  DDFXCAPS_OVERLAYSTRETCHX = 0x00800000,
  DDFXCAPS_OVERLAYSTRETCHXN = 0x01000000,
  DDFXCAPS_OVERLAYSTRETCHY = 0x02000000,
  DDFXCAPS_OVERLAYSTRETCHYN = 0x04000000,
  DDFXCAPS_OVERLAYMIRRORLEFTRIGHT = 0x08000000,
  DDFXCAPS_OVERLAYMIRRORUPDOWN = 0x10000000,
  DDFXCAPS_BLTALPHA = 0x00000001,
  DDFXCAPS_BLTTRANSFORM = 0x00000002,
  DDFXCAPS_BLTFILTER = 0x00000020,
  DDFXCAPS_OVERLAYALPHA = 0x00000004,
  DDFXCAPS_OVERLAYTRANSFORM = 0x20000000,
  DDFXCAPS_OVERLAYFILTER = 0x00040000,
}

enum CONST_DDSTEREOCAPSFLAGS {
  DDSVCAPS_ENIGMA = 0x00000001,
  DDSVCAPS_FLICKER = 0x00000002,
  DDSVCAPS_REDBLUE = 0x00000004,
  DDSVCAPS_SPLIT = 0x00000008,
  DDSVCAPS_STEREOSEQUENTIAL = 0x00000010,
}

enum CONST_DDCKEYCAPSFLAGS {
  DDCKEYCAPS_DESTBLT = 0x00000001,
  DDCKEYCAPS_DESTBLTCLRSPACE = 0x00000002,
  DDCKEYCAPS_DESTBLTCLRSPACEYUV = 0x00000004,
  DDCKEYCAPS_DESTBLTYUV = 0x00000008,
  DDCKEYCAPS_DESTOVERLAY = 0x00000010,
  DDCKEYCAPS_DESTOVERLAYCLRSPACE = 0x00000020,
  DDCKEYCAPS_DESTOVERLAYCLRSPACEYUV = 0x00000040,
  DDCKEYCAPS_DESTOVERLAYONEACTIVE = 0x00000080,
  DDCKEYCAPS_DESTOVERLAYYUV = 0x00000100,
  DDCKEYCAPS_SRCBLT = 0x00000200,
  DDCKEYCAPS_SRCBLTCLRSPACE = 0x00000400,
  DDCKEYCAPS_SRCBLTCLRSPACEYUV = 0x00000800,
  DDCKEYCAPS_SRCBLTYUV = 0x00001000,
  DDCKEYCAPS_SRCOVERLAY = 0x00002000,
  DDCKEYCAPS_SRCOVERLAYCLRSPACE = 0x00004000,
  DDCKEYCAPS_SRCOVERLAYCLRSPACEYUV = 0x00008000,
  DDCKEYCAPS_SRCOVERLAYONEACTIVE = 0x00010000,
  DDCKEYCAPS_SRCOVERLAYYUV = 0x00020000,
  DDCKEYCAPS_NOCOSTOVERLAY = 0x00040000,
}

enum CONST_DDPIXELFORMATFLAGS {
  DDPF_ALPHAPIXELS = 0x00000001,
  DDPF_ALPHA = 0x00000002,
  DDPF_FOURCC = 0x00000004,
  DDPF_PALETTEINDEXED4 = 0x00000008,
  DDPF_PALETTEINDEXEDTO8 = 0x00000010,
  DDPF_PALETTEINDEXED8 = 0x00000020,
  DDPF_RGB = 0x00000040,
  DDPF_COMPRESSED = 0x00000080,
  DDPF_RGBTOYUV = 0x00000100,
  DDPF_YUV = 0x00000200,
  DDPF_ZBUFFER = 0x00000400,
  DDPF_PALETTEINDEXED1 = 0x00000800,
  DDPF_PALETTEINDEXED2 = 0x00001000,
  DDPF_ZPIXELS = 0x00002000,
  DDPF_STENCILBUFFER = 0x00004000,
  DDPF_ALPHAPREMULT = 0x00008000,
  DDPF_LUMINANCE = 0x00020000,
  DDPF_BUMPLUMINANCE = 0x00040000,
  DDPF_BUMPDUDV = 0x00080000,
}

enum CONST_DDENUMSURFACESFLAGS {
  DDENUMSURFACES_ALL = 0x00000001,
  DDENUMSURFACES_MATCH = 0x00000002,
  DDENUMSURFACES_NOMATCH = 0x00000004,
  DDENUMSURFACES_CANBECREATED = 0x00000008,
  DDENUMSURFACES_DOESEXIST = 0x00000010,
}

enum CONST_DDRAW {
  DD_ROP_SPACE = 0x00000008,
}

enum CONST_DDBLTFXFLAGS {
  DDBLTFX_ARITHSTRETCHY = 0x00000001,
  DDBLTFX_MIRRORLEFTRIGHT = 0x00000002,
  DDBLTFX_MIRRORUPDOWN = 0x00000004,
  DDBLTFX_NOTEARING = 0x00000008,
  DDBLTFX_ROTATE180 = 0x00000010,
  DDBLTFX_ROTATE270 = 0x00000020,
  DDBLTFX_ROTATE90 = 0x00000040,
  DDBLTFX_ZBUFFERRANGE = 0x00000080,
  DDBLTFX_ZBUFFERBASEDEST = 0x00000100,
}

enum CONST_DDWAITVBFLAGS {
  DDWAITVB_BLOCKBEGIN = 0x00000001,
  DDWAITVB_BLOCKBEGINEVENT = 0x00000002,
  DDWAITVB_BLOCKEND = 0x00000004,
}

enum CONST_DIENUMDEVICESFLAGS {
  DIEDFL_ALLDEVICES = 0x00000000,
  DIEDFL_ATTACHEDONLY = 0x00000001,
  DIEDFL_FORCEFEEDBACK = 0x00000100,
  DIEDFL_INCLUDEALIASES = 0x00010000,
  DIEDFL_INCLUDEPHANTOMS = 0x00020000,
}

enum CONST_DIDEVICETYPE {
  DIDEVTYPE_DEVICE = 0x00000001,
  DIDEVTYPE_MOUSE = 0x00000002,
  DIDEVTYPE_KEYBOARD = 0x00000003,
  DIDEVTYPE_JOYSTICK = 0x00000004,
  DIDEVTYPE_HID = 0x00010000,
  DIDEVTYPEMOUSE_UNKNOWN = 0x00000100,
  DIDEVTYPEMOUSE_TRADITIONAL = 0x00000200,
  DIDEVTYPEMOUSE_FINGERSTICK = 0x00000300,
  DIDEVTYPEMOUSE_TOUCHPAD = 0x00000400,
  DIDEVTYPEMOUSE_TRACKBALL = 0x00000500,
  DIDEVTYPEKEYBOARD_UNKNOWN = 0x00000000,
  DIDEVTYPEKEYBOARD_PCXT = 0x00000100,
  DIDEVTYPEKEYBOARD_OLIVETTI = 0x00000200,
  DIDEVTYPEKEYBOARD_PCAT = 0x00000300,
  DIDEVTYPEKEYBOARD_PCENH = 0x00000400,
  DIDEVTYPEKEYBOARD_NOKIA1050 = 0x00000500,
  DIDEVTYPEKEYBOARD_NOKIA9140 = 0x00000600,
  DIDEVTYPEKEYBOARD_NEC98 = 0x00000700,
  DIDEVTYPEKEYBOARD_NEC98LAPTOP = 0x00000800,
  DIDEVTYPEKEYBOARD_NEC98106 = 0x00000900,
  DIDEVTYPEKEYBOARD_JAPAN106 = 0x00000A00,
  DIDEVTYPEKEYBOARD_JAPANAX = 0x00000B00,
  DIDEVTYPEKEYBOARD_J3100 = 0x00000C00,
  DIDEVTYPEJOYSTICK_UNKNOWN = 0x00000100,
  DIDEVTYPEJOYSTICK_TRADITIONAL = 0x00000200,
  DIDEVTYPEJOYSTICK_FLIGHTSTICK = 0x00000300,
  DIDEVTYPEJOYSTICK_GAMEPAD = 0x00000400,
  DIDEVTYPEJOYSTICK_RUDDER = 0x00000500,
  DIDEVTYPEJOYSTICK_WHEEL = 0x00000600,
  DIDEVTYPEJOYSTICK_HEADTRACKER = 0x00000700,
}

enum CONST_DIDFTFLAGS {
  DIDFT_ALL = 0x00000000,
  DIDFT_RELAXIS = 0x00000001,
  DIDFT_ABSAXIS = 0x00000002,
  DIDFT_AXIS = 0x00000003,
  DIDFT_PSHBUTTON = 0x00000004,
  DIDFT_TGLBUTTON = 0x00000008,
  DIDFT_BUTTON = 0x0000000C,
  DIDFT_POV = 0x00000010,
  DIDFT_COLLECTION = 0x00000040,
  DIDFT_NODATA = 0x00000080,
  DIDFT_ANYINSTANCE = 0x00FFFF00,
  DIDFT_INSTANCEMASK = 0x00FFFF00,
  DIDFT_FFACTUATOR = 0x01000000,
  DIDFT_FFEFFECTTRIGGER = 0x02000000,
  DIDFT_NOCOLLECTION = 0x00FFFF00,
}

enum CONST_DIDGDDFLAGS {
  DIGDD_DEFAULT = 0x00000000,
  DIGDD_PEEK = 0x00000001,
}

enum CONST_DIPHFLAGS {
  DIPH_DEVICE = 0x00000000,
  DIPH_BYOFFSET = 0x00000001,
  DIPH_BYID = 0x00000002,
}

enum CONST_DISCLFLAGS {
  DISCL_EXCLUSIVE = 0x00000001,
  DISCL_NONEXCLUSIVE = 0x00000002,
  DISCL_FOREGROUND = 0x00000004,
  DISCL_BACKGROUND = 0x00000008,
}

enum CONST_DIDEVCAPSFLAGS {
  DIDC_ATTACHED = 0x00000001,
  DIDC_POLLEDDEVICE = 0x00000002,
  DIDC_EMULATED = 0x00000004,
  DIDC_POLLEDDATAFORMAT = 0x00000008,
  DIDC_FORCEFEEDBACK = 0x00000100,
  DIDC_FFATTACK = 0x00000200,
  DIDC_FFFADE = 0x00000400,
  DIDC_SATURATION = 0x00000800,
  DIDC_POSNEGCOEFFICIENTS = 0x00001000,
  DIDC_POSNEGSATURATION = 0x00002000,
  DIDC_DEADBAND = 0x00004000,
  DIDC_ALIAS = 0x00010000,
  DIDC_PHANTOM = 0x00020000,
}

enum CONST_DIDATAFORMATFLAGS {
  DIDF_ABSAXIS = 0x00000001,
  DIDF_RELAXIS = 0x00000002,
}

enum CONST_DIDEVICEOBJINSTANCEFLAGS {
  DIDOI_FFACTUATOR = 0x00000001,
  DIDOI_FFEFFECTTRIGGER = 0x00000002,
  DIDOI_POLLED = 0x00008000,
  DIDOI_ASPECTPOSITION = 0x00000100,
  DIDOI_ASPECTVELOCITY = 0x00000200,
  DIDOI_ASPECTACCEL = 0x00000300,
  DIDOI_ASPECTFORCE = 0x00000400,
  DIDOI_ASPECTMASK = 0x00000F00,
}

enum CONST_DIKEYFLAGS {
  DIK_ESCAPE = 0x00000001,
  DIK_1 = 0x00000002,
  DIK_2 = 0x00000003,
  DIK_3 = 0x00000004,
  DIK_4 = 0x00000005,
  DIK_5 = 0x00000006,
  DIK_6 = 0x00000007,
  DIK_7 = 0x00000008,
  DIK_8 = 0x00000009,
  DIK_9 = 0x0000000A,
  DIK_0 = 0x0000000B,
  DIK_MINUS = 0x0000000C,
  DIK_EQUALS = 0x0000000D,
  DIK_BACK = 0x0000000E,
  DIK_TAB = 0x0000000F,
  DIK_Q = 0x00000010,
  DIK_W = 0x00000011,
  DIK_E = 0x00000012,
  DIK_R = 0x00000013,
  DIK_T = 0x00000014,
  DIK_Y = 0x00000015,
  DIK_U = 0x00000016,
  DIK_I = 0x00000017,
  DIK_O = 0x00000018,
  DIK_P = 0x00000019,
  DIK_LBRACKET = 0x0000001A,
  DIK_RBRACKET = 0x0000001B,
  DIK_RETURN = 0x0000001C,
  DIK_LCONTROL = 0x0000001D,
  DIK_A = 0x0000001E,
  DIK_S = 0x0000001F,
  DIK_D = 0x00000020,
  DIK_F = 0x00000021,
  DIK_G = 0x00000022,
  DIK_H = 0x00000023,
  DIK_J = 0x00000024,
  DIK_K = 0x00000025,
  DIK_L = 0x00000026,
  DIK_SEMICOLON = 0x00000027,
  DIK_APOSTROPHE = 0x00000028,
  DIK_GRAVE = 0x00000029,
  DIK_LSHIFT = 0x0000002A,
  DIK_BACKSLASH = 0x0000002B,
  DIK_Z = 0x0000002C,
  DIK_X = 0x0000002D,
  DIK_C = 0x0000002E,
  DIK_V = 0x0000002F,
  DIK_B = 0x00000030,
  DIK_N = 0x00000031,
  DIK_M = 0x00000032,
  DIK_COMMA = 0x00000033,
  DIK_PERIOD = 0x00000034,
  DIK_SLASH = 0x00000035,
  DIK_RSHIFT = 0x00000036,
  DIK_MULTIPLY = 0x00000037,
  DIK_LMENU = 0x00000038,
  DIK_SPACE = 0x00000039,
  DIK_CAPITAL = 0x0000003A,
  DIK_F1 = 0x0000003B,
  DIK_F2 = 0x0000003C,
  DIK_F3 = 0x0000003D,
  DIK_F4 = 0x0000003E,
  DIK_F5 = 0x0000003F,
  DIK_F6 = 0x00000040,
  DIK_F7 = 0x00000041,
  DIK_F8 = 0x00000042,
  DIK_F9 = 0x00000043,
  DIK_F10 = 0x00000044,
  DIK_NUMLOCK = 0x00000045,
  DIK_SCROLL = 0x00000046,
  DIK_NUMPAD7 = 0x00000047,
  DIK_NUMPAD8 = 0x00000048,
  DIK_NUMPAD9 = 0x00000049,
  DIK_SUBTRACT = 0x0000004A,
  DIK_NUMPAD4 = 0x0000004B,
  DIK_NUMPAD5 = 0x0000004C,
  DIK_NUMPAD6 = 0x0000004D,
  DIK_ADD = 0x0000004E,
  DIK_NUMPAD1 = 0x0000004F,
  DIK_NUMPAD2 = 0x00000050,
  DIK_NUMPAD3 = 0x00000051,
  DIK_NUMPAD0 = 0x00000052,
  DIK_DECIMAL = 0x00000053,
  DIK_F11 = 0x00000057,
  DIK_F12 = 0x00000058,
  DIK_F13 = 0x00000064,
  DIK_F14 = 0x00000065,
  DIK_F15 = 0x00000066,
  DIK_KANA = 0x00000070,
  DIK_CONVERT = 0x00000079,
  DIK_NOCONVERT = 0x0000007B,
  DIK_YEN = 0x0000007D,
  DIK_NUMPADEQUALS = 0x0000008D,
  DIK_CIRCUMFLEX = 0x00000090,
  DIK_AT = 0x00000091,
  DIK_COLON = 0x00000092,
  DIK_UNDERLINE = 0x00000093,
  DIK_KANJI = 0x00000094,
  DIK_STOP = 0x00000095,
  DIK_AX = 0x00000096,
  DIK_UNLABELED = 0x00000097,
  DIK_NUMPADENTER = 0x0000009C,
  DIK_RCONTROL = 0x0000009D,
  DIK_NUMPADCOMMA = 0x000000B3,
  DIK_DIVIDE = 0x000000B5,
  DIK_SYSRQ = 0x000000B7,
  DIK_RMENU = 0x000000B8,
  DIK_PAUSE = 0x000000C5,
  DIK_HOME = 0x000000C7,
  DIK_UP = 0x000000C8,
  DIK_PRIOR = 0x000000C9,
  DIK_LEFT = 0x000000CB,
  DIK_RIGHT = 0x000000CD,
  DIK_END = 0x000000CF,
  DIK_DOWN = 0x000000D0,
  DIK_NEXT = 0x000000D1,
  DIK_INSERT = 0x000000D2,
  DIK_DELETE = 0x000000D3,
  DIK_LWIN = 0x000000DB,
  DIK_RWIN = 0x000000DC,
  DIK_APPS = 0x000000DD,
}

enum CONST_DINPUT {
  DIPROPRANGE_NOMIN = 0x80000000,
  DIPROPRANGE_NOMAX = 0x7FFFFFFF,
  DIPROPAXISMODE_ABS = 0x00000000,
  DIPROPAXISMODE_REL = 0x00000001,
  DIPROPCALIBRATIONMODE_COOKED = 0x00000000,
  DIPROPCALIBRATIONMODE_RAW = 0x00000001,
  DIPROPAUTOCENTER_OFF = 0x00000000,
  DIPROPAUTOCENTER_ON = 0x00000001,
  DIEB_NOTRIGGER = 0xFFFFFFFF,
}

enum CONST_DSSCLFLAGS {
  DSSCL_NORMAL = 0x00000001,
  DSSCL_PRIORITY = 0x00000002,
  DSSCL_EXCLUSIVE = 0x00000003,
  DSSCL_WRITEPRIMARY = 0x00000004,
}

enum CONST_DSSPEAKERFLAGS {
  DSSPEAKER_HEADPHONE = 0x00000001,
  DSSPEAKER_MONO = 0x00000002,
  DSSPEAKER_QUAD = 0x00000003,
  DSSPEAKER_STEREO = 0x00000004,
  DSSPEAKER_SURROUND = 0x00000005,
  DSSPEAKER_GEOMETRY_MIN = 0x00000005,
  DSSPEAKER_GEOMETRY_NARROW = 0x0000000A,
  DSSPEAKER_GEOMETRY_WIDE = 0x00000014,
  DSSPEAKER_GEOMETRY_MAX = 0x000000B4,
}

enum CONST_DSBPLAYFLAGS {
  DSBPLAY_DEFAULT = 0x00000000,
  DSBPLAY_LOOPING = 0x00000001,
}

enum CONST_DSBLOCKFLAGS {
  DSBLOCK_DEFAULT = 0x00000000,
  DSBLOCK_FROMWRITECURSOR = 0x00000001,
  DSBLOCK_ENTIREBUFFER = 0x00000002,
}

enum CONST_DSCBLOCKFLAGS {
  DSCBLOCK_DEFAULT = 0x00000000,
  DSCBLOCK_ENTIREBUFFER = 0x00000001,
}

enum CONST_DSBSTATUSFLAGS {
  DSBSTATUS_PLAYING = 0x00000001,
  DSBSTATUS_BUFFERLOST = 0x00000002,
  DSBSTATUS_LOOPING = 0x00000004,
}

enum CONST_DS3DAPPLYFLAGS {
  DS3D_IMMEDIATE = 0x00000000,
  DS3D_DEFERRED = 0x00000001,
}

enum CONST_DS3DMODEFLAGS {
  DS3DMODE_NORMAL = 0x00000000,
  DS3DMODE_HEADRELATIVE = 0x00000001,
  DS3DMODE_DISABLE = 0x00000002,
}

enum CONST_DSCBSTATUSFLAGS {
  DSCBSTATUS_CAPTURING = 0x00000001,
  DSCBSTATUS_LOOPING = 0x00000002,
}

enum CONST_DSCBSTARTFLAGS {
  DSCBSTART_DEFAULT = 0x00000000,
  DSCBSTART_LOOPING = 0x00000001,
}

enum CONST_DSCAPSFLAGS {
  DSCAPS_PRIMARYMONO = 0x00000001,
  DSCAPS_PRIMARYSTEREO = 0x00000002,
  DSCAPS_PRIMARY8BIT = 0x00000004,
  DSCAPS_PRIMARY16BIT = 0x00000008,
  DSCAPS_CONTINUOUSRATE = 0x00000010,
  DSCAPS_EMULDRIVER = 0x00000020,
  DSCAPS_CERTIFIED = 0x00000040,
  DSCAPS_SECONDARYMONO = 0x00000100,
  DSCAPS_SECONDARYSTEREO = 0x00000200,
  DSCAPS_SECONDARY8BIT = 0x00000400,
  DSCAPS_SECONDARY16BIT = 0x00000800,
}

enum CONST_DSBCAPSFLAGS {
  DSBCAPS_PRIMARYBUFFER = 0x00000001,
  DSBCAPS_STATIC = 0x00000002,
  DSBCAPS_LOCHARDWARE = 0x00000004,
  DSBCAPS_LOCSOFTWARE = 0x00000008,
  DSBCAPS_CTRL3D = 0x00000010,
  DSBCAPS_CTRLFREQUENCY = 0x00000020,
  DSBCAPS_CTRLPAN = 0x00000040,
  DSBCAPS_CTRLVOLUME = 0x00000080,
  DSBCAPS_CTRLPOSITIONNOTIFY = 0x00000100,
  DSBCAPS_STICKYFOCUS = 0x00004000,
  DSBCAPS_GLOBALFOCUS = 0x00008000,
  DSBCAPS_GETCURRENTPOSITION2 = 0x00010000,
  DSBCAPS_MUTE3DATMAXDISTANCE = 0x00020000,
}

enum CONST_DSCBCAPSFLAGS {
  DSCBCAPS_DEFAULT = 0x00000000,
  DSCBCAPS_WAVEMAPPED = 0x80000000,
}

enum CONST_DSCCAPSFLAGS {
  DSCCAPS_DEFAULT = 0x00000000,
  DSCCAPS_EMULDRIVER = 0x00000020,
}

enum CONST_DSOUND {
  DS3D_MINDISTANCEFACTOR = 0x00000000,
  DS3D_MAXDISTANCEFACTOR = 0x0000000A,
  DS3D_DEFAULTDISTANCEFACTOR = 0x00000001,
  DS3D_MINROLLOFFFACTOR = 0x00000000,
  DS3D_MAXROLLOFFFACTOR = 0x0000000A,
  DS3D_DEFAULTROLLOFFFACTOR = 0x00000001,
  DS3D_MINDOPPLERFACTOR = 0x00000000,
  DS3D_MAXDOPPLERFACTOR = 0x0000000A,
  DS3D_DEFAULTDOPPLERFACTOR = 0x00000001,
  DS3D_DEFAULTMINDISTANCE = 0x00000001,
  DS3D_DEFAULTMAXDISTANCE = 0x3B9ACA00,
  DS3D_MINCONEANGLE = 0x00000000,
  DS3D_MAXCONEANGLE = 0x00000168,
  DS3D_DEFAULTCONEANGLE = 0x00000168,
  DS3D_DEFAULTCONEOUTSIDEVOLUME = 0x00000000,
  DSBFREQUENCY_MIN = 0x00000064,
  DSBFREQUENCY_MAX = 0x000186A0,
  DSBFREQUENCY_ORIGINAL = 0x00000000,
  DSBPAN_LEFT = 0xFFFFD8F0,
  DSBPAN_CENTER = 0x00000000,
  DSBPAN_RIGHT = 0x00002710,
  DSBVOLUME_MIN = 0xFFFFD8F0,
  DSBVOLUME_MAX = 0x00000000,
  DSBSIZE_MIN = 0x00000004,
  DSBSIZE_MAX = 0x0FFFFFFF,
  DSBPN_OFFSETSTOP = 0xFFFFFFFF,
  WAVE_FORMAT_PCM = 0x00000001,
}

enum CONST_D3DTEXTURESTAGESTATETYPE {
  D3DTSS_COLOROP = 0x00000001,
  D3DTSS_COLORARG1 = 0x00000002,
  D3DTSS_COLORARG2 = 0x00000003,
  D3DTSS_ALPHAOP = 0x00000004,
  D3DTSS_ALPHAARG1 = 0x00000005,
  D3DTSS_ALPHAARG2 = 0x00000006,
  D3DTSS_TEXCOORDINDEX = 0x0000000B,
  D3DTSS_ADDRESS = 0x0000000C,
  D3DTSS_ADDRESSU = 0x0000000D,
  D3DTSS_ADDRESSV = 0x0000000E,
  D3DTSS_BORDERCOLOR = 0x0000000F,
  D3DTSS_MAGFILTER = 0x00000010,
  D3DTSS_MINFILTER = 0x00000011,
  D3DTSS_MIPFILTER = 0x00000012,
  D3DTSS_MAXMIPLEVEL = 0x00000014,
  D3DTSS_MAXANISOTROPY = 0x00000015,
  D3DTSS_TEXTURETRANSFORMFLAGS = 0x00000018,
}

enum CONST_D3DTEXCOORDINDEXFLAGS {
  D3DTSS_TCI_CAMERASPACENORMAL = 0x00010000,
  D3DTSS_TCI_CAMERASPACEPOSITION = 0x00020000,
  D3DTSS_TCI_CAMERASPACEREFLECTIONVECTOR = 0x00030000,
  D3DTSS_TCI_PASSTHRU = 0x00000000,
}

enum CONST_D3DTEXTURESTAGESINGLE {
  D3DTSS_BUMPENVMAT00 = 0x00000007,
  D3DTSS_BUMPENVMAT01 = 0x00000008,
  D3DTSS_BUMPENVMAT10 = 0x00000009,
  D3DTSS_BUMPENVMAT11 = 0x0000000A,
  D3DTSS_MIPMAPLODBIAS = 0x00000013,
  D3DTSS_BUMPENVLSCALE = 0x00000016,
  D3DTSS_BUMPENVLOFFSET = 0x00000017,
}

enum CONST_D3DTEXTUREOP {
  D3DTOP_DISABLE = 0x00000001,
  D3DTOP_SELECTARG1 = 0x00000002,
  D3DTOP_SELECTARG2 = 0x00000003,
  D3DTOP_MODULATE = 0x00000004,
  D3DTOP_MODULATE2X = 0x00000005,
  D3DTOP_MODULATE4X = 0x00000006,
  D3DTOP_ADD = 0x00000007,
  D3DTOP_ADDSIGNED = 0x00000008,
  D3DTOP_ADDSIGNED2X = 0x00000009,
  D3DTOP_SUBTRACT = 0x0000000A,
  D3DTOP_ADDSMOOTH = 0x0000000B,
  D3DTOP_BLENDDIFFUSEALPHA = 0x0000000C,
  D3DTOP_BLENDTEXTUREALPHA = 0x0000000D,
  D3DTOP_BLENDFACTORALPHA = 0x0000000E,
  D3DTOP_BLENDTEXTUREALPHAPM = 0x0000000F,
  D3DTOP_BLENDCURRENTALPHA = 0x00000010,
  D3DTOP_PREMODULATE = 0x00000011,
  D3DTOP_MODULATEALPHA_ADDCOLOR = 0x00000012,
  D3DTOP_MODULATECOLOR_ADDALPHA = 0x00000013,
  D3DTOP_MODULATEINVALPHA_ADDCOLOR = 0x00000014,
  D3DTOP_MODULATEINVCOLOR_ADDALPHA = 0x00000015,
  D3DTOP_BUMPENVMAP = 0x00000016,
  D3DTOP_BUMPENVMAPLUMINANCE = 0x00000017,
  D3DTOP_DOTPRODUCT3 = 0x00000018,
}

enum CONST_D3DTEXTUREMAGFILTER {
  D3DTFG_POINT = 0x00000001,
  D3DTFG_LINEAR = 0x00000002,
  D3DTFG_FLATCUBIC = 0x00000003,
  D3DTFG_GAUSSIANCUBIC = 0x00000004,
  D3DTFG_ANISOTROPIC = 0x00000005,
}

enum CONST_D3DTEXTUREMINFILTER {
  D3DTFN_POINT = 0x00000001,
  D3DTFN_LINEAR = 0x00000002,
  D3DTFN_ANISOTROPIC = 0x00000003,
}

enum CONST_D3DTEXTUREMIPFILTER {
  D3DTFP_NONE = 0x00000001,
  D3DTFP_POINT = 0x00000002,
  D3DTFP_LINEAR = 0x00000003,
}

enum CONST_DSETUPFLAGS {
  DSETUP_DDRAWDRV = 0x00000008,
  DSETUP_DSOUNDDRV = 0x00000010,
  DSETUP_DXCORE = 0x00010000,
  DSETUP_DIRECTX = 0x00010018,
  DSETUP_TESTINSTALL = 0x00020000,
}

enum CONST_DSETUPCALLBACKFLAGS {
  DSETUP_CB_MSG_NOMESSAGE = 0x00000000,
  DSETUP_CB_MSG_CANTINSTALL_UNKNOWNOS = 0x00000001,
  DSETUP_CB_MSG_CANTINSTALL_NT = 0x00000002,
  DSETUP_CB_MSG_CANTINSTALL_BETA = 0x00000003,
  DSETUP_CB_MSG_CANTINSTALL_NOTWIN32 = 0x00000004,
  DSETUP_CB_MSG_CANTINSTALL_WRONGLANGUAGE = 0x00000005,
  DSETUP_CB_MSG_CANTINSTALL_WRONGPLATFORM = 0x00000006,
  DSETUP_CB_MSG_PREINSTALL_NT = 0x00000007,
  DSETUP_CB_MSG_NOTPREINSTALLEDONNT = 0x00000008,
  DSETUP_CB_MSG_SETUP_INIT_FAILED = 0x00000009,
  DSETUP_CB_MSG_INTERNAL_ERROR = 0x0000000A,
  DSETUP_CB_MSG_CHECK_DRIVER_UPGRADE = 0x0000000B,
  DSETUP_CB_MSG_OUTOFDISKSPACE = 0x0000000C,
  DSETUP_CB_MSG_BEGIN_INSTALL = 0x0000000D,
  DSETUP_CB_MSG_BEGIN_INSTALL_RUNTIME = 0x0000000E,
  DSETUP_CB_MSG_BEGIN_INSTALL_DRIVERS = 0x0000000F,
  DSETUP_CB_MSG_BEGIN_RESTORE_DRIVERS = 0x00000010,
  DSETUP_CB_MSG_FILECOPYERROR = 0x00000011,
  DSETUP_CB_UPGRADE_TYPE_MASK = 0x0000000F,
  DSETUP_CB_UPGRADE_KEEP = 0x00000001,
  DSETUP_CB_UPGRADE_SAFE = 0x00000002,
  DSETUP_CB_UPGRADE_FORCE = 0x00000004,
  DSETUP_CB_UPGRADE_UNKNOWN = 0x00000008,
  DSETUP_CB_UPGRADE_HASWARNINGS = 0x00000100,
  DSETUP_CB_UPGRADE_CANTBACKUP = 0x00000200,
  DSETUP_CB_UPGRADE_DEVICE_ACTIVE = 0x00000800,
  DSETUP_CB_UPGRADE_DEVICE_DISPLAY = 0x00001000,
  DSETUP_CB_UPGRADE_DEVICE_MEDIA = 0x00002000,
}

enum CONST_D3DRMANIMATIONFLAGS {
  D3DRMANIMATION_OPEN = 0x00000001,
  D3DRMANIMATION_CLOSED = 0x00000002,
  D3DRMANIMATION_LINEARPOSITION = 0x00000004,
  D3DRMANIMATION_SPLINEPOSITION = 0x00000008,
  D3DRMANIMATION_SCALEANDROTATION = 0x00000010,
  D3DRMANIMATION_POSITION = 0x00000020,
}

enum CONST_D3DRMANIMATIONKEYFLAGS {
  D3DRMANIMATION_ROTATEKEY = 0x00000001,
  D3DRMANIMATION_SCALEKEY = 0x00000002,
  D3DRMANIMATION_POSITIONKEY = 0x00000003,
}

enum CONST_DPGROUPFLAGS {
  DPGROUP_DEFAULT = 0x00000000,
  DPGROUP_LOCAL = 0x00000008,
  DPGROUP_STAGINGAREA = 0x00000800,
  DPGROUP_HIDDEN = 0x00001000,
}

enum CONST_DPPLAYERFLAGS {
  DPPLAYER_DEFAULT = 0x00000000,
  DPPLAYER_SERVERPLAYER = 0x00000100,
  DPPLAYER_SPECTATOR = 0x00000200,
  DPPLAYER_LOCAL = 0x00000008,
}

enum CONST_DPENUMCONNECTIONFLAGS {
  DPCONNECTION_DIRECTPLAY = 0x00000001,
  DPCONNECTION_DIRECTPLAYLOBBY = 0x00000002,
}

enum CONST_DPCONNECTFLAGS {
  DPCONNECTION_DEFAULT = 0x00000000,
  DPCONNECTION_RETURNSTATUS = 0x00000080,
}

enum CONST_DPENUMPLAYERFLAGS {
  DPENUMPLAYERS_ALL = 0x00000000,
  DPENUMPLAYERS_LOCAL = 0x00000008,
  DPENUMPLAYERS_REMOTE = 0x00000010,
  DPENUMPLAYERS_GROUP = 0x00000020,
  DPENUMPLAYERS_SESSION = 0x00000080,
  DPENUMPLAYERS_SERVERPLAYER = 0x00000100,
  DPENUMPLAYERS_SPECTATOR = 0x00000200,
  DPENUMPLAYERS_OWNER = 0x00002000,
}

enum CONST_DPENUMGROUPFLAGS {
  DPENUMGROUPS_ALL = 0x00000000,
  DPENUMGROUPS_HIDDEN = 0x00001000,
  DPENUMGROUPS_LOCAL = 0x00000008,
  DPENUMGROUPS_REMOTE = 0x00000010,
  DPENUMGROUPS_SESSION = 0x00000080,
  DPENUMGROUPS_STAGINGAREA = 0x00000800,
  DPENUMGROUPS_SHORTCUT = 0x00000400,
}

enum CONST_DPENUMSESSIONFLAGS {
  DPENUMSESSIONS_ALL = 0x00000002,
  DPENUMSESSIONS_ASYNC = 0x00000010,
  DPENUMSESSIONS_AVAILABLE = 0x00000001,
  DPENUMSESSIONS_PASSWORDREQUIRED = 0x00000040,
  DPENUMSESSIONS_RETURNSTATUS = 0x00000080,
  DPENUMSESSIONS_STOPASYNC = 0x00000010,
}

enum CONST_DPGETCAPSFLAGS {
  DPGETCAPS_DEFAULT = 0x00000000,
  DPGETCAPS_GUARANTEED = 0x00000001,
}

enum CONST_DPGETFLAGS {
  DPGET_REMOTE = 0x00000000,
  DPGET_LOCAL = 0x00000001,
}

enum CONST_DPSETFLAGS {
  DPSET_REMOTE = 0x00000000,
  DPSET_LOCAL = 0x00000001,
  DPSET_GUARANTEED = 0x00000002,
}

enum CONST_DPMESSAGEQUEUEFLAGS {
  DPMESSAGEQUEUE_SEND = 0x00000001,
  DPMESSAGEQUEUE_RECEIVE = 0x00000002,
}

enum CONST_DPOPENFLAGS {
  DPOPEN_JOIN = 0x00000001,
  DPOPEN_CREATE = 0x00000002,
  DPOPEN_RETURNSTATUS = 0x00000080,
}

enum CONST_DPRECEIVEFLAGS {
  DPRECEIVE_ALL = 0x00000001,
  DPRECEIVE_PEEK = 0x00000008,
  DPRECEIVE_TOPLAYER = 0x00000002,
  DPRECEIVE_FROMPLAYER = 0x00000004,
}

enum CONST_DPSENDFLAGS {
  DPSEND_DEFAULT = 0x00000000,
  DPSEND_GUARANTEED = 0x00000001,
  DPSEND_SIGNED = 0x00000020,
  DPSEND_ENCRYPTED = 0x00000040,
  DPSEND_NOSENDCOMPLETEMSG = 0x00000400,
  DPSEND_ASYNC = 0x00000200,
}

enum CONST_DPLMSG {
  DPLMSG_SYSTEM = 0x00000001,
  DPLMSG_STANDARD = 0x00000002,
  DPLMSG_USERDEFINED = 0x00000000,
}

enum CONST_DPLWAIT {
  DPLWAIT_DEFAULT = 0x00000000,
  DPLWAIT_CANCEL = 0x00000001,
}

enum CONST_DPIDFLAGS {
  DPID_SYSMSG = 0x00000000,
  DPID_ALLPLAYERS = 0x00000000,
  DPID_SERVERPLAYER = 0x00000001,
  DPID_UNKNOWN = 0xFFFFFFFF,
}

enum CONST_DPSESSIONFLAGS {
  DPSESSION_NEWPLAYERSDISABLED = 0x00000001,
  DPSESSION_MIGRATEHOST = 0x00000004,
  DPSESSION_NOMESSAGEID = 0x00000008,
  DPSESSION_JOINDISABLED = 0x00000020,
  DPSESSION_KEEPALIVE = 0x00000040,
  DPSESSION_NODATAMESSAGES = 0x00000080,
  DPSESSION_SECURESERVER = 0x00000100,
  DPSESSION_PRIVATE = 0x00000200,
  DPSESSION_PASSWORDREQUIRED = 0x00000400,
  DPSESSION_MULTICASTSERVER = 0x00000800,
  DPSESSION_CLIENTSERVER = 0x00001000,
  DPSESSION_DIRECTPLAYPROTOCOL = 0x00002000,
  DPSESSION_NOPRESERVEORDER = 0x00004000,
  DPSESSION_OPTIMIZELATENCY = 0x00008000,
}

enum CONST_DPLCONNECTIONFLAGS {
  DPLCONNECTION_CREATESESSION = 0x00000002,
  DPLCONNECTION_JOINSESSION = 0x00000001,
}

enum CONST_DPSYSMSGTYPES {
  DPSYS_CREATEPLAYERORGROUP = 0x00000003,
  DPSYS_DESTROYPLAYERORGROUP = 0x00000005,
  DPSYS_ADDPLAYERTOGROUP = 0x00000007,
  DPSYS_DELETEPLAYERFROMGROUP = 0x00000021,
  DPSYS_SESSIONLOST = 0x00000031,
  DPSYS_HOST = 0x00000101,
  DPSYS_SETPLAYERORGROUPDATA = 0x00000102,
  DPSYS_SETPLAYERORGROUPNAME = 0x00000103,
  DPSYS_SETSESSIONDESC = 0x00000104,
  DPSYS_ADDGROUPTOGROUP = 0x00000105,
  DPSYS_DELETEGROUPFROMGROUP = 0x00000106,
  DPSYS_SECUREMESSAGE = 0x00000107,
  DPSYS_STARTSESSION = 0x00000108,
  DPSYS_CHAT = 0x00000109,
  DPSYS_SETGROUPOWNER = 0x0000010A,
  DPSYS_SENDCOMPLETE = 0x0000010D,
  DPLSYS_CONNECTIONSETTINGSREAD = 0x00000001,
  DPLSYS_DPLAYCONNECTFAILED = 0x00000002,
  DPLSYS_DPLAYCONNECTSUCCEEDED = 0x00000003,
  DPLSYS_APPTERMINATED = 0x00000004,
  DPLSYS_SETPROPERTY = 0x00000005,
  DPLSYS_SETPROPERTYRESPONSE = 0x00000006,
  DPLSYS_GETPROPERTY = 0x00000007,
  DPLSYS_GETPROPERTYRESPONSE = 0x00000008,
  DPLSYS_NEWCONNECTIONSETTINGS = 0x0000000A,
  DPLSYS_NEWSESSIONHOST = 0x00000009,
}

enum CONST_DPPLAYERTYPEFLAGS {
  DPPLAYERTYPE_GROUP = 0x00000000,
  DPPLAYERTYPE_PLAYER = 0x00000001,
}

enum CONST_D3DSTENCILCAPSFLAGS {
  D3DSTENCILCAPS_KEEP = 0x00000001,
  D3DSTENCILCAPS_ZERO = 0x00000002,
  D3DSTENCILCAPS_REPLACE = 0x00000004,
  D3DSTENCILCAPS_INCRSAT = 0x00000008,
  D3DSTENCILCAPS_DECRSAT = 0x00000010,
  D3DSTENCILCAPS_INVERT = 0x00000020,
  D3DSTENCILCAPS_INCR = 0x00000040,
  D3DSTENCILCAPS_DECR = 0x00000080,
}

enum CONST_WAVEFORMATFLAGS {
  WAVE_FORMAT_1M08 = 0x00000001,
  WAVE_FORMAT_1S08 = 0x00000002,
  WAVE_FORMAT_1M16 = 0x00000004,
  WAVE_FORMAT_1S16 = 0x00000008,
  WAVE_FORMAT_2M08 = 0x00000010,
  WAVE_FORMAT_2S08 = 0x00000020,
  WAVE_FORMAT_2M16 = 0x00000040,
  WAVE_FORMAT_2S16 = 0x00000080,
  WAVE_FORMAT_4M08 = 0x00000100,
  WAVE_FORMAT_4S08 = 0x00000200,
  WAVE_FORMAT_4M16 = 0x00000400,
  WAVE_FORMAT_4S16 = 0x00000800,
}

enum CONST_DPCAPSFLAGS {
  DPCAPS_ASYNCCANCELSUPPORTED = 0x00001000,
  DPCAPS_ASYNCCANCELALLSUPPORTED = 0x00002000,
  DPCAPS_SENDTIMEOUTSUPPORTED = 0x00004000,
  DPCAPS_SENDPRIORITYSUPPORTED = 0x00008000,
  DPCAPS_ASYNCSUPPORTED = 0x00010000,
  DPCAPS_ISHOST = 0x00000002,
  DPCAPS_GROUPOPTIMIZED = 0x00000008,
  DPCAPS_KEEPALIVEOPTIMIZED = 0x00000010,
  DPCAPS_GUARANTEEDOPTIMIZED = 0x00000020,
  DPCAPS_GUARANTEEDSUPPORTED = 0x00000040,
  DPCAPS_SIGNINGSUPPORTED = 0x00000080,
  DPCAPS_ENCRYPTIONSUPPORTED = 0x00000100,
}

enum CONST_DSETUPERR {
  DSETUPERR_SUCCESS_RESTART = 0x00000001,
  DSETUPERR_SUCCESS = 0x00000000,
  DSETUPERR_BADWINDOWSVERSION = 0xFFFFFFFF,
  DSETUPERR_SOURCEFILENOTFOUND = 0xFFFFFFFE,
  DSETUPERR_BADSOURCESIZE = 0xFFFFFFFD,
  DSETUPERR_BADSOURCETIME = 0xFFFFFFFC,
  DSETUPERR_NOCOPY = 0xFFFFFFFB,
  DSETUPERR_OUTOFDISKSPACE = 0xFFFFFFFA,
  DSETUPERR_CANTFINDINF = 0xFFFFFFF9,
  DSETUPERR_CANTFINDDIR = 0xFFFFFFF8,
  DSETUPERR_INTERNAL = 0xFFFFFFF7,
  DSETUPERR_NTWITHNO3D = 0xFFFFFFF6,
  DSETUPERR_UNKNOWNOS = 0xFFFFFFF5,
  DSETUPERR_USERHITCANCEL = 0xFFFFFFF4,
  DSETUPERR_NOTPREINSTALLEDONNT = 0xFFFFFFF3,
}

enum CONST_DSOUNDERR {
  DS_OK = 0x00000000,
  DSERR_ALLOCATED = 0x8878000A,
  DSERR_CONTROLUNAVAIL = 0x8878001E,
  DSERR_INVALIDPARAM = 0x80070057,
  DSERR_INVALIDCALL = 0x88780032,
  DSERR_GENERIC = 0x80004005,
  DSERR_PRIOLEVELNEEDED = 0x88780046,
  DSERR_OUTOFMEMORY = 0x00000007,
  DSERR_BADFORMAT = 0x88780064,
  DSERR_UNSUPPORTED = 0x80004001,
  DSERR_NODRIVER = 0x88780078,
  DSERR_ALREADYINITIALIZED = 0x88780082,
  DSERR_BUFFERLOST = 0x88780096,
  DSERR_OTHERAPPHASPRIO = 0x887800A0,
  DSERR_UNINITIALIZED = 0x887800AA,
  DSERR_NOINTERFACE = 0x000001AE,
}

enum CONST_DDRAWERR {
  DD_OK = 0x00000000,
  DDENUMRET_CANCEL = 0x00000000,
  DDENUMRET_OK = 0x00000001,
  DDERR_ALREADYINITIALIZED = 0x88760005,
  DDERR_CANNOTATTACHSURFACE = 0x8876000A,
  DDERR_CANNOTDETACHSURFACE = 0x88760014,
  DDERR_CURRENTLYNOTAVAIL = 0x88760028,
  DDERR_EXCEPTION = 0x88760037,
  DDERR_GENERIC = 0x80004005,
  DDERR_HEIGHTALIGN = 0x8876005A,
  DDERR_INCOMPATIBLEPRIMARY = 0x8876005F,
  DDERR_INVALIDCAPS = 0x88760064,
  DDERR_INVALIDCLIPLIST = 0x8876006E,
  DDERR_INVALIDMODE = 0x88760078,
  DDERR_INVALIDOBJECT = 0x88760082,
  DDERR_INVALIDPARAMS = 0x00000005,
  DDERR_INVALIDPIXELFORMAT = 0x88760091,
  DDERR_INVALIDRECT = 0x88760096,
  DDERR_LOCKEDSURFACES = 0x887600A0,
  DDERR_NO3D = 0x887600AA,
  DDERR_NOALPHAHW = 0x887600B4,
  DDERR_NOCLIPLIST = 0x887600CD,
  DDERR_NOCOLORCONVHW = 0x887600D2,
  DDERR_NOCOOPERATIVELEVELSET = 0x887600D4,
  DDERR_NOCOLORKEY = 0x887600D7,
  DDERR_NOCOLORKEYHW = 0x887600DC,
  DDERR_NODIRECTDRAWSUPPORT = 0x887600DE,
  DDERR_NOEXCLUSIVEMODE = 0x887600E1,
  DDERR_NOFLIPHW = 0x887600E6,
  DDERR_NOGDI = 0x887600F0,
  DDERR_NOMIRRORHW = 0x887600FA,
  DDERR_NOTFOUND = 0x887600FF,
  DDERR_NOOVERLAYHW = 0x88760104,
  DDERR_OVERLAPPINGRECTS = 0x8876010E,
  DDERR_NORASTEROPHW = 0x88760118,
  DDERR_NOROTATIONHW = 0x88760122,
  DDERR_NOSTRETCHHW = 0x88760136,
  DDERR_NOT4BITCOLOR = 0x8876013C,
  DDERR_NOT4BITCOLORINDEX = 0x8876013D,
  DDERR_NOT8BITCOLOR = 0x88760140,
  DDERR_NOTEXTUREHW = 0x8876014A,
  DDERR_NOVSYNCHW = 0x8876014F,
  DDERR_NOZBUFFERHW = 0x88760154,
  DDERR_NOZOVERLAYHW = 0x8876015E,
  DDERR_OUTOFCAPS = 0x88760168,
  DDERR_OUTOFMEMORY = 0x00000007,
  DDERR_OUTOFVIDEOMEMORY = 0x8876017C,
  DDERR_OVERLAYCANTCLIP = 0x8876017E,
  DDERR_OVERLAYCOLORKEYONLYONEACTIVE = 0x88760180,
  DDERR_PALETTEBUSY = 0x88760183,
  DDERR_COLORKEYNOTSET = 0x88760190,
  DDERR_SURFACEALREADYATTACHED = 0x8876019A,
  DDERR_SURFACEALREADYDEPENDENT = 0x887601A4,
  DDERR_SURFACEBUSY = 0x887601AE,
  DDERR_CANTLOCKSURFACE = 0x887601B3,
  DDERR_SURFACEISOBSCURED = 0x887601B8,
  DDERR_SURFACELOST = 0x887601C2,
  DDERR_SURFACENOTATTACHED = 0x887601CC,
  DDERR_TOOBIGHEIGHT = 0x887601D6,
  DDERR_TOOBIGSIZE = 0x887601E0,
  DDERR_TOOBIGWIDTH = 0x887601EA,
  DDERR_UNSUPPORTED = 0x80004001,
  DDERR_UNSUPPORTEDFORMAT = 0x887601FE,
  DDERR_UNSUPPORTEDMASK = 0x88760208,
  DDERR_INVALIDSTREAM = 0x88760209,
  DDERR_VERTICALBLANKINPROGRESS = 0x88760219,
  DDERR_WASSTILLDRAWING = 0x8876021C,
  DDERR_XALIGN = 0x88760230,
  DDERR_INVALIDDIRECTDRAWGUID = 0x88760231,
  DDERR_DIRECTDRAWALREADYCREATED = 0x88760232,
  DDERR_NODIRECTDRAWHW = 0x88760233,
  DDERR_PRIMARYSURFACEALREADYEXISTS = 0x88760234,
  DDERR_NOEMULATION = 0x88760235,
  DDERR_REGIONTOOSMALL = 0x88760236,
  DDERR_CLIPPERISUSINGHWND = 0x88760237,
  DDERR_NOCLIPPERATTACHED = 0x88760238,
  DDERR_NOHWND = 0x88760239,
  DDERR_HWNDSUBCLASSED = 0x8876023A,
  DDERR_HWNDALREADYSET = 0x8876023B,
  DDERR_NOPALETTEATTACHED = 0x8876023C,
  DDERR_NOPALETTEHW = 0x8876023D,
  DDERR_BLTFASTCANTCLIP = 0x8876023E,
  DDERR_NOBLTHW = 0x8876023F,
  DDERR_NODDROPSHW = 0x88760240,
  DDERR_OVERLAYNOTVISIBLE = 0x88760241,
  DDERR_NOOVERLAYDEST = 0x88760242,
  DDERR_INVALIDPOSITION = 0x88760243,
  DDERR_NOTAOVERLAYSURFACE = 0x88760244,
  DDERR_EXCLUSIVEMODEALREADYSET = 0x88760245,
  DDERR_NOTFLIPPABLE = 0x88760246,
  DDERR_CANTDUPLICATE = 0x88760247,
  DDERR_NOTLOCKED = 0x88760248,
  DDERR_CANTCREATEDC = 0x88760249,
  DDERR_NODC = 0x8876024A,
  DDERR_WRONGMODE = 0x8876024B,
  DDERR_IMPLICITLYCREATED = 0x8876024C,
  DDERR_NOTPALETTIZED = 0x8876024D,
  DDERR_UNSUPPORTEDMODE = 0x8876024E,
  DDERR_NOMIPMAPHW = 0x8876024F,
  DDERR_INVALIDSURFACETYPE = 0x88760250,
  DDERR_NOOPTIMIZEHW = 0x88760258,
  DDERR_NOTLOADED = 0x88760259,
  DDERR_NOFOCUSWINDOW = 0x8876025A,
  DDERR_DCALREADYCREATED = 0x8876026C,
  DDERR_NONONLOCALVIDMEM = 0x88760276,
  DDERR_CANTPAGELOCK = 0x88760280,
  DDERR_CANTPAGEUNLOCK = 0x88760294,
  DDERR_NOTPAGELOCKED = 0x887602A8,
  DDERR_MOREDATA = 0x887602B2,
  DDERR_EXPIRED = 0x887602B3,
  DDERR_VIDEONOTACTIVE = 0x887602B7,
  DDERR_DEVICEDOESNTOWNSURFACE = 0x887602BB,
  DDERR_NOTINITIALIZED = 0x800401F0,
  DDERR_NOSTEREOHARDWARE = 0x887600B5,
  DDERR_NOSURFACELEFT = 0x887600B6,
}

enum CONST_D3DIMERR {
  D3D_OK = 0x00000000,
  D3DERR_BADMAJORVERSION = 0x887602BC,
  D3DERR_BADMINORVERSION = 0x887602BD,
  D3DERR_INVALID_DEVICE = 0x887602C1,
  D3DERR_INITFAILED = 0x887602C2,
  D3DERR_DEVICEAGGREGATED = 0x887602C3,
  D3DERR_TEXTURE_NO_SUPPORT = 0x887602D0,
  D3DERR_TEXTURE_CREATE_FAILED = 0x887602D1,
  D3DERR_TEXTURE_DESTROY_FAILED = 0x887602D2,
  D3DERR_TEXTURE_LOCK_FAILED = 0x887602D3,
  D3DERR_TEXTURE_UNLOCK_FAILED = 0x887602D4,
  D3DERR_TEXTURE_LOAD_FAILED = 0x887602D5,
  D3DERR_TEXTURE_SWAP_FAILED = 0x887602D6,
  D3DERR_TEXTURE_LOCKED = 0x887602D7,
  D3DERR_TEXTURE_NOT_LOCKED = 0x887602D8,
  D3DERR_TEXTURE_GETSURF_FAILED = 0x887602D9,
  D3DERR_MATRIX_CREATE_FAILED = 0x887602DA,
  D3DERR_MATRIX_DESTROY_FAILED = 0x887602DB,
  D3DERR_MATRIX_SETDATA_FAILED = 0x887602DC,
  D3DERR_MATRIX_GETDATA_FAILED = 0x887602DD,
  D3DERR_SETVIEWPORTDATA_FAILED = 0x887602DE,
  D3DERR_INVALIDCURRENTVIEWPORT = 0x887602DF,
  D3DERR_INVALIDPRIMITIVETYPE = 0x887602E0,
  D3DERR_INVALIDVERTEXTYPE = 0x887602E1,
  D3DERR_TEXTURE_BADSIZE = 0x887602E2,
  D3DERR_INVALIDRAMPTEXTURE = 0x887602E3,
  D3DERR_MATERIAL_CREATE_FAILED = 0x887602E4,
  D3DERR_MATERIAL_DESTROY_FAILED = 0x887602E5,
  D3DERR_MATERIAL_SETDATA_FAILED = 0x887602E6,
  D3DERR_MATERIAL_GETDATA_FAILED = 0x887602E7,
  D3DERR_INVALIDPALETTE = 0x887602E8,
  D3DERR_ZBUFF_NEEDS_SYSTEMMEMORY = 0x887602E9,
  D3DERR_ZBUFF_NEEDS_VIDEOMEMORY = 0x887602EA,
  D3DERR_SURFACENOTINVIDMEM = 0x887602EB,
  D3DERR_LIGHT_SET_FAILED = 0x887602EE,
  D3DERR_LIGHTHASVIEWPORT = 0x887602EF,
  D3DERR_LIGHTNOTINTHISVIEWPORT = 0x887602F0,
  D3DERR_SCENE_IN_SCENE = 0x887602F8,
  D3DERR_SCENE_NOT_IN_SCENE = 0x887602F9,
  D3DERR_SCENE_BEGIN_FAILED = 0x887602FA,
  D3DERR_SCENE_END_FAILED = 0x887602FB,
  D3DERR_INBEGIN = 0x88760302,
  D3DERR_NOTINBEGIN = 0x88760303,
  D3DERR_NOVIEWPORTS = 0x88760304,
  D3DERR_VIEWPORTDATANOTSET = 0x88760305,
  D3DERR_VIEWPORTHASNODEVICE = 0x88760306,
  D3DERR_NOCURRENTVIEWPORT = 0x88760307,
  D3DERR_INVALIDVERTEXFORMAT = 0x88760800,
  D3DERR_COLORKEYATTACHED = 0x88760802,
  D3DERR_VERTEXBUFFEROPTIMIZED = 0x8876080C,
  D3DERR_VBUF_CREATE_FAILED = 0x8876080D,
  D3DERR_VERTEXBUFFERLOCKED = 0x8876080E,
  D3DERR_ZBUFFER_NOTPRESENT = 0x88760816,
  D3DERR_STENCILBUFFER_NOTPRESENT = 0x88760817,
  D3DERR_WRONGTEXTUREFORMAT = 0x88760818,
  D3DERR_UNSUPPORTEDCOLOROPERATION = 0x88760819,
  D3DERR_UNSUPPORTEDCOLORARG = 0x8876081A,
  D3DERR_UNSUPPORTEDALPHAOPERATION = 0x8876081B,
  D3DERR_UNSUPPORTEDALPHAARG = 0x8876081C,
  D3DERR_TOOMANYOPERATIONS = 0x8876081D,
  D3DERR_CONFLICTINGTEXTUREFILTER = 0x8876081E,
  D3DERR_UNSUPPORTEDFACTORVALUE = 0x8876081F,
  D3DERR_CONFLICTINGRENDERSTATE = 0x88760821,
  D3DERR_UNSUPPORTEDTEXTUREFILTER = 0x88760822,
  D3DERR_TOOMANYPRIMITIVES = 0x88760823,
  D3DERR_INVALIDMATRIX = 0x88760824,
  D3DERR_TOOMANYVERTICES = 0x88760825,
  D3DERR_CONFLICTINGTEXTUREPALETTE = 0x88760826,
  D3DERR_INVALIDSTATEBLOCK = 0x88760834,
  D3DERR_INBEGINSTATEBLOCK = 0x88760835,
  D3DERR_NOTINBEGINSTATEBLOCK = 0x88760836,
  D3DERR_VERTEXBUFFERUNLOCKFAILED = 0x8876080F,
}

enum CONST_DPLAYERR {
  DP_OK = 0x00000000,
  DPERR_ALREADYINITIALIZED = 0x88770005,
  DPERR_ACCESSDENIED = 0x8877000A,
  DPERR_ACTIVEPLAYERS = 0x88770014,
  DPERR_BUFFERTOOSMALL = 0x8877001E,
  DPERR_CANTADDPLAYER = 0x88770028,
  DPERR_CANTCREATEGROUP = 0x88770032,
  DPERR_CANTCREATEPLAYER = 0x8877003C,
  DPERR_CANTCREATESESSION = 0x88770046,
  DPERR_CAPSNOTAVAILABLEYET = 0x88770050,
  DPERR_EXCEPTION = 0x8877005A,
  DPERR_GENERIC = 0x80004005,
  DPERR_INVALIDFLAGS = 0x88770078,
  DPERR_INVALIDOBJECT = 0x88770082,
  DPERR_INVALIDPARAM = 0x80070057,
  DPERR_INVALIDPARAMS = 0x80070057,
  DPERR_INVALIDPLAYER = 0x88770096,
  DPERR_INVALIDGROUP = 0x8877009B,
  DPERR_NOCAPS = 0x887700A0,
  DPERR_NOCONNECTION = 0x887700AA,
  DPERR_OUTOFMEMORY = 0x00000007,
  DPERR_NOMESSAGES = 0x887700BE,
  DPERR_NONAMESERVERFOUND = 0x887700C8,
  DPERR_NOPLAYERS = 0x887700D2,
  DPERR_NOSESSIONS = 0x887700DC,
  DPERR_PENDING = 0x80070007,
  DPERR_SENDTOOBIG = 0x887700E6,
  DPERR_TIMEOUT = 0x887700F0,
  DPERR_UNAVAILABLE = 0x887700FA,
  DPERR_UNSUPPORTED = 0x000001BD,
  DPERR_BUSY = 0x8877010E,
  DPERR_USERCANCEL = 0x88770118,
  DPERR_NOINTERFACE = 0x000001AE,
  DPERR_CANNOTCREATESERVER = 0x88770122,
  DPERR_PLAYERLOST = 0x8877012C,
  DPERR_SESSIONLOST = 0x88770136,
  DPERR_UNINITIALIZED = 0x88770140,
  DPERR_NONEWPLAYERS = 0x8877014A,
  DPERR_INVALIDPASSWORD = 0x88770154,
  DPERR_CONNECTING = 0x8877015E,
  DPERR_CONNECTIONLOST = 0x88770168,
  DPERR_UNKNOWNMESSAGE = 0x88770172,
  DPERR_CANCELFAILED = 0x8877017C,
  DPERR_INVALIDPRIORITY = 0x88770186,
  DPERR_CANCELLED = 0x8877019A,
  DPERR_ABORTED = 0x887701A4,
  DPERR_BUFFERTOOLARGE = 0x887703E8,
  DPERR_CANTCREATEPROCESS = 0x887703F2,
  DPERR_APPNOTSTARTED = 0x887703FC,
  DPERR_INVALIDINTERFACE = 0x88770406,
  DPERR_UNKNOWNAPPLICATION = 0x8877041A,
  DPERR_NOTLOBBIED = 0x8877042E,
  DPERR_AUTHENTICATIONFAILED = 0x887707D0,
  DPERR_CANTLOADSSPI = 0x887707DA,
  DPERR_ENCRYPTIONFAILED = 0x887707E4,
  DPERR_SIGNFAILED = 0x887707EE,
  DPERR_CANTLOADSECURITYPACKAGE = 0x887707F8,
  DPERR_ENCRYPTIONNOTSUPPORTED = 0x88770802,
  DPERR_CANTLOADCAPI = 0x8877080C,
  DPERR_NOTLOGGEDIN = 0x88770816,
  DPERR_LOGONDENIED = 0x88770820,
}

enum CONST_DINPUTERR {
  DI_OK = 0x00000000,
  DI_BUFFEROVERFLOW = 0x80040260,
  DIERR_INVALIDHANDLE = 0x80070006,
  DIERR_OLDDIRECTINPUTVERSION = 0x8007047E,
  DIERR_BETADIRECTINPUTVERSION = 0x80070481,
  DIERR_BADDRIVERVER = 0x80070077,
  DIERR_DEVICENOTREG = 0x80040154,
  DIERR_NOTFOUND = 0x80070002,
  DIERR_OBJECTNOTFOUND = 0x80070002,
  DIERR_INVALIDPARAM = 0x00000005,
  DIERR_NOINTERFACE = 0x000001AE,
  DIERR_GENERIC = 0x80004005,
  DIERR_OUTOFMEMORY = 0x00000007,
  DIERR_UNSUPPORTED = 0x000001BD,
  DIERR_NOTINITIALIZED = 0x80070015,
  DIERR_ALREADYINITIALIZED = 0x800704DF,
  DIERR_INPUTLOST = 0x8007001E,
  DIERR_ACQUIRED = 0x800700AA,
  DIERR_NOTACQUIRED = 0x8007000C,
  DIERR_NOAGGREGATION = 0x80004002,
  DIERR_OTHERAPPHASPRIO = 0x80070005,
  DIERR_READONLY = 0x80070005,
  DIERR_HANDLEEXISTS = 0x80070005,
  E_PENDING = 0x80070007,
  DIERR_INSUFFICIENTPRIVS = 0x80040200,
  DIERR_DEVICEFULL = 0x80040201,
  DIERR_MOREDATA = 0x80040202,
  DIERR_NOTDOWNLOADED = 0x80040203,
  DIERR_HASEFFECTS = 0x80040204,
  DIERR_NOTEXCLUSIVEACQUIRED = 0x80040205,
  DIERR_INCOMPLETEEFFECT = 0x80040206,
  DIERR_NOTBUFFERED = 0x80040207,
  DIERR_EFFECTPLAYING = 0x80040208,
}

enum CONST_D3DRMERR {
  D3DRM_OK = 0x00000000,
  D3DRMERR_BADOBJECT = 0x8876030D,
  D3DRMERR_BADTYPE = 0x8876030E,
  D3DRMERR_BADALLOC = 0x8876030F,
  D3DRMERR_FACEUSED = 0x88760310,
  D3DRMERR_NOTFOUND = 0x88760311,
  D3DRMERR_NOTDONEYET = 0x88760312,
  D3DRMERR_FILENOTFOUND = 0x88760313,
  D3DRMERR_BADFILE = 0x88760314,
  D3DRMERR_BADDEVICE = 0x88760315,
  D3DRMERR_BADVALUE = 0x88760316,
  D3DRMERR_BADMAJORVERSION = 0x88760317,
  D3DRMERR_BADMINORVERSION = 0x88760318,
  D3DRMERR_UNABLETOEXECUTE = 0x88760319,
  D3DRMERR_LIBRARYNOTFOUND = 0x8876031A,
  D3DRMERR_INVALIDLIBRARY = 0x8876031B,
  D3DRMERR_PENDING = 0x8876031C,
  D3DRMERR_NOTENOUGHDATA = 0x8876031D,
  D3DRMERR_REQUESTTOOLARGE = 0x8876031E,
  D3DRMERR_REQUESTTOOSMALL = 0x8876031F,
  D3DRMERR_CONNECTIONLOST = 0x88760320,
  D3DRMERR_LOADABORTED = 0x88760321,
  D3DRMERR_NOINTERNET = 0x88760322,
  D3DRMERR_BADCACHEFILE = 0x88760323,
  D3DRMERR_BOXNOTSET = 0x88760324,
  D3DRMERR_BADPMDATA = 0x88760325,
  D3DRMERR_CLIENTNOTREGISTERED = 0x88760326,
  D3DRMERR_NOTCREATEDFROMDDS = 0x88760327,
  D3DRMERR_NOSUCHKEY = 0x88760328,
  D3DRMERR_INCOMPATABLEKEY = 0x88760329,
  D3DRMERR_ELEMENTINUSE = 0x8876032A,
  D3DRMERR_TEXTUREFORMATNOTFOUND = 0x8876032B,
  D3DRMERR_NOTAGGREGATED = 0x8876032C,
}

enum CONST_DICOMMONDATAFORMATS {
  DIFORMAT_KEYBOARD = 0x00000001,
  DIFORMAT_MOUSE = 0x00000002,
  DIFORMAT_JOYSTICK = 0x00000003,
  DIFORMAT_JOYSTICK2 = 0x00000004,
}

enum CONST_D3DVERTEXCOMPONENT {
  D3DVERTCOMP_POSITION = 0x00000001,
  D3DVERTCOMP_NORMAL = 0x00000002,
  D3DVERTCOMP_DIFFUSE = 0x00000003,
  D3DVERTCOMP_SPECULAR = 0x00000004,
  D3DVERTCOMP_TEXTURE1 = 0x00000005,
  D3DVERTCOMP_TEXTURE2 = 0x00000006,
  D3DVERTCOMP_TEXTURE3 = 0x00000007,
  D3DVERTCOMP_TEXTURE4 = 0x00000008,
  D3DVERTCOMP_TEXTURE5 = 0x00000009,
  D3DVERTCOMP_TEXTURE6 = 0x0000000A,
  D3DVERTCOMP_TEXTURE7 = 0x0000000B,
  D3DVERTCOMP_TEXTURE8 = 0x0000000C,
}

enum CONST_D3DMATERIALCOLORSOURCE {
  D3DMCS_MATERIAL = 0x00000000,
  D3DMCS_COLOR1 = 0x00000001,
  D3DMCS_COLOR2 = 0x00000002,
}

enum CONST_DMUS {
  DMUS_MAXSUBCHORD = 0x00000008,
  DMUS_TEMPO_MAX = 0x0000015E,
  DMUS_TEMPO_MIN = 0x0000000A,
}

enum CONST_DMUS_CURVES {
  DMUS_CURVES_LINEAR = 0x00000000,
  DMUS_CURVES_INSTANT = 0x00000001,
  DMUS_CURVES_EXP = 0x00000002,
  DMUS_CURVES_LOG = 0x00000003,
  DMUS_CURVES_SINE = 0x00000004,
}

enum CONST_DMUS_CURVET {
  DMUS_CURVET_PBCURVE = 0x00000003,
  DMUS_CURVET_CCCURVE = 0x00000004,
  DMUS_CURVET_MATCURVE = 0x00000005,
  DMUS_CURVET_PATCURVE = 0x00000006,
}

enum CONST_DMUS_NOTIFICATION_SUBTYPE {
  DMUS_NOTIFICATION_MUSICSTARTED = 0x00000000,
  DMUS_NOTIFICATION_MUSICSTOPPED = 0x00000001,
  DMUS_NOTIFICATION_MEASUREBEAT = 0x00000000,
  DMUS_NOTIFICATION_CHORD = 0x00000000,
  DMUS_NOTIFICATION_GROOVE = 0x00000000,
  DMUS_NOTIFICATION_EMBELLISHMENT = 0x00000001,
  DMUS_NOTIFICATION_SEGSTART = 0x00000000,
  DMUS_NOTIFICATION_SEGEND = 0x00000001,
  DMUS_NOTIFICATION_SEGALMOSTEND = 0x00000002,
  DMUS_NOTIFICATION_SEGLOOP = 0x00000003,
  DMUS_NOTIFICATION_SEGABORT = 0x00000004,
}

enum CONST_DMUS_COMMANDT_TYPES {
  DMUS_COMMANDT_GROOVE = 0x00000000,
  DMUS_COMMANDT_FILL = 0x00000001,
  DMUS_COMMANDT_INTRO = 0x00000002,
  DMUS_COMMANDT_BREAK = 0x00000003,
  DMUS_COMMANDT_END = 0x00000004,
  DMUS_COMMANDT_ENDANDINTRO = 0x00000005,
}

enum CONST_DMUS_SHAPET_TYPES {
  DMUS_SHAPET_FALLING = 0x00000000,
  DMUS_SHAPET_LEVEL = 0x00000001,
  DMUS_SHAPET_LOOPABLE = 0x00000002,
  DMUS_SHAPET_LOUD = 0x00000003,
  DMUS_SHAPET_QUIET = 0x00000004,
  DMUS_SHAPET_PEAKING = 0x00000005,
  DMUS_SHAPET_RANDOM = 0x00000006,
  DMUS_SHAPET_RISING = 0x00000007,
  DMUS_SHAPET_SONG = 0x00000008,
}

enum CONST_DMUS_COMPOSEF_FLAGS {
  DMUS_COMPOSEF_NONE = 0x00000000,
  DMUS_COMPOSEF_ALIGN = 0x00000001,
  DMUS_COMPOSEF_OVERLAP = 0x00000002,
  DMUS_COMPOSEF_IMMEDIATE = 0x00000004,
  DMUS_COMPOSEF_GRID = 0x00000008,
  DMUS_COMPOSEF_BEAT = 0x00000010,
  DMUS_COMPOSEF_MEASURE = 0x00000020,
  DMUS_COMPOSEF_AFTERPREPARETIME = 0x00000040,
  DMUS_COMPOSEF_MODULATE = 0x00001000,
  DMUS_COMPOSEF_LONG = 0x00002000,
}

enum CONST_DMUS_PMSGF_FLAGS {
  DMUS_PMSGF_REFTIME = 0x00000001,
  DMUS_PMSGF_MUSICTIME = 0x00000002,
  DMUS_PMSGF_TOOL_IMMEDIATE = 0x00000004,
  DMUS_PMSGF_TOOL_QUEUE = 0x00000008,
  DMUS_PMSGF_TOOL_ATTIME = 0x00000010,
  DMUS_PMSGF_TOOL_FLUSH = 0x00000020,
}

enum CONST_DMUS_SEGF_FLAGS {
  DMUS_SEGF_REFTIME = 0x00000040,
  DMUS_SEGF_SECONDARY = 0x00000080,
  DMUS_SEGF_QUEUE = 0x00000100,
  DMUS_SEGF_CONTROL = 0x00000200,
  DMUS_SEGF_AFTERPREPARETIME = 0x00000400,
  DMUS_SEGF_GRID = 0x00000800,
  DMUS_SEGF_BEAT = 0x00001000,
  DMUS_SEGF_MEASURE = 0x00002000,
  DMUS_SEGF_DEFAULT = 0x00004000,
  DMUS_SEGF_NOINVALIDATE = 0x00008000,
}

enum CONST_DMUS_NOTEF_FLAGS {
  DMUS_NOTEF_NOTEON = 0x00000001,
}

enum CONST_DMUS_PLAYMODE_FLAGS {
  DMUS_PLAYMODE_KEY_ROOT = 0x00000001,
  DMUS_PLAYMODE_CHORD_ROOT = 0x00000002,
  DMUS_PLAYMODE_SCALE_INTERVALS = 0x00000004,
  DMUS_PLAYMODE_CHORD_INTERVALS = 0x00000008,
  DMUS_PLAYMODE_NONE = 0x00000010,
  DMUS_PLAYMODE_FIXED = 0x00000000,
  DMUS_PLAYMODE_FIXEDTOKEY = 0x00000001,
  DMUS_PLAYMODE_FIXEDTOCHORD = 0x00000002,
  DMUS_PLAYMODE_PEDALPOINT = 0x00000005,
  DMUS_PLAYMODE_MELODIC = 0x00000006,
  DMUS_PLAYMODE_NORMALCHORD = 0x0000000A,
  DMUS_PLAYMODE_ALWAYSPLAY = 0x0000000E,
}

enum CONST_DMUS_CURVE_FLAGS {
  DMUS_CURVE_RESET = 0x00000001,
}

enum CONST_DMUSERR {
  DMUS_E_DRIVER_FAILED = 0x88781101,
  DMUS_E_PORTS_OPEN = 0x88781102,
  DMUS_E_DEVICE_IN_USE = 0x88781103,
  DMUS_E_INSUFFICIENTBUFFER = 0x88781104,
  DMUS_E_BUFFERNOTSET = 0x88781105,
  DMUS_E_BUFFERNOTAVAILABLE = 0x88781106,
  DMUS_E_NOTADLSCOL = 0x88781108,
  DMUS_E_INVALIDOFFSET = 0x88781109,
  DMUS_E_ALREADY_LOADED = 0x88781111,
  DMUS_E_INVALIDPOS = 0x88781113,
  DMUS_E_INVALIDPATCH = 0x88781114,
  DMUS_E_CANNOTSEEK = 0x88781115,
  DMUS_E_CANNOTWRITE = 0x88781116,
  DMUS_E_CHUNKNOTFOUND = 0x88781117,
  DMUS_E_INVALID_DOWNLOADID = 0x88781119,
  DMUS_E_NOT_DOWNLOADED_TO_PORT = 0x88781120,
  DMUS_E_ALREADY_DOWNLOADED = 0x88781121,
  DMUS_E_UNKNOWN_PROPERTY = 0x88781122,
  DMUS_E_SET_UNSUPPORTED = 0x88781123,
  DMUS_E_GET_UNSUPPORTED = 0x88781124,
  DMUS_E_NOTMONO = 0x88781125,
  DMUS_E_BADARTICULATION = 0x88781126,
  DMUS_E_BADINSTRUMENT = 0x88781127,
  DMUS_E_BADWAVELINK = 0x88781128,
  DMUS_E_NOARTICULATION = 0x88781129,
  DMUS_E_NOTPCM = 0x8878112A,
  DMUS_E_BADWAVE = 0x8878112B,
  DMUS_E_BADOFFSETTABLE = 0x8878112C,
  DMUS_E_UNKNOWNDOWNLOAD = 0x8878112D,
  DMUS_E_NOSYNTHSINK = 0x8878112E,
  DMUS_E_ALREADYOPEN = 0x8878112F,
  DMUS_E_ALREADYCLOSED = 0x88781130,
  DMUS_E_SYNTHNOTCONFIGURED = 0x88781131,
  DMUS_E_SYNTHACTIVE = 0x88781132,
  DMUS_E_CANNOTREAD = 0x88781133,
  DMUS_E_DMUSIC_RELEASED = 0x88781134,
  DMUS_E_BUFFER_EMPTY = 0x88781135,
  DMUS_E_BUFFER_FULL = 0x88781136,
  DMUS_E_PORT_NOT_CAPTURE = 0x88781137,
  DMUS_E_PORT_NOT_RENDER = 0x88781138,
  DMUS_E_DSOUND_NOT_SET = 0x88781139,
  DMUS_E_ALREADY_ACTIVATED = 0x8878113A,
  DMUS_E_INVALIDBUFFER = 0x8878113B,
  DMUS_E_WAVEFORMATNOTSUPPORTED = 0x8878113C,
  DMUS_E_SYNTHINACTIVE = 0x8878113D,
  DMUS_E_DSOUND_ALREADY_SET = 0x8878113E,
  DMUS_E_INVALID_EVENT = 0x8878113F,
  DMUS_E_UNSUPPORTED_STREAM = 0x88781150,
  DMUS_E_ALREADY_INITED = 0x88781151,
  DMUS_E_INVALID_BAND = 0x88781152,
  DMUS_E_TRACK_HDR_NOT_FIRST_CK = 0x88781155,
  DMUS_E_TOOL_HDR_NOT_FIRST_CK = 0x88781156,
  DMUS_E_INVALID_TRACK_HDR = 0x88781157,
  DMUS_E_INVALID_TOOL_HDR = 0x88781158,
  DMUS_E_ALL_TOOLS_FAILED = 0x88781159,
  DMUS_E_ALL_TRACKS_FAILED = 0x88781160,
  DMUS_E_NOT_FOUND = 0x88781161,
  DMUS_E_NOT_INIT = 0x88781162,
  DMUS_E_TYPE_DISABLED = 0x88781163,
  DMUS_E_TYPE_UNSUPPORTED = 0x88781164,
  DMUS_E_TIME_PAST = 0x88781165,
  DMUS_E_TRACK_NOT_FOUND = 0x88781166,
  DMUS_E_NO_MASTER_CLOCK = 0x88781170,
  DMUS_E_LOADER_NOCLASSID = 0x88781180,
  DMUS_E_LOADER_BADPATH = 0x88781181,
  DMUS_E_LOADER_FAILEDOPEN = 0x88781182,
  DMUS_E_LOADER_FORMATNOTSUPPORTED = 0x88781183,
  DMUS_E_LOADER_FAILEDCREATE = 0x88781184,
  DMUS_E_LOADER_OBJECTNOTFOUND = 0x88781185,
  DMUS_E_LOADER_NOFILENAME = 0x88781186,
  DMUS_E_INVALIDFILE = 0x88781200,
  DMUS_E_ALREADY_EXISTS = 0x88781201,
  DMUS_E_OUT_OF_RANGE = 0x88781202,
  DMUS_E_SEGMENT_INIT_FAILED = 0x88781203,
  DMUS_E_ALREADY_SENT = 0x88781204,
  DMUS_E_CANNOT_FREE = 0x88781205,
  DMUS_E_CANNOT_OPEN_PORT = 0x88781206,
  DMUS_E_CONNOT_CONVERT = 0x88781207,
  DMUS_E_DESCEND_CHUNK_FAIL = 0x88781210,
  DMUS_E_FAIL = 0x80070057,
  DMUS_E_INVALIDARG = 0x00000005,
  DMUS_E_NOINTERFACE = 0x000001AE,
  DMUS_E_OUTOFMEMORY = 0x00000007,
  DMUS_E_NOTIMPL = 0x000001BD,
}

enum CONST_DMUS_PC_CLASS {
  DMUS_PC_INPUTCLASS = 0x00000000,
  DMUS_PC_OUTPUTCLASS = 0x00000001,
}

enum CONST_DMUS_PC_FLAGS {
  DMUS_PC_DLS = 0x00000001,
  DMUS_PC_EXTERNAL = 0x00000002,
  DMUS_PC_SOFTWARESYNTH = 0x00000004,
  DMUS_PC_MEMORYSIZEFIXED = 0x00000008,
  DMUS_PC_GMINHARDWARE = 0x00000010,
  DMUS_PC_GSINHARDWARE = 0x00000020,
  DMUS_PC_XGINHARDWARE = 0x00000040,
  DMUS_PC_DIRECTSOUND = 0x00000080,
  DMUS_PC_SHAREABLE = 0x00000100,
  DMUS_PC_SYSTEMMEMORY = 0x7FFFFFFF,
}

enum CONST_DMUS_PORT_TYPE {
  DMUS_PORT_WINMM_DRIVER = 0x00000000,
  DMUS_PORT_USER_MODE_SYNTH = 0x00000001,
  DMUS_PORT_KERNEL_MODE = 0x00000002,
}

enum CONST_DMUS_PORTPARAMS_FLAGS {
  DMUS_PORTPARAMS_VOICES = 0x00000001,
  DMUS_PORTPARAMS_CHANNELGROUPS = 0x00000002,
  DMUS_PORTPARAMS_AUDIOCHANNELS = 0x00000004,
  DMUS_PORTPARAMS_SAMPLERATE = 0x00000008,
  DMUS_PORTPARAMS_EFFECTS = 0x00000020,
  DMUS_PORTPARAMS_SHARE = 0x00000040,
}

enum CONST_DIMOUSEOFS {
  DIMOFS_X = 0x00000000,
  DIMOFS_Y = 0x00000004,
  DIMOFS_Z = 0x00000008,
  DIMOFS_BUTTON0 = 0x0000000C,
  DIMOFS_BUTTON1 = 0x0000000D,
  DIMOFS_BUTTON2 = 0x0000000E,
  DIMOFS_BUTTON3 = 0x0000000F,
}

enum CONST_DIJOYSTICKOFS {
  DIJOFS_X = 0x00000000,
  DIJOFS_Y = 0x00000004,
  DIJOFS_Z = 0x00000008,
  DIJOFS_RX = 0x0000000C,
  DIJOFS_RY = 0x00000010,
  DIJOFS_RZ = 0x00000014,
  DIJOFS_SLIDER0 = 0x00000018,
  DIJOFS_SLIDER1 = 0x0000001C,
  DIJOFS_POV0 = 0x00000020,
  DIJOFS_POV1 = 0x00000024,
  DIJOFS_POV2 = 0x00000028,
  DIJOFS_POV3 = 0x0000002C,
  DIJOFS_BUTTON0 = 0x00000030,
  DIJOFS_BUTTON1 = 0x00000031,
  DIJOFS_BUTTON2 = 0x00000032,
  DIJOFS_BUTTON3 = 0x00000033,
  DIJOFS_BUTTON4 = 0x00000034,
  DIJOFS_BUTTON5 = 0x00000035,
  DIJOFS_BUTTON6 = 0x00000036,
  DIJOFS_BUTTON7 = 0x00000037,
  DIJOFS_BUTTON8 = 0x00000038,
  DIJOFS_BUTTON9 = 0x00000039,
  DIJOFS_BUTTON10 = 0x0000003A,
  DIJOFS_BUTTON11 = 0x0000003B,
  DIJOFS_BUTTON12 = 0x0000003C,
  DIJOFS_BUTTON13 = 0x0000003D,
  DIJOFS_BUTTON14 = 0x0000003E,
  DIJOFS_BUTTON15 = 0x0000003F,
  DIJOFS_BUTTON16 = 0x00000040,
  DIJOFS_BUTTON17 = 0x00000041,
  DIJOFS_BUTTON18 = 0x00000042,
  DIJOFS_BUTTON19 = 0x00000043,
  DIJOFS_BUTTON20 = 0x00000044,
  DIJOFS_BUTTON21 = 0x00000045,
  DIJOFS_BUTTON22 = 0x00000046,
  DIJOFS_BUTTON23 = 0x00000047,
  DIJOFS_BUTTON24 = 0x00000048,
  DIJOFS_BUTTON25 = 0x00000049,
  DIJOFS_BUTTON26 = 0x0000004A,
  DIJOFS_BUTTON27 = 0x0000004B,
  DIJOFS_BUTTON28 = 0x0000004C,
  DIJOFS_BUTTON29 = 0x0000004D,
  DIJOFS_BUTTON30 = 0x0000004E,
  DIJOFS_BUTTON31 = 0x0000004F,
}

enum CONST_DIEFTFLAGS {
  DIEFT_ALL = 0x00000000,
  DIEFT_CONSTANTFORCE = 0x00000001,
  DIEFT_RAMPFORCE = 0x00000002,
  DIEFT_PERIODIC = 0x00000003,
  DIEFT_CONDITION = 0x00000004,
  DIEFT_CUSTOMFORCE = 0x00000005,
  DIEFT_HARDWARE = 0x000000FF,
  DIEFT_FFATTACK = 0x00000200,
  DIEFT_FFFADE = 0x00000400,
  DIEFT_SATURATION = 0x00000800,
  DIEFT_POSNEGCOEFFICIENTS = 0x00001000,
  DIEFT_POSNEGSATURATION = 0x00002000,
  DIEFT_DEADBAND = 0x00004000,
}

enum CONST_DIEFFFLAGS {
  DIEFF_OBJECTOFFSETS = 0x00000002,
  DIEFF_CARTESIAN = 0x00000010,
  DIEFF_POLAR = 0x00000020,
}

enum CONST_DIEPFLAGS {
  DIEP_DURATION = 0x00000001,
  DIEP_SAMPLEPERIOD = 0x00000002,
  DIEP_GAIN = 0x00000004,
  DIEP_TRIGGERBUTTON = 0x00000008,
  DIEP_TRIGGERREPEATINTERVAL = 0x00000010,
  DIEP_AXES = 0x00000020,
  DIEP_DIRECTION = 0x00000040,
  DIEP_ENVELOPE = 0x00000080,
  DIEP_TYPESPECIFICPARAMS = 0x00000100,
  DIEP_ALLPARAMS = 0x000001FF,
  DIEP_START = 0x20000000,
  DIEP_NORESTART = 0x40000000,
  DIEP_NODOWNLOAD = 0x80000000,
}

enum CONST_DIEGESFLAGS {
  DIEGES_PLAYING = 0x00000001,
  DIEGES_EMULATED = 0x00000002,
}

enum CONST_DIESFLAGS {
  DIES_SOLO = 0x00000001,
  DIES_NODOWNLOAD = 0x80000000,
}

enum CONST_DISFFCFLAGS {
  DISFFC_RESET = 0x00000001,
  DISFFC_STOPALL = 0x00000002,
  DISFFC_PAUSE = 0x00000004,
  DISFFC_CONTINUE = 0x00000008,
  DISFFC_SETACTUATORSON = 0x00000010,
  DISFFC_SETACTUATORSOFF = 0x00000020,
}

enum CONST_DIGFFSFLAGS {
  DIGFFS_EMPTY = 0x00000001,
  DIGFFS_STOPPED = 0x00000002,
  DIGFFS_PAUSED = 0x00000004,
  DIGFFS_ACTUATORSON = 0x00000010,
  DIGFFS_ACTUATORSOFF = 0x00000020,
  DIGFFS_POWERON = 0x00000040,
  DIGFFS_POWEROFF = 0x00000080,
  DIGFFS_SAFETYSWITCHON = 0x00000100,
  DIGFFS_SAFETYSWITCHOFF = 0x00000200,
  DIGFFS_USERFFSWITCHON = 0x00000400,
  DIGFFS_USERFFSWITCHOFF = 0x00000800,
  DIGFFS_DEVICELOST = 0x80000000,
}

enum CONST_DISDDFLAGS {
  DISDD_DEFAULT = 0x00000000,
  DISDD_CONTINUE = 0x00000001,
}

enum CONST_DMUS_EFFECT_FLAGS {
  DMUS_EFFECT_NONE = 0x00000000,
  DMUS_EFFECT_REVERB = 0x00000001,
  DMUS_EFFECT_CHORUS = 0x00000002,
}

enum CONST_D3DDEVINFOID {
  D3DDEVINFOID_D3DTEXTUREMANAGER = 0x00000002,
  D3DDEVINFOID_TEXTUREMANAGER = 0x00000001,
  D3DDEVINFOID_TEXTURING = 0x00000003,
}

enum CONST_DDOVERFXFLAGS {
  DDOVERFX_ARITHSTRETCHY = 0x00000001,
  DDOVERFX_MIRRORLEFTRIGHT = 0x00000002,
  DDOVERFX_MIRRORUPDOWN = 0x00000004,
}

enum CONST_D3DRMSHADOWFLAGS {
  D3DRMSHADOW_TRUEALPHA = 0x00000001,
}

enum CONST_DICONDITIONFLAGS {
  DICONDITION_USE_BOTH_AXES = 0x00000001,
  DICONDITION_USE_DIRECTION = 0x00000002,
}

enum CONST_D3DSTATEBLOCKTYPE {
  D3DSBT_ALL = 0x00000001,
  D3DSBT_PIXELSTATE = 0x00000002,
  D3DSBT_VERTEXSTATE = 0x00000003,
}

enum CONST_D3DCLIPPLANEFLAGS {
  D3DCPF_DISABLEALL = 0x00000000,
  D3DCPF_ENABLEPLANE0 = 0x00000001,
  D3DCPF_ENABLEPLANE1 = 0x00000002,
  D3DCPF_ENABLEPLANE2 = 0x00000004,
  D3DCPF_ENABLEPLANE3 = 0x00000008,
  D3DCPF_ENABLEPLANE4 = 0x00000010,
  D3DCPF_ENABLEPLANE5 = 0x00000020,
  D3DCPF_ENABLEPLANE6 = 0x00000040,
  D3DCPF_ENABLEPLANE7 = 0x00000080,
  D3DCPF_ENABLEPLANE8 = 0x00000100,
  D3DCPF_ENABLEPLANE9 = 0x00000200,
  D3DCPF_ENABLEPLANE10 = 0x00000400,
  D3DCPF_ENABLEPLANE11 = 0x00000800,
  D3DCPF_ENABLEPLANE12 = 0x00001000,
  D3DCPF_ENABLEPLANE13 = 0x00002000,
  D3DCPF_ENABLEPLANE14 = 0x00004000,
  D3DCPF_ENABLEPLANE15 = 0x00008000,
  D3DCPF_ENABLEPLANE16 = 0x00010000,
  D3DCPF_ENABLEPLANE17 = 0x00020000,
  D3DCPF_ENABLEPLANE18 = 0x00040000,
  D3DCPF_ENABLEPLANE19 = 0x00080000,
  D3DCPF_ENABLEPLANE20 = 0x00100000,
  D3DCPF_ENABLEPLANE21 = 0x00200000,
  D3DCPF_ENABLEPLANE22 = 0x00400000,
  D3DCPF_ENABLEPLANE23 = 0x00800000,
  D3DCPF_ENABLEPLANE24 = 0x01000000,
  D3DCPF_ENABLEPLANE25 = 0x02000000,
  D3DCPF_ENABLEPLANE26 = 0x04000000,
  D3DCPF_ENABLEPLANE27 = 0x08000000,
  D3DCPF_ENABLEPLANE28 = 0x10000000,
  D3DCPF_ENABLEPLANE29 = 0x20000000,
  D3DCPF_ENABLEPLANE30 = 0x40000000,
  D3DCPF_ENABLEPLANE31 = 0x80000000,
}

enum CONST_DMUS_NOTIFICATION_TYPE {
  DMUS_NOTIFY_ON_CHORD = 0x00000001,
  DMUS_NOTIFY_ON_COMMAND = 0x00000002,
  DMUS_NOTIFY_ON_MEASUREANDBEAT = 0x00000003,
  DMUS_NOTIFY_ON_PERFORMANCE = 0x00000004,
  DMUS_NOTIFY_ON_SEGMENT = 0x00000005,
}

// Unions

union __MIDL_IWinTypes_0009 {
  int hInproc;
  int hRemote;
}

// Structs

struct RECT {
  int Left;
  int Top;
  int Right;
  int Bottom;
}

struct DXGUID {
  int data1;
  short data2;
  short data3;
  ubyte[8] data4;
}

struct DPAPPLICATIONDESC2 {
  int lFlags;
  wchar* strApplicationName;
  wchar* strGuid;
  wchar* strFilename;
  wchar* strCommandLine;
  wchar* strPath;
  wchar* strCurrentDirectory;
  wchar* strDescription;
  wchar* strAppLauncherName;
}

struct DIRECTXREGISTERAPP {
  int lFlags;
  wchar* strApplicationName;
  wchar* strGuid;
  wchar* strFilename;
  wchar* strCommandLine;
  wchar* strPath;
  wchar* strCurrentDirectory;
}

struct PALETTEENTRY {
  ubyte red;
  ubyte green;
  ubyte blue;
  ubyte flags;
}

struct D3DRECT {
  int x1;
  int y1;
  int x2;
  int y2;
}

struct D3DVECTOR {
  float x;
  float y;
  float z;
}

struct D3DCOLORVALUE {
  float r;
  float g;
  float b;
  float a;
}

struct D3DLINEPATTERN {
  int repeatFactor;
  int linePatern;
}

struct D3DTLVERTEX {
  float sx;
  float sy;
  float sz;
  float rhw;
  int color;
  int specular;
  float tu;
  float tv;
}

struct D3DLVERTEX {
  float x;
  float y;
  float z;
  int reserved;
  int color;
  int specular;
  float tu;
  float tv;
}

struct D3DVERTEX {
  float x;
  float y;
  float z;
  float nx;
  float ny;
  float nz;
  float tu;
  float tv;
}

struct D3DCLIPSTATUS {
  CONST_D3DCLIPSTATUSFLAGS lFlags;
  CONST_D3DCLIPFLAGS lStatus;
  float minx;
  float maxx;
  float miny;
  float maxy;
  float minz;
  float maxz;
}

struct D3DVIEWPORT7 {
  int lX;
  int lY;
  int lWidth;
  int lHeight;
  float minz;
  float maxz;
}

struct D3DLIGHTINGCAPS {
  int lSize;
  CONST_D3DLIGHTCAPSFLAGS lCaps;
  CONST_D3DLIGHTINGMODELFLAGS lLightingModel;
  int lNumLights;
}

struct D3DPRIMCAPS {
  int lSize;
  CONST_D3DCAPSMISC lMiscCaps;
  CONST_D3DCAPSRASTER lRasterCaps;
  CONST_D3DCAPSCMP lZCmpCaps;
  CONST_D3DCAPSBLEND lSrcBlendCaps;
  CONST_D3DCAPSBLEND lDestBlendCaps;
  CONST_D3DCAPSCMP lAlphaCmpCaps;
  CONST_D3DCAPSSHADE lShadeCaps;
  CONST_D3DCAPSTEXTURE lTextureCaps;
  CONST_D3DCAPSTEXTUREFILTER lTextureFilterCaps;
  int lReserved1;
  CONST_D3DCAPSTEXTUREADDRESS lTextureAddressCaps;
  int lStippleWidth;
  int lStippleHeight;
}

struct D3DDEVICEDESC7 {
  CONST_D3DDEVICEDESCCAPS lDevCaps;
  D3DPRIMCAPS dpcLineCaps;
  D3DPRIMCAPS dpcTriCaps;
  int lDeviceRenderBitDepth;
  int lDeviceZBufferBitDepth;
  int lMinTextureWidth;
  int lMinTextureHeight;
  int lMaxTextureWidth;
  int lMaxTextureHeight;
  int lMaxTextureRepeat;
  int lMaxTextureAspectRatio;
  int lMaxAnisotropy;
  float dvGuardBandLeft;
  float dvGuardBandTop;
  float dvGuardBandRight;
  float dvGuardBandBottom;
  float dvExtentsAdjust;
  CONST_D3DSTENCILCAPSFLAGS lStencilCaps;
  CONST_D3DFVFCAPSFLAGS lFVFCaps;
  CONST_D3DTEXOPCAPSFLAGS lTextureOpCaps;
  short nMaxTextureBlendStages;
  short nMaxSimultaneousTextures;
  int lMaxActiveLights;
  float dvMaxVertexW;
  DXGUID deviceGuid;
  short nMaxUserClipPlanes;
  short nMaxVertexBlendMatrices;
  CONST_D3DVTXPCAPSFLAGS lVertexProcessingCaps;
  int lReserved1;
  int lReserved2;
  int lReserved3;
  int lReserved4;
}

struct D3DMATERIAL7 {
  D3DCOLORVALUE diffuse;
  D3DCOLORVALUE ambient;
  D3DCOLORVALUE specular;
  D3DCOLORVALUE emissive;
  float power;
}

struct D3DLIGHT7 {
  CONST_D3DLIGHTTYPE dltType;
  D3DCOLORVALUE diffuse;
  D3DCOLORVALUE specular;
  D3DCOLORVALUE ambient;
  D3DVECTOR position;
  D3DVECTOR direction;
  float range;
  float falloff;
  float attenuation0;
  float attenuation1;
  float attenuation2;
  float theta;
  float phi;
}

struct D3DMATRIX {
  float rc11;
  float rc12;
  float rc13;
  float rc14;
  float rc21;
  float rc22;
  float rc23;
  float rc24;
  float rc31;
  float rc32;
  float rc33;
  float rc34;
  float rc41;
  float rc42;
  float rc43;
  float rc44;
}

struct D3DRMRAY {
  D3DVECTOR dir;
  D3DVECTOR pos;
}

struct D3DRMQUATERNION {
  float s;
  D3DVECTOR v;
}

struct D3DRMVECTOR4D {
  float x;
  float y;
  float z;
  float w;
}

struct D3DRMBOX {
  D3DVECTOR min;
  D3DVECTOR max;
}

struct D3DRMPICKDESC {
  int lFaceIdx;
  int lGroupIdx;
  D3DVECTOR vPosition;
}

struct D3DRMPICKDESC2 {
  int lFaceIdx;
  int lGroupIdx;
  D3DVECTOR vPostion;
  float tu;
  float tv;
  D3DVECTOR vNormal;
  int color;
}

struct D3DRMVERTEX {
  D3DVECTOR position;
  D3DVECTOR normal;
  float tu;
  float tv;
  int color;
}

struct DDCOLORKEY {
  int low;
  int high;
}

struct DDSCAPS2 {
  CONST_DDSURFACECAPSFLAGS lCaps;
  CONST_DDSURFACECAPS2FLAGS lCaps2;
  int lCaps3;
  int lCaps4;
}

struct DDPIXELFORMAT {
  int lSize;
  CONST_DDPIXELFORMATFLAGS lFlags;
  int lFourCC;
  int internalVal1;
  int internalVal2;
  int internalVal3;
  int internalVal4;
  int internalVal5;
  int lRGBBitCount;
  int lYUVBitCount;
  int lZBufferBitDepth;
  int lAlphaBitDepth;
  int lLuminanceBitCount;
  int lBumpBitCount;
  int lRBitMask;
  int lYBitMask;
  int lStencilBitDepth;
  int lLuminanceBitMask;
  int lBumpDuBitMask;
  int lGBitMask;
  int lUBitMask;
  int lZBitMask;
  int lBumpDvBitMask;
  int lBBitMask;
  int lVBitMask;
  int lStencilBitMask;
  int lBumpLuminanceBitMask;
  int lRGBAlphaBitMask;
  int lYUVAlphaBitMask;
  int lLuminanceAlphaBitMask;
  int lRGBZBitMask;
  int lYUVZBitMask;
}

struct DDSURFACEDESC2 {
  int lSize;
  CONST_DDSURFACEDESCFLAGS lFlags;
  int lHeight;
  int lWidth;
  int lPitch;
  int lBackBufferCount;
  int lZBufferBitDepth;
  int lAlphaBitDepth;
  int lReserved;
  int lpSurface;
  DDCOLORKEY ddckCKDestOverlay;
  DDCOLORKEY ddckCKDestBlt;
  DDCOLORKEY ddckCKSrcOverlay;
  DDCOLORKEY ddckCKSrcBlt;
  DDPIXELFORMAT ddpfPixelFormat;
  DDSCAPS2 ddsCaps;
  int lTextureStage;
  int lLinearSize;
  int lMipMapCount;
  int lRefreshRate;
}

struct DDCAPS {
  int lSize;
  CONST_DDCAPS1FLAGS lCaps;
  CONST_DDCAPS2FLAGS lCaps2;
  CONST_DDCKEYCAPSFLAGS lCKeyCaps;
  CONST_DDFXCAPSFLAGS lFXCaps;
  int lFXAlphaCaps;
  CONST_DDPCAPSFLAGS lPalCaps;
  CONST_DDSTEREOCAPSFLAGS lSVCaps;
  int lAlphaBltConstBitDepths;
  int lAlphaBltPixelBitDepths;
  int lAlphaBltSurfaceBitDepths;
  int lAlphaOverlayConstBitDepths;
  int lAlphaOverlayPixelBitDepths;
  int lAlphaOverlaySurfaceBitDepths;
  int lZBufferBitDepths;
  int lVidMemTotal;
  int lVidMemFree;
  int lMaxVisibleOverlays;
  int lCurrVisibleOverlays;
  int lNumFourCCCodes;
  int lAlignBoundarySrc;
  int lAlignSizeSrc;
  int lAlignBoundaryDest;
  int lAlignSizeDest;
  int lAlignStrideAlign;
  int[8] lRops;
  int lReservedCaps;
  int lMinOverlayStretch;
  int lMaxOverlayStretch;
  int lMinLiveVideoStretch;
  int lMaxLiveVideoStretch;
  int lMinHwCodecStretch;
  int lMaxHwCodecStretch;
  int lReserved1;
  int lReserved2;
  int lReserved3;
  CONST_DDCAPS1FLAGS lSVBCaps;
  CONST_DDCKEYCAPSFLAGS lSVBCKeyCaps;
  CONST_DDFXCAPSFLAGS lSVBFXCaps;
  int[8] lSVBRops;
  CONST_DDCAPS1FLAGS lVSBCaps;
  CONST_DDCKEYCAPSFLAGS lVSBCKeyCaps;
  CONST_DDFXCAPSFLAGS lVSBFXCaps;
  int[8] lVSRops;
  CONST_DDCAPS1FLAGS lSSBCaps;
  CONST_DDCKEYCAPSFLAGS lSSBCKeyCaps;
  CONST_DDFXCAPSFLAGS lSSBFXCaps;
  int[8] lSSBRops;
  int lMaxVideoPorts;
  int lCurrVideoPorts;
  CONST_DDCAPS2FLAGS lSVBCaps2;
  CONST_DDCAPS1FLAGS lNLVBCaps;
  CONST_DDCAPS2FLAGS lNLVBCaps2;
  CONST_DDCKEYCAPSFLAGS lNLVBCKeyCaps;
  CONST_DDFXCAPSFLAGS lNLVBFXCaps;
  int[8] lNLVBRops;
  DDSCAPS2 ddsCaps;
}

struct DDBLTFX {
  int lSize;
  CONST_DDBLTFXFLAGS lDDFX;
  int lROP;
  int lDDROP;
  int lRotationAngle;
  int lZBufferOpCode;
  int lZBufferLow;
  int lZBufferHigh;
  int lZBufferBaseDest;
  int lZDestConstBitDepth;
  int lZDestConst;
  int lZSrcConstBitDepth;
  int lZSrcConst;
  int lAlphaEdgeBlendBitDepth;
  int lAlphaEdgeBlend;
  int lReserved;
  int lAlphaDestConstBitDepth;
  int lAlphaDestConst;
  int lAlphaSrcConstBitDepth;
  int lAlphaSrcConst;
  int lFill;
  int ddckDestColorKey_low;
  int ddckDestColorKey_high;
  int ddckSrcColorKey_low;
  int ddckSrcColorKey_high;
}

struct DDCOLORCONTROL {
  int lSize;
  CONST_DDCOLORFLAGS lFlags;
  int lBrightness;
  int lContrast;
  int lHue;
  int lSaturation;
  int lSharpness;
  int lGamma;
  int lColorEnable;
  int lReserved1;
}

struct DDGAMMARAMP {
  short[256] red;
  short[256] green;
  short[256] blue;
}

struct D3DVERTEXBUFFERDESC {
  int lSize;
  CONST_D3DVBCAPSFLAGS lCaps;
  CONST_D3DFVFFLAGS lFVF;
  int lNumVertices;
}

struct DSBCAPS {
  int lSize;
  CONST_DSBCAPSFLAGS lFlags;
  int lBufferBytes;
  int lUnlockTransferRate;
  int lPlayCpuOverhead;
}

struct DSCAPS {
  int lSize;
  CONST_DSCAPSFLAGS lFlags;
  int lMinSecondarySampleRate;
  int lMaxSecondarySampleRate;
  int lPrimaryBuffers;
  int lMaxHwMixingAllBuffers;
  int lMaxHwMixingStaticBuffers;
  int lMaxHwMixingStreamingBuffers;
  int lFreeHwMixingAllBuffers;
  int lFreeHwMixingStaticBuffers;
  int lFreeHwMixingStreamingBuffers;
  int lMaxHw3DAllBuffers;
  int lMaxHw3DStaticBuffers;
  int lMaxHw3DStreamingBuffers;
  int lFreeHw3DAllBuffers;
  int lFreeHw3DStaticBuffers;
  int lFreeHw3DStreamingBuffers;
  int lTotalHwMemBytes;
  int lFreeHwMemBytes;
  int lMaxContigFreeHwMemBytes;
  int lUnlockTransferRateHwBuffers;
  int lPlayCpuOverheadSwBuffers;
  int lReserved1;
  int lReserved2;
}

struct WAVEFORMATEX {
  short nFormatTag;
  short nChannels;
  int lSamplesPerSec;
  int lAvgBytesPerSec;
  short nBlockAlign;
  short nBitsPerSample;
  short nSize;
  int lExtra;
}

struct DSBUFFERDESC {
  int lSize;
  CONST_DSBCAPSFLAGS lFlags;
  int lBufferBytes;
  int lReserved;
  int lpwfxFormat;
}

struct DSCURSORS {
  int lPlay;
  int lWrite;
}

struct DS3DBUFFER {
  int lSize;
  D3DVECTOR vPostion;
  D3DVECTOR vVelocity;
  int lInsideConeAngle;
  int lOutsideConeAngle;
  D3DVECTOR vConeOrientation;
  int lConeOutsideVolume;
  float minDistance;
  float maxDistance;
  CONST_DS3DMODEFLAGS lMode;
}

struct DS3DLISTENER {
  int lSize;
  D3DVECTOR vPosition;
  D3DVECTOR vVelocity;
  D3DVECTOR vOrientFront;
  D3DVECTOR vOrientTop;
  float distanceFactor;
  float rolloffFactor;
  float dopplerFactor;
}

struct DSCBCAPS {
  int lSize;
  CONST_DSCBCAPSFLAGS lFlags;
  int lBufferBytes;
  int lReserved;
}

struct DSCCAPS {
  int lSize;
  CONST_DSCCAPSFLAGS lFlags;
  CONST_WAVEFORMATFLAGS lFormats;
  int lChannels;
}

struct DSCBUFFERDESC {
  int lSize;
  CONST_DSCBCAPSFLAGS lFlags;
  int lBufferBytes;
  int lReserved;
  int pFormat;
  WAVEFORMATEX fxFormat;
}

struct DSBPOSITIONNOTIFY {
  int lOffset;
  int hEventNotify;
}

struct DPCREDENTIALS {
  int lFlags;
  wchar* strUsername;
  wchar* strPassword;
  wchar* strDomain;
}

struct DPSECURITYDESC {
  int lFlags;
  wchar* strSSPIProvider;
  wchar* strCAPIProvider;
  int lCAPIProviderType;
  int lEncryptionAlgorithm;
}

struct DPCAPS {
  int lSize;
  CONST_DPCAPSFLAGS lFlags;
  int lMaxBufferSize;
  int lMaxQueueSize;
  int lMaxPlayers;
  int lHundredBaud;
  int lLatency;
  int lMaxLocalPlayers;
  int lHeaderLength;
  int lTimeout;
}

struct DIDEVCAPS {
  int lSize;
  CONST_DIDEVCAPSFLAGS lFlags;
  CONST_DIDEVICETYPE lDevType;
  int lAxes;
  int lButtons;
  int lPOVs;
  int lFFSamplePeriod;
  int lFFMinTimeResolution;
  int lFirmwareRevision;
  int lHardwareRevision;
  int lDriverVersion;
}

struct DIDEVICEOBJECTDATA {
  int lOfs;
  int lData;
  int lTimeStamp;
  int lSequence;
}

struct DIPROPRANGE {
  int lSize;
  int lHeaderSize;
  int lObj;
  int lHow;
  int lMin;
  int lMax;
}

struct DIPROPLONG {
  int lSize;
  int lHeaderSize;
  int lObj;
  int lHow;
  int lData;
}

struct DIOBJECTDATAFORMAT {
  wchar* strGuid;
  int lOfs;
  CONST_DIDFTFLAGS lType;
  CONST_DIDEVICEOBJINSTANCEFLAGS lFlags;
}

struct DIDATAFORMAT {
  int lSize;
  int lObjSize;
  CONST_DIDATAFORMATFLAGS lFlags;
  int dataSize;
  int numObjs;
  int pData;
}

struct DIMOUSESTATE {
  int x;
  int y;
  int z;
  ubyte[4] buttons;
}

struct DIKEYBOARDSTATE {
  ubyte[256] key;
}

struct DIJOYSTATE {
  int x;
  int y;
  int z;
  int rx;
  int ry;
  int rz;
  int[2] slider;
  int[4] POV;
  ubyte[32] buttons;
}

struct DIJOYSTATE2 {
  int x;
  int y;
  int z;
  int rx;
  int ry;
  int rz;
  int[2] slider;
  int[4] POV;
  ubyte[128] buttons;
  int vx;
  int vy;
  int vz;
  int vrx;
  int vry;
  int vrz;
  int[2] vslider;
  int ax;
  int ay;
  int az;
  int arx;
  int ary;
  int arz;
  int[2] aslider;
  int fx;
  int fy;
  int fz;
  int frx;
  int fry;
  int frz;
  int[2] fslider;
}

struct D3DRMPMESHLOADSTATUS {
  int lSize;
  int lPMeshSize;
  int lBaseMeshSize;
  int lBytesLoaded;
  int lVerticesLoaded;
  int lFacesLoaded;
  CONST_D3DRMPMESHSTATUSFLAGS lFlags;
}

struct D3DRMANIMATIONKEY {
  int lSize;
  int lKeyType;
  float dvTime;
  int lID;
  float dvX;
  float dvY;
  float dvZ;
  float dvS;
}

struct D3DRMMATERIALOVERRIDE {
  int lSize;
  CONST_D3DRMMATERIALOVERRIDEFLAGS lFlags;
  D3DCOLORVALUE dcDiffuse;
  D3DCOLORVALUE dcAmbient;
  D3DCOLORVALUE dcEmissive;
  D3DCOLORVALUE dcSpecular;
  float dvPower;
  IUnknown pTex;
}

struct DMUS_TIMESIGNATURE {
  int mtTime;
  ubyte beatsPerMeasure;
  ubyte beat;
  short gridsPerBeat;
}

struct DMUS_NOTIFICATION_PMSG {
  int lFlags;
  int ctTime;
  int mtTime;
  int lNotificationType;
  int lNotificationOption;
  int lField1;
  int lField2;
}

struct DMUS_CURVE_PMSG {
  int mtDuration;
  int mtOriginalStart;
  int mtResetDuration;
  short startValue;
  short endValue;
  short resetValue;
  short measure;
  short offset;
  ubyte beat;
  ubyte grid;
  ubyte type;
  ubyte curveShape;
  ubyte ccData;
  ubyte flags;
}

struct DMUS_NOTE_PMSG {
  int mtDuration;
  short musicValue;
  short measure;
  short offset;
  ubyte beat;
  ubyte grid;
  ubyte velocity;
  ubyte flags;
  ubyte timeRange;
  ubyte durRange;
  ubyte velRange;
  ubyte playModeFlags;
  ubyte subChordLevel;
  ubyte midiValue;
  short transpose;
}

struct DMUS_PORTCAPS {
  int dwSize;
  CONST_DMUS_PC_FLAGS lFlags;
  DXGUID guidPort;
  CONST_DMUS_PC_CLASS lClass;
  CONST_DMUS_PORT_TYPE lType;
  int lMemorySize;
  int lMaxChannelGroups;
  int lMaxVoices;
  int lMaxAudioChannels;
  int lEffectFlags;
  short[128] wszDescription;
}

struct DIENVELOPE {
  int lSize;
  int lAttackLevel;
  int lAttackTime;
  int lFadeLevel;
  int lFadeTime;
}

struct DIRAMPFORCE {
  int lRangeStart;
  int lRangeEnd;
}

struct DIPERIODICFORCE {
  int lMagnitude;
  int lOffset;
  int lPhase;
  int lPeriod;
}

struct DICONDITION {
  int lOffset;
  int lPositiveCoefficient;
  int lNegativeCoefficient;
  int lPositiveSaturation;
  int lNegativeSaturation;
  int lDeadBand;
}

struct DICONSTANTFORCE {
  int lMagnitude;
}

struct DIAXISOFFSETS {
  int x;
  int y;
}

struct DIEFFECT {
  int dwSize;
  int lFlags;
  int lDuration;
  int lSamplePeriod;
  int lGain;
  int lTriggerButton;
  int lTriggerRepeatInterval;
  int cAxes;
  int lprgdwAxes;
  int lprglDirection;
  int lpEnvelope;
  int cbTypeSpecificParams;
  int lpvTypeSpecificParams;
  int lStartDelay;
  int x;
  int y;
  DIRAMPFORCE rampForce;
  DIPERIODICFORCE periodicForce;
  DICONSTANTFORCE constantForce;
  DICONDITION conditionX;
  DICONDITION conditionY;
  CONST_DICONDITIONFLAGS conditionFlags;
  int bUseEnvelope;
  DIENVELOPE envelope;
  DIAXISOFFSETS axisOffsets;
}

struct D3DDEVINFO_TEXTUREMANAGER {
  int bThrashing;
  int lNumEvicts;
  int lNumVidCreates;
  int lNumTexturesUsed;
  int lNumUsedTexInVid;
  int lWorkingSet;
  int lWorkingSetBytes;
  int lTotalManaged;
  int lTotalBytes;
  int lLastPri;
}

struct DDOVERLAYFX {
  int lSize;
  int lAlphaEdgeBlendBitDepth;
  int lAlphaEdgeBlend;
  int lReserved;
  int lAlphaDestConstBitDepth;
  int lAlphaDestConst;
  int lAlphaSrcConstBitDepth;
  int lAlphaSrcConst;
  DDCOLORKEY dckDestColorkey;
  DDCOLORKEY dckSrcColorkey;
  CONST_DDOVERFXFLAGS lDDFX;
  int lFlags;
}

struct D3DDEVINFO_TEXTURING {
  int lNumLoads;
  int lApproxBytesLoaded;
  int lNumPreLoads;
  int lNumSet;
  int lNumCreates;
  int lNumDestroys;
  int lNumSetPriorities;
  int lNumSetLODs;
  int lNumLocks;
  int lNumGetDCs;
}

struct _RemotableHandle {
  int fContext;
  __MIDL_IWinTypes_0009 u;
}

struct tagTEXTMETRICW {
  int tmHeight;
  int tmAscent;
  int tmDescent;
  int tmInternalLeading;
  int tmExternalLeading;
  int tmAveCharWidth;
  int tmMaxCharWidth;
  int tmWeight;
  int tmOverhang;
  int tmDigitizedAspectX;
  int tmDigitizedAspectY;
  ushort tmFirstChar;
  ushort tmLastChar;
  ushort tmDefaultChar;
  ushort tmBreakChar;
  ubyte tmItalic;
  ubyte tmUnderlined;
  ubyte tmStruckOut;
  ubyte tmPitchAndFamily;
  ubyte tmCharSet;
}

// Aliases

alias _RemotableHandle* wireHFONT;

alias _RemotableHandle* wireHDC;

// Interfaces

// DirectPlayAddress Interface
interface DirectPlayAddress : IUnknown {
  mixin(uuid("9f76ff05-8e92-11d1-8808-00c04fc2c602"));
  // static DWINGUID IID = { 0x9f76ff05, 0x8e92, 0x11d1, 0x88, 0x08, 0x00, 0xc0, 0x4f, 0xc2, 0xc6, 0x02 };
  /*[id(0x60010000)]*/ int SetAddress(int pAddress, int length);
  /*[id(0x60010001)]*/ int GetAddress(out int pAddress, out int length);
}

// DirectPlayLobbyConnection Interface
interface DirectPlayLobbyConnection : IUnknown {
  mixin(uuid("9f76ff06-8e92-11d1-8808-00c04fc2c602"));
  // static DWINGUID IID = { 0x9f76ff06, 0x8e92, 0x11d1, 0x88, 0x08, 0x00, 0xc0, 0x4f, 0xc2, 0xc6, 0x02 };
  /*[id(0x60010000)]*/ int GetConnectionStruct(out int connect);
  /*[id(0x60010001)]*/ int SetConnectionStruct(int connect);
  /*[id(0x60010002)]*/ int SetFlags(CONST_DPLCONNECTIONFLAGS flags);
  /*[id(0x60010003)]*/ int GetFlags(out CONST_DPLCONNECTIONFLAGS ret);
  /*[id(0x60010004)]*/ int SetSessionDesc(DirectPlaySessionData sessionDesc);
  /*[id(0x60010005)]*/ int GetSessionDesc(out DirectPlaySessionData sessionDesc);
  /*[id(0x60010006)]*/ int SetGuidSP(wchar* guid);
  /*[id(0x60010007)]*/ int GetGuidSP(out wchar* guid);
  /*[id(0x60010008)]*/ int SetAddress(DirectPlayAddress address);
  /*[id(0x60010009)]*/ int GetAddress(out DirectPlayAddress address);
  /*[id(0x6001000A)]*/ int SetPlayerShortName(wchar* name);
  /*[id(0x6001000B)]*/ int GetPlayerShortName(out wchar* name);
  /*[id(0x6001000C)]*/ int SetPlayerLongName(wchar* name);
  /*[id(0x6001000D)]*/ int GetPlayerLongName(out wchar* name);
}

// DirectPlaySessionData Interface
interface DirectPlaySessionData : IUnknown {
  mixin(uuid("9f76ff12-8e92-11d1-8808-00c04fc2c602"));
  // static DWINGUID IID = { 0x9f76ff12, 0x8e92, 0x11d1, 0x88, 0x08, 0x00, 0xc0, 0x4f, 0xc2, 0xc6, 0x02 };
  /*[id(0x60010000)]*/ int SetGuidInstance(wchar* guid);
  /*[id(0x60010001)]*/ int GetGuidInstance(out wchar* guid);
  /*[id(0x60010002)]*/ int SetGuidApplication(wchar* guid);
  /*[id(0x60010003)]*/ int GetGuidApplication(out wchar* guid);
  /*[id(0x60010004)]*/ int SetMaxPlayers(int val);
  /*[id(0x60010005)]*/ int GetMaxPlayers(out int val);
  /*[id(0x60010006)]*/ int SetCurrentPlayers(int val);
  /*[id(0x60010007)]*/ int GetCurrentPlayers(out int val);
  /*[id(0x60010008)]*/ int SetSessionName(wchar* val);
  /*[id(0x60010009)]*/ int GetSessionName(out wchar* val);
  /*[id(0x6001000A)]*/ int SetSessionPassword(wchar* val);
  /*[id(0x6001000B)]*/ int GetSessionPassword(out wchar* val);
  /*[id(0x6001000C)]*/ int SetUser1(int val);
  /*[id(0x6001000D)]*/ int GetUser1(out int val);
  /*[id(0x6001000E)]*/ int SetUser2(int val);
  /*[id(0x6001000F)]*/ int GetUser2(out int val);
  /*[id(0x60010010)]*/ int SetUser3(int val);
  /*[id(0x60010011)]*/ int GetUser3(out int val);
  /*[id(0x60010012)]*/ int SetUser4(int val);
  /*[id(0x60010013)]*/ int GetUser4(out int val);
  /*[id(0x60010014)]*/ int SetFlags(CONST_DPSESSIONFLAGS val);
  /*[id(0x60010015)]*/ int GetFlags(out int val);
  /*[id(0x60010016)]*/ int GetData(void *val);
}

// DirectPlayEnumConnections Interface
interface DirectPlayEnumConnections : IUnknown {
  mixin(uuid("9f76ff0a-8e92-11d1-8808-00c04fc2c602"));
  // static DWINGUID IID = { 0x9f76ff0a, 0x8e92, 0x11d1, 0x88, 0x08, 0x00, 0xc0, 0x4f, 0xc2, 0xc6, 0x02 };
  /*[id(0x60010000)]*/ int GetAddress(int index, out DirectPlayAddress retV);
  /*[id(0x60010001)]*/ int GetFlags(int index, out int retV);
  /*[id(0x60010002)]*/ int GetGuid(int index, out wchar* retV);
  /*[id(0x60010003)]*/ int GetName(int index, out wchar* retV);
  /*[id(0x60010004)]*/ int GetCount(out int count);
}

// DirectPlayEnumPlayers2 Interface
interface DirectPlayEnumPlayers : IUnknown {
  mixin(uuid("9f76ff0b-8e92-11d1-8808-00c04fc2c602"));
  // static DWINGUID IID = { 0x9f76ff0b, 0x8e92, 0x11d1, 0x88, 0x08, 0x00, 0xc0, 0x4f, 0xc2, 0xc6, 0x02 };
  /*[id(0x60010000)]*/ int GetCount(out int count);
  /*[id(0x60010001)]*/ int GetFlags(int index, out int count);
  /*[id(0x60010002)]*/ int GetType(int index, out int count);
  /*[id(0x60010003)]*/ int GetDPID(int index, out int count);
  /*[id(0x60010004)]*/ int GetShortName(int index, out wchar* retV);
  /*[id(0x60010005)]*/ int GetLongName(int index, out wchar* retV);
}

// DirectPlayEnumSessions2 Interface
interface DirectPlayEnumSessions : IUnknown {
  mixin(uuid("9f76ff0c-8e92-11d1-8808-00c04fc2c602"));
  // static DWINGUID IID = { 0x9f76ff0c, 0x8e92, 0x11d1, 0x88, 0x08, 0x00, 0xc0, 0x4f, 0xc2, 0xc6, 0x02 };
  /*[id(0x60010000)]*/ int GetItem(int index, out DirectPlaySessionData retval);
  /*[id(0x60010001)]*/ int GetCount(out int count);
}

// DirectPlayEnumServiceProviders Interface
interface DirectPlayEnumServiceProviders : IUnknown {
  mixin(uuid("9f76ff0d-8e92-11d1-8808-00c04fc2c602"));
  // static DWINGUID IID = { 0x9f76ff0d, 0x8e92, 0x11d1, 0x88, 0x08, 0x00, 0xc0, 0x4f, 0xc2, 0xc6, 0x02 };
  /*[id(0x60010000)]*/ int GetCount(out int count);
  /*[id(0x60010001)]*/ int GetName(int index, out wchar* ret);
  /*[id(0x60010002)]*/ int GetGuid(int index, out wchar* ret);
  /*[id(0x60010003)]*/ int GetVersion(int index, int* majorVersion, ref int minorVersion);
}

// DirectPlayEnumLocalApplications Interface
interface DirectPlayEnumLocalApplications : IUnknown {
  mixin(uuid("9f76ff0e-8e92-11d1-8808-00c04fc2c602"));
  // static DWINGUID IID = { 0x9f76ff0e, 0x8e92, 0x11d1, 0x88, 0x08, 0x00, 0xc0, 0x4f, 0xc2, 0xc6, 0x02 };
  /*[id(0x60010000)]*/ int GetCount(out int count);
  /*[id(0x60010001)]*/ int GetName(int index, out wchar* ret);
  /*[id(0x60010002)]*/ int GetGuid(int index, out wchar* ret);
}

// DirectPlayMessage Interface
interface DirectPlayMessage : IUnknown {
  mixin(uuid("9f76ff11-8e92-11d1-8808-00c04fc2c602"));
  // static DWINGUID IID = { 0x9f76ff11, 0x8e92, 0x11d1, 0x88, 0x08, 0x00, 0xc0, 0x4f, 0xc2, 0xc6, 0x02 };
  /*[id(0x60010000)]*/ int WriteGuid(wchar* val);
  /*[id(0x60010001)]*/ int ReadGuid(out wchar* val);
  /*[id(0x60010002)]*/ int WriteString(wchar* val);
  /*[id(0x60010003)]*/ int ReadString(out wchar* val);
  /*[id(0x60010004)]*/ int WriteLong(int val);
  /*[id(0x60010005)]*/ int ReadLong(out int val);
  /*[id(0x60010006)]*/ int WriteShort(short val);
  /*[id(0x60010007)]*/ int ReadShort(out short val);
  /*[id(0x60010008)]*/ int WriteSingle(float val);
  /*[id(0x60010009)]*/ int ReadSingle(out float val);
  /*[id(0x6001000A)]*/ int WriteDouble(double val);
  /*[id(0x6001000B)]*/ int ReadDouble(out double val);
  /*[id(0x6001000C)]*/ int WriteByte(ubyte val);
  /*[id(0x6001000D)]*/ int ReadByte(out ubyte val);
  /*[id(0x6001000E)]*/ int MoveToTop();
  /*[id(0x6001000F)]*/ int Clear();
  /*[id(0x60010010)]*/ int GetMessageSize(out int ret);
  /*[id(0x60010011)]*/ int GetMessageData(void * userDefinedType);
  /*[id(0x60010012)]*/ int SetMessageData(void* userDefinedType, int size);
  /*[id(0x60010013)]*/ int GetPointer(out int ret);
  /*[id(0x60010014)]*/ int ReadSysMsgConnection(out DirectPlayLobbyConnection ret);
  /*[id(0x60010015)]*/ int ReadSysMsgSessionDesc(out DirectPlaySessionData ret);
  /*[id(0x60010016)]*/ int ReadSysMsgData(out wchar* ret);
  /*[id(0x60010017)]*/ int ReadSysChatString(out wchar* ret);
  /*[id(0x60010018)]*/ int MoveToSecureMessage();
}

// IDirectPlay4 Interface
interface DirectPlay4 : IUnknown {
  mixin(uuid("9f76ff0f-8e92-11d1-8808-00c04fc2c602"));
  // static DWINGUID IID = { 0x9f76ff0f, 0x8e92, 0x11d1, 0x88, 0x08, 0x00, 0xc0, 0x4f, 0xc2, 0xc6, 0x02 };
  /*[id(0x60010000)]*/ int InternalSetObject(IUnknown lpdd);
  /*[id(0x60010001)]*/ int InternalGetObject(out IUnknown lpdd);
  /*[id(0x60010002)]*/ int AddGroupToGroup(int ParentGroupId, int GroupId);
  /*[id(0x60010003)]*/ int AddPlayerToGroup(int GroupId, int playerId);
  /*[id(0x60010004)]*/ int CancelMessage(int msgid);
  /*[id(0x60010005)]*/ int CancelPriority(int minPrority, int maxPriority);
  /*[id(0x60010006)]*/ int Close();
  /*[id(0x60010007)]*/ int CreateGroup(wchar* friendlyName, wchar* formalName, CONST_DPGROUPFLAGS flags, out int v1);
  /*[id(0x60010008)]*/ int CreateGroupInGroup(int parentid, wchar* friendlyName, wchar* formalName, CONST_DPGROUPFLAGS flags, out int v1);
  /*[id(0x60010009)]*/ int CreatePlayer(wchar* friendlyName, wchar* formalName, int receiveEvent, CONST_DPPLAYERFLAGS flags, out int v1);
  /*[id(0x6001000A)]*/ int DeleteGroupFromGroup(int groupParentId, int GroupId);
  /*[id(0x6001000B)]*/ int DeletePlayerFromGroup(int GroupId, int playerId);
  /*[id(0x6001000C)]*/ int DestroyGroup(int GroupId);
  /*[id(0x6001000D)]*/ int DestroyPlayer(int playerId);
  /*[id(0x6001000E)]*/ int GetDPEnumConnections(wchar* guid, CONST_DPENUMCONNECTIONFLAGS flags, out DirectPlayEnumConnections retval);
  /*[id(0x6001000F)]*/ int GetDPEnumGroupPlayers(int GroupId, wchar* sessionGuid, CONST_DPENUMPLAYERFLAGS flags, out DirectPlayEnumPlayers retval);
  /*[id(0x60010010)]*/ int GetDPEnumGroups(wchar* sessionGuid, CONST_DPENUMGROUPFLAGS flags, out DirectPlayEnumPlayers retval);
  /*[id(0x60010011)]*/ int GetDPEnumGroupsInGroup(int GroupId, wchar* sessionGuid, CONST_DPENUMGROUPFLAGS flags, out DirectPlayEnumPlayers retval);
  /*[id(0x60010012)]*/ int GetDPEnumPlayers(wchar* sessionGuid, CONST_DPENUMPLAYERFLAGS flags, out DirectPlayEnumPlayers retval);
  /*[id(0x60010013)]*/ int GetDPEnumSessions(DirectPlaySessionData sessionDesc, int timeOut, CONST_DPENUMSESSIONFLAGS flags, out DirectPlayEnumSessions retval);
  /*[id(0x60010014)]*/ int GetCaps(ref DPCAPS caps, CONST_DPGETCAPSFLAGS flags);
  /*[id(0x60010015)]*/ int GetGroupData(int GroupId, CONST_DPGETFLAGS flags, out wchar* ret);
  /*[id(0x60010016)]*/ int GetGroupFlags(int GroupId, out CONST_DPGROUPFLAGS flags);
  /*[id(0x60010017)]*/ int GetGroupLongName(int GroupId, out wchar* name);
  /*[id(0x60010018)]*/ int GetGroupShortName(int GroupId, out wchar* name);
  /*[id(0x60010019)]*/ int GetGroupParent(int GroupId, out int ret);
  /*[id(0x6001001A)]*/ int GetGroupOwner(int GroupId, out int ret);
  /*[id(0x6001001B)]*/ int GetMessageCount(int playerId, out int count);
  /*[id(0x6001001C)]*/ int GetMessageQueue(int from, int to, CONST_DPMESSAGEQUEUEFLAGS flags, ref int nMessage, ref int nBytes);
  /*[id(0x6001001D)]*/ int GetPlayerAccountId(int playerId, out wchar* acctid);
  /*[id(0x6001001E)]*/ int GetPlayerAddress(int playerId, out DirectPlayAddress ret);
  /*[id(0x6001001F)]*/ int GetPlayerCaps(int playerId, out DPCAPS caps, CONST_DPGETCAPSFLAGS flags);
  /*[id(0x60010020)]*/ int GetPlayerData(int playerId, CONST_DPGETFLAGS flags, out wchar* ret);
  /*[id(0x60010021)]*/ int GetPlayerFlags(int playerId, out CONST_DPPLAYERFLAGS retflags);
  /*[id(0x60010022)]*/ int GetPlayerFormalName(int playerId, out wchar* name);
  /*[id(0x60010023)]*/ int GetPlayerFriendlyName(int playerId, out wchar* name);
  /*[id(0x60010024)]*/ int GetSessionDesc(ref DirectPlaySessionData sessionDesc);
  /*[id(0x60010025)]*/ int InitializeConnection(DirectPlayAddress address);
  /*[id(0x60010026)]*/ int Open(ref DirectPlaySessionData sessionDesc, CONST_DPOPENFLAGS flags);
  /*[id(0x60010027)]*/ int Receive(ref int fromPlayerId, ref int toPlayerId, CONST_DPRECEIVEFLAGS flags, out DirectPlayMessage ret);
  /*[id(0x60010028)]*/ int ReceiveSize(ref int fromPlayerId, ref int toPlayerId, CONST_DPRECEIVEFLAGS flags, out int dataSize);
  /*[id(0x60010029)]*/ int SecureOpen(DirectPlaySessionData sessionDesc, CONST_DPOPENFLAGS flags, DPSECURITYDESC* security, DPCREDENTIALS* credentials);
  /*[id(0x6001002A)]*/ int Send(int fromPlayerId, int toPlayerId, CONST_DPSENDFLAGS flags, DirectPlayMessage msg);
  /*[id(0x6001002B)]*/ int SendChatMessage(int fromPlayerId, int toPlayerId, CONST_DPSENDFLAGS flags, wchar* message);
  /*[id(0x6001002C)]*/ int SendEx(int fromPlayerId, int toPlayerId, CONST_DPSENDFLAGS flags, DirectPlayMessage msg, int priority, int timeOut, int context, out int messageid);
  /*[id(0x6001002D)]*/ int CreateMessage(out DirectPlayMessage msg);
  /*[id(0x6001002E)]*/ int SetGroupConnectionSettings(int id, DirectPlayLobbyConnection connection);
  /*[id(0x6001002F)]*/ int SetGroupData(int GroupId, wchar* data, CONST_DPSETFLAGS flags);
  /*[id(0x60010030)]*/ int SetGroupName(int GroupId, wchar* friendlyName, wchar* formalName, CONST_DPSETFLAGS flags);
  /*[id(0x60010031)]*/ int SetGroupOwner(int GroupId, int ownerId);
  /*[id(0x60010032)]*/ int SetPlayerData(int playerId, wchar* data, CONST_DPSETFLAGS flags);
  /*[id(0x60010033)]*/ int SetPlayerName(int playerId, wchar* friendlyName, wchar* formalName, CONST_DPSETFLAGS flags);
  /*[id(0x60010034)]*/ int SetSessionDesc(DirectPlaySessionData sessionDesc);
  /*[id(0x60010035)]*/ int StartSession(int id);
  /*[id(0x60010036)]*/ int CreateSessionData(out DirectPlaySessionData sessionDesc);
}

// DirectPlayLobby3 Interface
interface DirectPlayLobby3 : IUnknown {
  mixin(uuid("9f76ff10-8e92-11d1-8808-00c04fc2c602"));
  // static DWINGUID IID = { 0x9f76ff10, 0x8e92, 0x11d1, 0x88, 0x08, 0x00, 0xc0, 0x4f, 0xc2, 0xc6, 0x02 };
  /*[id(0x60010000)]*/ int InternalSetObject(IUnknown lpdd);
  /*[id(0x60010001)]*/ int InternalGetObject(out IUnknown lpdd);
  /*[id(0x60010002)]*/ int connect(CONST_DPCONNECTFLAGS flags, out DirectPlay4 directPlay);
  /*[id(0x60010003)]*/ int GetDPEnumLocalApplications(out DirectPlayEnumLocalApplications retval);
  /*[id(0x60010004)]*/ int GetConnectionSettings(int applicationId, out DirectPlayLobbyConnection connection);
  /*[id(0x60010005)]*/ int ReceiveLobbyMessage(int applicationId, ref int messageFlags, out DirectPlayMessage data);
  /*[id(0x60010006)]*/ int ReceiveLobbyMessageSize(int applicationId, ref int messageFlags, out int dataSize);
  /*[id(0x60010007)]*/ int RunApplication(DirectPlayLobbyConnection connection, int receiveEvent, out int applicationId);
  /*[id(0x60010008)]*/ int SendLobbyMessage(CONST_DPLMSG flags, int applicationId, DirectPlayMessage msg);
  /*[id(0x60010009)]*/ int SetConnectionSettings(int applicationId, DirectPlayLobbyConnection connection);
  /*[id(0x6001000A)]*/ int SetLobbyMessageEvent(int applicationId, int receiveEvent);
  /*[id(0x6001000B)]*/ int RegisterApplication(DPAPPLICATIONDESC2* ApplicationInfo);
  /*[id(0x6001000C)]*/ int UnregisterApplication(wchar* guidApplication);
  /*[id(0x6001000D)]*/ int WaitForConnectionSettings(CONST_DPLWAIT flags);
  /*[id(0x6001000E)]*/ int CreateMessage(out DirectPlayMessage msg);
  /*[id(0x6001000F)]*/ int CreateConnectionData(out DirectPlayLobbyConnection connection);
  /*[id(0x60010010)]*/ int CreateINetAddress(wchar* addr, int port, out DirectPlayAddress ret);
  /*[id(0x60010011)]*/ int CreateComPortAddress(int port, int baudRate, int stopBits, int parity, int flowcontrol, out DirectPlayAddress ret);
  /*[id(0x60010012)]*/ int CreateLobbyProviderAddress(wchar* guid, out DirectPlayAddress ret);
  /*[id(0x60010013)]*/ int CreateServiceProviderAddress(wchar* guid, out DirectPlayAddress ret);
  /*[id(0x60010014)]*/ int CreateModemAddress(wchar* modem, wchar* phone, out DirectPlayAddress ret);
  /*[id(0x60010015)]*/ int CreateIPXAddress(out DirectPlayAddress ret);
  /*[id(0x60010016)]*/ int CreateCustomAddress(int size, void* data, out DirectPlayAddress ret);
  /*[id(0x60010017)]*/ int GetModemName(int index, out wchar* name);
  /*[id(0x60010018)]*/ int GetModemCount(out int count);
}

// Direct3DRMEnumerateObjectsCallback Interface
interface Direct3DRMEnumerateObjectsCallback : IUnknown {
  mixin(uuid("bbd5ad04-8e91-11d1-8808-00c04fc2c602"));
  // static DWINGUID IID = { 0xbbd5ad04, 0x8e91, 0x11d1, 0x88, 0x08, 0x00, 0xc0, 0x4f, 0xc2, 0xc6, 0x02 };
  /*[id(0x60010000)]*/ int CallbackRMEnumerateObjects(Direct3DRMObject object, IDispatch userArgument);
}

// Direct3DRMObject Interface
interface Direct3DRMObject : IUnknown {
  mixin(uuid("9f76fe0e-8e92-11d1-8808-00c04fc2c602"));
  // static DWINGUID IID = { 0x9f76fe0e, 0x8e92, 0x11d1, 0x88, 0x08, 0x00, 0xc0, 0x4f, 0xc2, 0xc6, 0x02 };
  /*[id(0x60010000)]*/ int InternalSetObject(IUnknown lpdd);
  /*[id(0x60010001)]*/ int InternalGetObject(out IUnknown lpdd);
  /*[id(0x60010002)]*/ int AddDestroyCallback(Direct3DRMCallback fn, IDispatch arg);
  /*[id(0x60010003)]*/ int DeleteDestroyCallback(Direct3DRMCallback fn, IDispatch args);
  /*[id(0x60010004)]*/ int CloneObject(out Direct3DRMObject retV);
  /*[id(0x60010005)]*/ int SetAppData(int data);
  /*[id(0x60010006)]*/ int GetAppData(out int data);
  /*[id(0x60010007)]*/ int SetName(wchar* name);
  /*[id(0x60010008)]*/ int GetName(out wchar* name);
  /*[id(0x60010009)]*/ int GetClassName(out wchar* name);
}

// Direct3DRMCallback Interface
interface Direct3DRMCallback : IUnknown {
  mixin(uuid("bbd5ad03-8e91-11d1-8808-00c04fc2c602"));
  // static DWINGUID IID = { 0xbbd5ad03, 0x8e91, 0x11d1, 0x88, 0x08, 0x00, 0xc0, 0x4f, 0xc2, 0xc6, 0x02 };
  /*[id(0x60010000)]*/ int CallbackRMDestroyObject(IDispatch args);
}

// Direct3DRMLoadCallback Interface
interface Direct3DRMLoadCallback : IUnknown {
  mixin(uuid("bbd5ad0a-8e91-11d1-8808-00c04fc2c602"));
  // static DWINGUID IID = { 0xbbd5ad0a, 0x8e91, 0x11d1, 0x88, 0x08, 0x00, 0xc0, 0x4f, 0xc2, 0xc6, 0x02 };
  /*[id(0x60010000)]*/ int CallbackRMLoad(Direct3DRMObject* Obj, wchar* guid, IDispatch userArgument);
}

// Direct3DRMLoadTextureCallback3 Interface
interface Direct3DRMLoadTextureCallback3 : IUnknown {
  mixin(uuid("bbd5ad16-8e91-11d1-8808-00c04fc2c602"));
  // static DWINGUID IID = { 0xbbd5ad16, 0x8e91, 0x11d1, 0x88, 0x08, 0x00, 0xc0, 0x4f, 0xc2, 0xc6, 0x02 };
  /*[id(0x60010000)]*/ int CallbackRMLoadTexture(wchar* textureName, IDispatch userArgument, out Direct3DRMTexture3 retV);
}

// Direct3DRMTexture3 Interface
interface Direct3DRMTexture3 : IUnknown {
  mixin(uuid("9f76fe28-8e92-11d1-8808-00c04fc2c602"));
  // static DWINGUID IID = { 0x9f76fe28, 0x8e92, 0x11d1, 0x88, 0x08, 0x00, 0xc0, 0x4f, 0xc2, 0xc6, 0x02 };
  /*[id(0x60010000)]*/ int InternalSetObject(IUnknown lpdd);
  /*[id(0x60010001)]*/ int InternalGetObject(out IUnknown lpdd);
  /*[id(0x60010002)]*/ int AddDestroyCallback(Direct3DRMCallback fn, IDispatch arg);
  /*[id(0x60010003)]*/ int DeleteDestroyCallback(Direct3DRMCallback fn, IDispatch args);
  /*[id(0x60010004)]*/ int CloneObject(out Direct3DRMObject retV);
  /*[id(0x60010005)]*/ int SetAppData(int data);
  /*[id(0x60010006)]*/ int GetAppData(out int data);
  /*[id(0x60010007)]*/ int SetName(wchar* name);
  /*[id(0x60010008)]*/ int GetName(out wchar* name);
  /*[id(0x60010009)]*/ int GetClassName(out wchar* name);
  /*[id(0x6001000A)]*/ int Changed(CONST_D3DRMTEXTURECHANGEDFLAGS flags, int nRects, SAFEARRAY* rects);
  /*[id(0x6001000B)]*/ int GenerateMIPMap();
  /*[id(0x6001000C)]*/ int GetCacheFlags(out CONST_D3DRMTEXTURECACHEFLAGS ret);
  /*[id(0x6001000D)]*/ int GetCacheImportance(out int ret);
  /*[id(0x6001000E)]*/ int GetColors(out int c);
  /*[id(0x6001000F)]*/ int GetDecalOrigin(out int x, out int y);
  /*[id(0x60010010)]*/ int GetDecalScale(out CONST_DBOOLFLAGS considerScale);
  /*[id(0x60010011)]*/ int GetDecalSize(out float w, out float h);
  /*[id(0x60010012)]*/ int GetDecalTransparency(out CONST_DBOOLFLAGS enabled);
  /*[id(0x60010013)]*/ int GetDecalTransparentColor(out int tc);
  /*[id(0x60010014)]*/ int GetShades(out int shades);
  /*[id(0x60010015)]*/ int GetSurface(int flags, out DirectDrawSurface4 surface);
  /*[id(0x60010016)]*/ int SetCacheOptions(int importance, CONST_D3DRMTEXTURECACHEFLAGS flags);
  /*[id(0x60010017)]*/ int SetColors(int numColors);
  /*[id(0x60010018)]*/ int SetDecalOrigin(int x, int y);
  /*[id(0x60010019)]*/ int SetDecalScale(CONST_DBOOLFLAGS considerScale);
  /*[id(0x6001001A)]*/ int SetDecalSize(float width, float height);
  /*[id(0x6001001B)]*/ int SetDecalTransparency(CONST_DBOOLFLAGS transparencyEnabled);
  /*[id(0x6001001C)]*/ int SetDecalTransparentColor(int tcolor);
  /*[id(0x6001001D)]*/ int SetShades(int numShades);
}

// DirectDrawSurface4 Interface
interface DirectDrawSurface4 : IUnknown {
  mixin(uuid("bcaa7da3-f7ef-11d2-93fd-00c04fc2c602"));
  // static DWINGUID IID = { 0xbcaa7da3, 0xf7ef, 0x11d2, 0x93, 0xfd, 0x00, 0xc0, 0x4f, 0xc2, 0xc6, 0x02 };
  /*[id(0x60010000)]*/ int InternalSetObject(IUnknown lpdds);
  /*[id(0x60010001)]*/ int InternalGetObject(out IUnknown lpdds);
  /*[id(0x60010002)]*/ int AddAttachedSurface(DirectDrawSurface4 ddS);
  /*[id(0x60010003)]*/ int Blt(RECT* destRect, DirectDrawSurface4 ddS, RECT* srcRect, CONST_DDBLTFLAGS flags, out int status);
  /*[id(0x60010004)]*/ int BltColorFill(RECT* destRect, int fillvalue, out int status);
  /*[id(0x60010005)]*/ int BltFast(int dx, int dy, DirectDrawSurface4 ddS, RECT* srcRect, CONST_DDBLTFASTFLAGS trans, out int status);
  /*[id(0x60010006)]*/ int BltFx(RECT* destRect, DirectDrawSurface4 ddS, RECT* srcRect, CONST_DDBLTFLAGS flags, DDBLTFX* BltFx, out int status);
  /*[id(0x60010007)]*/ int BltToDC(int hdc, RECT* srcRect, RECT* destRect);
  /*[id(0x60010008)]*/ int ChangeUniquenessValue();
  /*[id(0x60010009)]*/ int DeleteAttachedSurface(DirectDrawSurface4 ddS);
  /*[id(0x6001000A)]*/ int DrawBox(int x1, int y1, int x2, int y2);
  /*[id(0x6001000B)]*/ int DrawCircle(int x1, int y1, int r);
  /*[id(0x6001000C)]*/ int DrawEllipse(int x1, int y1, int x2, int y2);
  /*[id(0x6001000D)]*/ int DrawLine(int x1, int y1, int x2, int y2);
  /*[id(0x6001000E)]*/ int DrawRoundedBox(int x1, int y1, int x2, int y2, int rw, int rh);
  /*[id(0x6001000F)]*/ int DrawText(int x, int y, wchar* text, short b);
  /*[id(0x60010010)]*/ int Flip(DirectDrawSurface4 ddS, CONST_DDFLIPFLAGS flags);
  /*[id(0x60010011)]*/ int GetAttachedSurface(DDSCAPS2* caps, out DirectDrawSurface4 ddS);
  /*[id(0x60010012)]*/ int GetBltStatus(CONST_DDGFSFLAGS flags, out int status);
  /*[id(0x60010013)]*/ int GetCaps(ref DDSCAPS2 caps);
  /*[id(0x60010014)]*/ int GetClipper(out DirectDrawClipper val);
  /*[id(0x60010015)]*/ int GetColorKey(int flags, ref DDCOLORKEY val);
  /*[id(0x60010016)]*/ int GetDC(out int hdc);
  /*[id(0x60010017)]*/ int GetDirectDraw(out DirectDraw4 val);
  /*[id(0x60010018)]*/ int getDrawStyle(out int drawStyle);
  /*[id(0x60010019)]*/ int getDrawWidth(out int drawWidth);
  /*[id(0x6001001A)]*/ int GetFillColor(out int color);
  /*[id(0x6001001B)]*/ int GetFillStyle(out int fillStyle);
  /*[id(0x6001001C)]*/ int GetFlipStatus(CONST_DDGFSFLAGS flags, out int status);
  /*[id(0x6001001D)]*/ int GetFontTransparency(out short b);
  /*[id(0x6001001E)]*/ int GetForeColor(out int color);
  /*[id(0x6001001F)]*/ int GetLockedPixel(int x, int y, out int col);
  /*[id(0x60010020)]*/ int GetPalette(out DirectDrawPalette val);
  /*[id(0x60010021)]*/ int GetPixelFormat(ref DDPIXELFORMAT pf);
  /*[id(0x60010022)]*/ int GetSurfaceDesc(ref DDSURFACEDESC2 surface);
  /*[id(0x60010023)]*/ int GetUniquenessValue(out int retval);
  /*[id(0x60010024)]*/ int isLost(out int status);
  /*[id(0x60010025)]*/ int Lock(RECT* r, DDSURFACEDESC2* desc, CONST_DDLOCKFLAGS flags, int hnd);
  /*[id(0x60010026)]*/ int ReleaseDC(int hdc);
  /*[id(0x60010027)]*/ int restore();
  /*[id(0x60010028)]*/ int SetClipper(DirectDrawClipper val);
  /*[id(0x60010029)]*/ int SetColorKey(CONST_DDCKEYFLAGS flags, DDCOLORKEY* val);
  /*[id(0x6001002A)]*/ int setDrawStyle(int drawStyle);
  /*[id(0x6001002B)]*/ int setDrawWidth(int drawWidth);
  /*[id(0x6001002C)]*/ int SetFillColor(int color);
  /*[id(0x6001002D)]*/ int SetFillStyle(int fillStyle);
  /*[id(0x6001002E)]*/ int SetFont(IFont font);
  /*[id(0x6001002F)]*/ int SetFontTransparency(short b);
  /*[id(0x60010030)]*/ int SetForeColor(int color);
  /*[id(0x60010031)]*/ int SetLockedPixel(int x, int y, int col);
  /*[id(0x60010032)]*/ int SetPalette(DirectDrawPalette ddp);
  /*[id(0x60010033)]*/ int Unlock(RECT* r);
  /*[id(0x60010034)]*/ int GetLockedArray(SAFEARRAY* array);
  /*[id(0x60010035)]*/ int SetFontBackColor(int color);
  /*[id(0x60010036)]*/ int GetFontBackColor(out int color);
}

// DirectDrawClipper Interface
interface DirectDrawClipper : IUnknown {
  mixin(uuid("9f76fdca-8e92-11d1-8808-00c04fc2c602"));
  // static DWINGUID IID = { 0x9f76fdca, 0x8e92, 0x11d1, 0x88, 0x08, 0x00, 0xc0, 0x4f, 0xc2, 0xc6, 0x02 };
  /*[id(0x60010000)]*/ int InternalSetObject(IUnknown lpddc);
  /*[id(0x60010001)]*/ int InternalGetObject(out IUnknown lpddc);
  /*[id(0x60010002)]*/ int GetClipListSize(out int count);
  /*[id(0x60010003)]*/ int GetClipList(ref SAFEARRAY rects);
  /*[id(0x60010004)]*/ int SetClipList(int count, SAFEARRAY* rects);
  /*[id(0x60010005)]*/ int GetHWnd(out int hdl);
  /*[id(0x60010006)]*/ int SetHWnd(int hdl);
  /*[id(0x60010007)]*/ int IsClipListChanged(out int status);
}

// IDirectDraw4 Interface
interface DirectDraw4 : IUnknown {
  mixin(uuid("bcaa7da2-f7ef-11d2-93fd-00c04fc2c602"));
  // static DWINGUID IID = { 0xbcaa7da2, 0xf7ef, 0x11d2, 0x93, 0xfd, 0x00, 0xc0, 0x4f, 0xc2, 0xc6, 0x02 };
  /*[id(0x60010000)]*/ int InternalSetObject(IUnknown lpdd);
  /*[id(0x60010001)]*/ int InternalGetObject(out IUnknown lpdd);
  /*[id(0x60010002)]*/ int CreateClipper(int flags, out DirectDrawClipper val);
  /*[id(0x60010003)]*/ int CreatePalette(CONST_DDPCAPSFLAGS flags, SAFEARRAY* pe, out DirectDrawPalette val);
  /*[id(0x60010004)]*/ int CreateSurface(DDSURFACEDESC2* dd, out DirectDrawSurface4 retV);
  /*[id(0x60010005)]*/ int CreateSurfaceFromFile(wchar* file, ref DDSURFACEDESC2 dd, out DirectDrawSurface4 retV);
  /*[id(0x60010006)]*/ int CreateSurfaceFromResource(wchar* file, wchar* resName, ref DDSURFACEDESC2 ddsd, out DirectDrawSurface4 retV);
  /*[id(0x60010007)]*/ int DuplicateSurface(DirectDrawSurface4 ddIn, out DirectDrawSurface4 ddOut);
  /*[id(0x60010008)]*/ int FlipToGDISurface();
  /*[id(0x60010009)]*/ int GetAvailableTotalMem(DDSCAPS2* ddsCaps, out int m);
  /*[id(0x6001000A)]*/ int GetCaps(ref DDCAPS hwCaps, ref DDCAPS helCaps);
  /*[id(0x6001000B)]*/ int GetDisplayMode(ref DDSURFACEDESC2 surface);
  /*[id(0x6001000C)]*/ int GetDisplayModesEnum(CONST_DDEDMFLAGS flags, DDSURFACEDESC2* ddsd, out DirectDrawEnumModes retval);
  /*[id(0x6001000D)]*/ int GetFourCCCodes(ref SAFEARRAY ccCodes);
  /*[id(0x6001000E)]*/ int GetFreeMem(DDSCAPS2* ddsCaps, out int m);
  /*[id(0x6001000F)]*/ int GetGDISurface(out DirectDrawSurface4 s);
  /*[id(0x60010010)]*/ int GetMonitorFrequency(out int freq);
  /*[id(0x60010011)]*/ int GetNumFourCCCodes(out int nCodes);
  /*[id(0x60010012)]*/ int GetScanLine(ref int lines, out int status);
  /*[id(0x60010013)]*/ int GetSurfaceFromDC(int hdc, out DirectDrawSurface4 retV);
  /*[id(0x60010014)]*/ int GetVerticalBlankStatus(out int status);
  /*[id(0x60010015)]*/ int LoadPaletteFromBitmap(wchar* bName, out DirectDrawPalette retV);
  /*[id(0x60010016)]*/ int RestoreAllSurfaces();
  /*[id(0x60010017)]*/ int RestoreDisplayMode();
  /*[id(0x60010018)]*/ int SetCooperativeLevel(int hdl, CONST_DDSCLFLAGS flags);
  /*[id(0x60010019)]*/ int SetDisplayMode(int w, int h, int bpp, int refParam, CONST_DDSDMFLAGS mode);
  /*[id(0x6001001A)]*/ int TestCooperativeLevel(out int status);
  /*[id(0x6001001B)]*/ int WaitForVerticalBlank(CONST_DDWAITVBFLAGS flags, int handle, out int status);
}

// DirectDrawPalette Interface
interface DirectDrawPalette : IUnknown {
  mixin(uuid("9f76fdc9-8e92-11d1-8808-00c04fc2c602"));
  // static DWINGUID IID = { 0x9f76fdc9, 0x8e92, 0x11d1, 0x88, 0x08, 0x00, 0xc0, 0x4f, 0xc2, 0xc6, 0x02 };
  /*[id(0x60010000)]*/ int InternalSetObject(IUnknown lpddp);
  /*[id(0x60010001)]*/ int InternalGetObject(out IUnknown lpddp);
  /*[id(0x60010002)]*/ int GetCaps(out CONST_DDPCAPSFLAGS caps);
  /*[id(0x60010003)]*/ int GetEntries(int start, int count, ref SAFEARRAY val);
  /*[id(0x60010004)]*/ int SetEntries(int start, int count, SAFEARRAY* val);
  /*[id(0x60010005)]*/ int SetEntriesHalftone(int start, int count);
  /*[id(0x60010006)]*/ int SetEntriesSystemPalette(int start, int count);
}

// DirectDrawEnumModes Interface
interface DirectDrawEnumModes : IUnknown {
  mixin(uuid("9f76ffff-8e92-11d1-8808-00c04fc2c602"));
  // static DWINGUID IID = { 0x9f76ffff, 0x8e92, 0x11d1, 0x88, 0x08, 0x00, 0xc0, 0x4f, 0xc2, 0xc6, 0x02 };
  /*[id(0x60010000)]*/ int GetItem(int index, ref DDSURFACEDESC2 info);
  /*[id(0x60010001)]*/ int GetCount(out int count);
}

interface IFont : IUnknown {
  mixin(uuid("bef6e002-a874-101a-8bba-00aa00300cab"));
  // static DWINGUID IID = { 0xbef6e002, 0xa874, 0x101a, 0x8b, 0xba, 0x00, 0xaa, 0x00, 0x30, 0x0c, 0xab };
  /*[id(0x60010000)]*/ int get_Name(out wchar* pName);
  /*[id(0x60010001)]*/ int put_Name(wchar* name);
  /*[id(0x60010002)]*/ int get_Size(out long pSize);
  /*[id(0x60010003)]*/ int put_Size(long size);
  /*[id(0x60010004)]*/ int get_Bold(out int pBold);
  /*[id(0x60010005)]*/ int put_Bold(int bold);
  /*[id(0x60010006)]*/ int get_Italic(out int pItalic);
  /*[id(0x60010007)]*/ int put_Italic(int italic);
  /*[id(0x60010008)]*/ int get_Underline(out int pUnderline);
  /*[id(0x60010009)]*/ int put_Underline(int underline);
  /*[id(0x6001000A)]*/ int get_Strikethrough(out int pStrikethrough);
  /*[id(0x6001000B)]*/ int put_Strikethrough(int strikethrough);
  /*[id(0x6001000C)]*/ int get_Weight(out short pWeight);
  /*[id(0x6001000D)]*/ int put_Weight(short weight);
  /*[id(0x6001000E)]*/ int get_Charset(out short pCharset);
  /*[id(0x6001000F)]*/ int put_Charset(short charset);
  /*[id(0x60010010)]*/ int get_hFont(out wireHFONT phFont);
  /*[id(0x60010011)]*/ int Clone(out IFont ppFont);
  /*[id(0x60010012)]*/ int IsEqual(IFont pFontOther);
  /*[id(0x60010013)]*/ int SetRatio(int cyLogical, int cyHimetric);
  /*[id(0x60010014)]*/ int QueryTextMetrics(out tagTEXTMETRICW pTM);
  /*[id(0x60010015)]*/ int AddRefHfont(wireHFONT hFont);
  /*[id(0x60010016)]*/ int ReleaseHfont(wireHFONT hFont);
  /*[id(0x60010017)]*/ int SetHdc(wireHDC hdc);
}

// Direct3D7 Interface
interface Direct3D7 : IUnknown {
  mixin(uuid("9f76fdd5-8e92-11d1-8808-00c04fc2c602"));
  // static DWINGUID IID = { 0x9f76fdd5, 0x8e92, 0x11d1, 0x88, 0x08, 0x00, 0xc0, 0x4f, 0xc2, 0xc6, 0x02 };
  /*[id(0x60010000)]*/ int InternalSetObject(IUnknown lpdd);
  /*[id(0x60010001)]*/ int InternalGetObject(out IUnknown lpdd);
  /*[id(0x60010002)]*/ int CreateDevice(wchar* guid, DirectDrawSurface7 surf, out Direct3DDevice7 ret);
  /*[id(0x60010003)]*/ int CreateVertexBuffer(D3DVERTEXBUFFERDESC* desc, CONST_D3DDPFLAGS flags, out Direct3DVertexBuffer7 f);
  /*[id(0x60010004)]*/ int EvictManagedTextures();
  /*[id(0x60010005)]*/ int GetDevicesEnum(out Direct3DEnumDevices retV);
  /*[id(0x60010006)]*/ int GetDirectDraw(out DirectDraw7 retV);
  /*[id(0x60010007)]*/ int GetEnumZBufferFormats(wchar* guid, out Direct3DEnumPixelFormats retV);
}

// DirectDrawSurface7 Interface
interface DirectDrawSurface7 : IUnknown {
  mixin(uuid("9f76fde8-8e92-11d1-8808-00c04fc2c602"));
  // static DWINGUID IID = { 0x9f76fde8, 0x8e92, 0x11d1, 0x88, 0x08, 0x00, 0xc0, 0x4f, 0xc2, 0xc6, 0x02 };
  /*[id(0x60010000)]*/ int InternalSetObject(IUnknown lpdds);
  /*[id(0x60010001)]*/ int InternalGetObject(out IUnknown lpdds);
  /*[id(0x60010002)]*/ int AddAttachedSurface(DirectDrawSurface7 ddS);
  /*[id(0x60010003)]*/ int Blt(RECT* destRect, DirectDrawSurface7 ddS, RECT* srcRect, CONST_DDBLTFLAGS flags, out int status);
  /*[id(0x60010004)]*/ int BltColorFill(RECT* destRect, int fillvalue, out int status);
  /*[id(0x60010005)]*/ int BltFast(int dx, int dy, DirectDrawSurface7 ddS, RECT* srcRect, CONST_DDBLTFASTFLAGS trans, out int status);
  /*[id(0x60010006)]*/ int BltFx(RECT* destRect, DirectDrawSurface7 ddS, RECT* srcRect, CONST_DDBLTFLAGS flags, DDBLTFX* BltFx, out int status);
  /*[id(0x60010007)]*/ int BltToDC(int hdc, RECT* srcRect, RECT* destRect);
  /*[id(0x60010008)]*/ int ChangeUniquenessValue();
  /*[id(0x60010009)]*/ int DeleteAttachedSurface(DirectDrawSurface7 ddS);
  /*[id(0x6001000A)]*/ int DrawBox(int x1, int y1, int x2, int y2);
  /*[id(0x6001000B)]*/ int DrawCircle(int x1, int y1, int r);
  /*[id(0x6001000C)]*/ int DrawEllipse(int x1, int y1, int x2, int y2);
  /*[id(0x6001000D)]*/ int DrawLine(int x1, int y1, int x2, int y2);
  /*[id(0x6001000E)]*/ int DrawRoundedBox(int x1, int y1, int x2, int y2, int rw, int rh);
  /*[id(0x6001000F)]*/ int DrawText(int x, int y, wchar* text, short b);
  /*[id(0x60010010)]*/ int Flip(DirectDrawSurface7 ddS, CONST_DDFLIPFLAGS flags);
  /*[id(0x60010011)]*/ int GetAttachedSurface(DDSCAPS2* caps, out DirectDrawSurface7 ddS);
  /*[id(0x60010012)]*/ int GetAttachedSurfaceEnum(out DirectDrawEnumSurfaces retval);
  /*[id(0x60010013)]*/ int GetBltStatus(CONST_DDGFSFLAGS flags, out int status);
  /*[id(0x60010014)]*/ int GetCaps(ref DDSCAPS2 caps);
  /*[id(0x60010015)]*/ int GetClipper(out DirectDrawClipper val);
  /*[id(0x60010016)]*/ int GetColorKey(int flags, ref DDCOLORKEY val);
  /*[id(0x60010017)]*/ int GetDC(out int hdc);
  /*[id(0x60010018)]*/ int GetDirectDraw(out DirectDraw7 val);
  /*[id(0x60010019)]*/ int GetDirectDrawColorControl(out DirectDrawColorControl retV);
  /*[id(0x6001001A)]*/ int GetDirectDrawGammaControl(out DirectDrawGammaControl retV);
  /*[id(0x6001001B)]*/ int getDrawStyle(out int drawStyle);
  /*[id(0x6001001C)]*/ int getDrawWidth(out int drawWidth);
  /*[id(0x6001001D)]*/ int GetFillColor(out int color);
  /*[id(0x6001001E)]*/ int GetFillStyle(out int fillStyle);
  /*[id(0x6001001F)]*/ int GetFlipStatus(CONST_DDGFSFLAGS flags, out int status);
  /*[id(0x60010020)]*/ int GetFontTransparency(out short b);
  /*[id(0x60010021)]*/ int GetForeColor(out int color);
  /*[id(0x60010022)]*/ int GetLockedPixel(int x, int y, out int col);
  /*[id(0x60010023)]*/ int GetPalette(out DirectDrawPalette val);
  /*[id(0x60010024)]*/ int GetPixelFormat(ref DDPIXELFORMAT pf);
  /*[id(0x60010025)]*/ int GetSurfaceDesc(ref DDSURFACEDESC2 surface);
  /*[id(0x60010026)]*/ int GetUniquenessValue(out int retval);
  /*[id(0x60010027)]*/ int isLost(out int status);
  /*[id(0x60010028)]*/ int Lock(RECT* r, DDSURFACEDESC2* desc, CONST_DDLOCKFLAGS flags, int hnd);
  /*[id(0x60010029)]*/ int ReleaseDC(int hdc);
  /*[id(0x6001002A)]*/ int restore();
  /*[id(0x6001002B)]*/ int SetClipper(DirectDrawClipper val);
  /*[id(0x6001002C)]*/ int SetColorKey(CONST_DDCKEYFLAGS flags, DDCOLORKEY* val);
  /*[id(0x6001002D)]*/ int setDrawStyle(int drawStyle);
  /*[id(0x6001002E)]*/ int setDrawWidth(int drawWidth);
  /*[id(0x6001002F)]*/ int SetFillColor(int color);
  /*[id(0x60010030)]*/ int SetFillStyle(int fillStyle);
  /*[id(0x60010031)]*/ int SetFont(IFont font);
  /*[id(0x60010032)]*/ int SetFontTransparency(short b);
  /*[id(0x60010033)]*/ int SetForeColor(int color);
  /*[id(0x60010034)]*/ int SetLockedPixel(int x, int y, int col);
  /*[id(0x60010035)]*/ int SetPalette(DirectDrawPalette ddp);
  /*[id(0x60010036)]*/ int Unlock(RECT* r);
  /*[id(0x60010037)]*/ int SetPriority(int priority);
  /*[id(0x60010038)]*/ int GetPriority(out int priority);
  /*[id(0x60010039)]*/ int GetLOD(out int lod);
  /*[id(0x6001003A)]*/ int SetLOD(int lod);
  /*[id(0x6001003B)]*/ int GetLockedArray(SAFEARRAY* array);
  /*[id(0x6001003C)]*/ int SetFontBackColor(int color);
  /*[id(0x6001003D)]*/ int GetFontBackColor(out int color);
  /*[id(0x6001003E)]*/ int UpdateOverlay(RECT* RECT, DirectDrawSurface7 ddS, RECT* rectD, CONST_DDOVERFLAGS flags);
  /*[id(0x6001003F)]*/ int UpdateOverlayZOrder(CONST_DDOVERZFLAGS flags, DirectDrawSurface7 ddS);
  /*[id(0x60010040)]*/ int GetOverlayPosition(ref int x, ref int y);
  /*[id(0x60010041)]*/ int SetOverlayPosition(int x, int y);
  /*[id(0x60010042)]*/ int GetOverlayZOrdersEnum(CONST_DDENUMOVERLAYZFLAGS flags, out DirectDrawEnumSurfaces retval);
  /*[id(0x60010043)]*/ int UpdateOverlayFx(RECT* RECT, DirectDrawSurface7 ddS, RECT* rectD, CONST_DDOVERFLAGS flags, ref DDOVERLAYFX ddoverfx);
}

// DirectDrawEnumSurfaces	 Interface
interface DirectDrawEnumSurfaces : IUnknown {
  mixin(uuid("9f76fde6-8e92-11d1-8808-00c04fc2c602"));
  // static DWINGUID IID = { 0x9f76fde6, 0x8e92, 0x11d1, 0x88, 0x08, 0x00, 0xc0, 0x4f, 0xc2, 0xc6, 0x02 };
  /*[id(0x60010000)]*/ int GetItem(int index, out DirectDrawSurface7 retval);
  /*[id(0x60010001)]*/ int GetCount(out int count);
}

// IDirectDraw7 Interface
interface DirectDraw7 : IUnknown {
  mixin(uuid("9f76fde7-8e92-11d1-8808-00c04fc2c602"));
  // static DWINGUID IID = { 0x9f76fde7, 0x8e92, 0x11d1, 0x88, 0x08, 0x00, 0xc0, 0x4f, 0xc2, 0xc6, 0x02 };
  /*[id(0x60010000)]*/ int InternalSetObject(IUnknown lpdd);
  /*[id(0x60010001)]*/ int InternalGetObject(out IUnknown lpdd);
  /*[id(0x60010002)]*/ int CreateClipper(int flags, out DirectDrawClipper val);
  /*[id(0x60010003)]*/ int CreatePalette(CONST_DDPCAPSFLAGS flags, SAFEARRAY* pe, out DirectDrawPalette val);
  /*[id(0x60010004)]*/ int CreateSurface(DDSURFACEDESC2* dd, out DirectDrawSurface7 retV);
  /*[id(0x60010005)]*/ int CreateSurfaceFromFile(wchar* file, ref DDSURFACEDESC2 dd, out DirectDrawSurface7 retV);
  /*[id(0x60010006)]*/ int CreateSurfaceFromResource(wchar* file, wchar* resName, ref DDSURFACEDESC2 ddsd, out DirectDrawSurface7 retV);
  /*[id(0x60010007)]*/ int DuplicateSurface(DirectDrawSurface7 ddIn, out DirectDrawSurface7 ddOut);
  /*[id(0x60010008)]*/ int FlipToGDISurface();
  /*[id(0x60010009)]*/ int GetAvailableTotalMem(DDSCAPS2* ddsCaps, out int m);
  /*[id(0x6001000A)]*/ int GetCaps(ref DDCAPS hwCaps, ref DDCAPS helCaps);
  /*[id(0x6001000B)]*/ int GetDirect3D(out Direct3D7 retV);
  /*[id(0x6001000C)]*/ int GetDisplayMode(ref DDSURFACEDESC2 surface);
  /*[id(0x6001000D)]*/ int GetDisplayModesEnum(CONST_DDEDMFLAGS flags, DDSURFACEDESC2* ddsd, out DirectDrawEnumModes retval);
  /*[id(0x6001000E)]*/ int GetFourCCCodes(ref SAFEARRAY ccCodes);
  /*[id(0x6001000F)]*/ int GetFreeMem(DDSCAPS2* ddsCaps, out int m);
  /*[id(0x60010010)]*/ int GetGDISurface(out DirectDrawSurface7 s);
  /*[id(0x60010011)]*/ int GetMonitorFrequency(out int freq);
  /*[id(0x60010012)]*/ int GetNumFourCCCodes(out int nCodes);
  /*[id(0x60010013)]*/ int GetScanLine(ref int lines, out int status);
  /*[id(0x60010014)]*/ int GetSurfaceFromDC(int hdc, out DirectDrawSurface7 retV);
  /*[id(0x60010015)]*/ int GetSurfacesEnum(CONST_DDENUMSURFACESFLAGS flags, DDSURFACEDESC2* desc, out DirectDrawEnumSurfaces ret);
  /*[id(0x60010016)]*/ int GetVerticalBlankStatus(out int status);
  /*[id(0x60010017)]*/ int LoadPaletteFromBitmap(wchar* bName, out DirectDrawPalette retV);
  /*[id(0x60010018)]*/ int RestoreAllSurfaces();
  /*[id(0x60010019)]*/ int RestoreDisplayMode();
  /*[id(0x6001001A)]*/ int SetCooperativeLevel(int hdl, CONST_DDSCLFLAGS flags);
  /*[id(0x6001001B)]*/ int SetDisplayMode(int w, int h, int bpp, int refParam, CONST_DDSDMFLAGS mode);
  /*[id(0x6001001C)]*/ int TestCooperativeLevel(out int status);
  /*[id(0x6001001D)]*/ int WaitForVerticalBlank(CONST_DDWAITVBFLAGS flags, int handle, out int status);
  /*[id(0x6001001E)]*/ int GetDeviceIdentifier(CONST_DDDEVICEIDFLAGS flags, out DirectDrawIdentifier ret);
}

// DirectDrawIdentifier Interface
interface DirectDrawIdentifier : IUnknown {
  mixin(uuid("bcaa7da4-f7ef-11d2-93fd-00c04fc2c602"));
  // static DWINGUID IID = { 0xbcaa7da4, 0xf7ef, 0x11d2, 0x93, 0xfd, 0x00, 0xc0, 0x4f, 0xc2, 0xc6, 0x02 };
  /*[id(0x60010000)]*/ int GetDriver(out wchar* ret);
  /*[id(0x60010001)]*/ int GetDescription(out wchar* ret);
  /*[id(0x60010002)]*/ int GetDriverVersion(out int ret);
  /*[id(0x60010003)]*/ int GetDriverSubVersion(out int ret);
  /*[id(0x60010004)]*/ int GetVendorId(out int ret);
  /*[id(0x60010005)]*/ int GetDeviceId(out int ret);
  /*[id(0x60010006)]*/ int GetSubSysId(out int ret);
  /*[id(0x60010007)]*/ int GetRevision(out int ret);
  /*[id(0x60010008)]*/ int GetDeviceIndentifier(out wchar* ret);
  /*[id(0x60010009)]*/ int GetWHQLLevel(out int ret);
}

// DirectDrawColorControl Interface
interface DirectDrawColorControl : IUnknown {
  mixin(uuid("9f76fde0-8e92-11d1-8808-00c04fc2c602"));
  // static DWINGUID IID = { 0x9f76fde0, 0x8e92, 0x11d1, 0x88, 0x08, 0x00, 0xc0, 0x4f, 0xc2, 0xc6, 0x02 };
  /*[id(0x60010000)]*/ int InternalSetObject(IUnknown lpdds);
  /*[id(0x60010001)]*/ int InternalGetObject(out IUnknown lpdds);
  /*[id(0x60010002)]*/ int GetColorControls(ref DDCOLORCONTROL colorControl);
  /*[id(0x60010003)]*/ int SetColorControls(DDCOLORCONTROL* colorControl);
}

// DirectDrawGammaControl Interface
interface DirectDrawGammaControl : IUnknown {
  mixin(uuid("9f76fde9-8e92-11d1-8808-00c04fc2c602"));
  // static DWINGUID IID = { 0x9f76fde9, 0x8e92, 0x11d1, 0x88, 0x08, 0x00, 0xc0, 0x4f, 0xc2, 0xc6, 0x02 };
  /*[id(0x60010000)]*/ int InternalSetObject(IUnknown lpdds);
  /*[id(0x60010001)]*/ int InternalGetObject(out IUnknown lpdds);
  /*[id(0x60010002)]*/ int GetGammaRamp(CONST_DDSGRFLAGS flags, ref DDGAMMARAMP gammaRamp);
  /*[id(0x60010003)]*/ int SetGammaRamp(CONST_DDSGRFLAGS flags, DDGAMMARAMP* gammaRamp);
}

// Direct3DDevice7 Interface
interface Direct3DDevice7 : IUnknown {
  mixin(uuid("9f76fdd7-8e92-11d1-8808-00c04fc2c602"));
  // static DWINGUID IID = { 0x9f76fdd7, 0x8e92, 0x11d1, 0x88, 0x08, 0x00, 0xc0, 0x4f, 0xc2, 0xc6, 0x02 };
  /*[id(0x60010000)]*/ int InternalSetObject(IUnknown lpdd);
  /*[id(0x60010001)]*/ int InternalGetObject(out IUnknown lpdd);
  /*[id(0x60010002)]*/ int ApplyStateBlock(int blockHandle);
  /*[id(0x60010003)]*/ int BeginScene();
  /*[id(0x60010004)]*/ int BeginStateBlock();
  /*[id(0x60010005)]*/ int CaptureStateBlock(int blockHandle);
  /*[id(0x60010006)]*/ int Clear(int count, SAFEARRAY* recs, CONST_D3DCLEARFLAGS flags, int color, float z, int stencil);
  /*[id(0x60010007)]*/ int ComputeSphereVisibility(D3DVECTOR* center, float* radius, out int returnVal);
  /*[id(0x60010008)]*/ int DeleteStateBlock(int blockHandle);
  /*[id(0x60010009)]*/ int DrawIndexedPrimitive(CONST_D3DPRIMITIVETYPE d3dpt, CONST_D3DFVFFLAGS d3dfvf, void* vertices, int VertexCount, SAFEARRAY* indices, int IndicesCount, CONST_D3DDPFLAGS flags);
  /*[id(0x6001000A)]*/ int DrawIndexedPrimitiveVB(CONST_D3DPRIMITIVETYPE d3dpt, Direct3DVertexBuffer7 vertexBuffer, int startVertex, int numVertices, SAFEARRAY* indexArray, int indexcount, CONST_D3DDPFLAGS flags);
  /*[id(0x6001000B)]*/ int DrawPrimitive(CONST_D3DPRIMITIVETYPE d3dpt, CONST_D3DFVFFLAGS d3dfvf, void* vertices, int VertexCount, CONST_D3DDPFLAGS flags);
  /*[id(0x6001000C)]*/ int DrawPrimitiveVB(CONST_D3DPRIMITIVETYPE d3dpt, Direct3DVertexBuffer7 vertexBuffer, int startVertex, int numVertices, CONST_D3DDPFLAGS flags);
  /*[id(0x6001000D)]*/ int EndScene();
  /*[id(0x6001000E)]*/ int EndStateBlock(int* blockHandle);
  /*[id(0x6001000F)]*/ int GetCaps(ref D3DDEVICEDESC7 desc);
  /*[id(0x60010010)]*/ int GetClipStatus(ref D3DCLIPSTATUS clipStatus);
  /*[id(0x60010011)]*/ int GetDirect3D(out Direct3D7 dev);
  /*[id(0x60010012)]*/ int GetLight(int LightIndex, ref D3DLIGHT7 Light);
  /*[id(0x60010013)]*/ int GetLightEnable(int LightIndex, out short b);
  /*[id(0x60010014)]*/ int GetMaterial(ref D3DMATERIAL7 Material);
  /*[id(0x60010015)]*/ int GetRenderState(CONST_D3DRENDERSTATETYPE state, out int renderstate);
  /*[id(0x60010016)]*/ int GetRenderTarget(out DirectDrawSurface7 ppval);
  /*[id(0x60010017)]*/ int GetTexture(int stage, out DirectDrawSurface7 retV);
  /*[id(0x60010018)]*/ int GetTextureFormatsEnum(out Direct3DEnumPixelFormats retval);
  /*[id(0x60010019)]*/ int GetTextureStageState(int stage, CONST_D3DTEXTURESTAGESTATETYPE state, out int val);
  /*[id(0x6001001A)]*/ int GetTransform(CONST_D3DTRANSFORMSTATETYPE transformType, ref D3DMATRIX matrix);
  /*[id(0x6001001B)]*/ int GetViewport(ref D3DVIEWPORT7 viewport);
  /*[id(0x6001001C)]*/ int LightEnable(int LightIndex, short bEnable);
  /*[id(0x6001001D)]*/ int Load(DirectDrawSurface7 DestTex, int xDest, int yDest, DirectDrawSurface7 SrcTex, RECT* rcSrcRect, int flags);
  /*[id(0x6001001E)]*/ int MultiplyTransform(CONST_D3DTRANSFORMSTATETYPE dstTransfromStateType, ref D3DMATRIX matrix);
  /*[id(0x6001001F)]*/ int PreLoad(DirectDrawSurface7 texture);
  /*[id(0x60010020)]*/ int SetClipStatus(D3DCLIPSTATUS* clipStatus);
  /*[id(0x60010021)]*/ int SetLight(int LightIndex, D3DLIGHT7* Light);
  /*[id(0x60010022)]*/ int SetMaterial(D3DMATERIAL7* mat);
  /*[id(0x60010023)]*/ int SetRenderState(CONST_D3DRENDERSTATETYPE state, int renderstate);
  /*[id(0x60010024)]*/ int SetRenderTarget(DirectDrawSurface7 surface);
  /*[id(0x60010025)]*/ int SetTexture(int stage, DirectDrawSurface7 texture);
  /*[id(0x60010026)]*/ int SetTextureStageState(int stage, CONST_D3DTEXTURESTAGESTATETYPE state, int value);
  /*[id(0x60010027)]*/ int SetTransform(CONST_D3DTRANSFORMSTATETYPE transformType, D3DMATRIX* matrix);
  /*[id(0x60010028)]*/ int SetViewport(D3DVIEWPORT7* viewport);
  /*[id(0x60010029)]*/ int ValidateDevice(out int passes);
  /*[id(0x6001002A)]*/ int SetTextureStageStateSingle(int stage, CONST_D3DTEXTURESTAGESINGLE state, float value);
  /*[id(0x6001002B)]*/ int GetTextureStageStateSingle(int stage, CONST_D3DTEXTURESTAGESINGLE state, out float val);
  /*[id(0x6001002C)]*/ int GetInfo(CONST_D3DDEVINFOID lDevInfoID, void * DevInfoType, int lSize);
  /*[id(0x6001002D)]*/ int SetRenderStateSingle(CONST_D3DRENDERSTATESINGLE state, float val);
  /*[id(0x6001002E)]*/ int GetRenderStateSingle(CONST_D3DRENDERSTATESINGLE state, out float val);
  /*[id(0x6001002F)]*/ int GetDeviceGuid(out wchar* ret);
  /*[id(0x60010030)]*/ int CreateStateBlock(CONST_D3DSTATEBLOCKTYPE d3dsbType, out int blockHandle);
  /*[id(0x60010031)]*/ int SetClipPlane(int index, float a, float b, float c, float D);
  /*[id(0x60010032)]*/ int GetClipPlane(int index, ref float a, ref float b, ref float c, ref float D);
}

// Direct3DVertexBuffer7 Interface
interface Direct3DVertexBuffer7 : IUnknown {
  mixin(uuid("9f76fdda-8e92-11d1-8808-00c04fc2c602"));
  // static DWINGUID IID = { 0x9f76fdda, 0x8e92, 0x11d1, 0x88, 0x08, 0x00, 0xc0, 0x4f, 0xc2, 0xc6, 0x02 };
  /*[id(0x60010000)]*/ int InternalSetObject(IUnknown lpdd);
  /*[id(0x60010001)]*/ int InternalGetObject(out IUnknown lpdd);
  /*[id(0x60010002)]*/ int GetVertexBufferDesc(ref D3DVERTEXBUFFERDESC desc);
  /*[id(0x60010003)]*/ int GetVertices(int startIndex, int count, void* verts);
  /*[id(0x60010004)]*/ int Lock(CONST_DDLOCKFLAGS flags);
  /*[id(0x60010005)]*/ int Optimize(Direct3DDevice7 dev);
  /*[id(0x60010006)]*/ int ProcessVertices(CONST_D3DVOPFLAGS vertexOp, int destIndex, int count, Direct3DVertexBuffer7 srcBuffer, int srcIndex, Direct3DDevice7 dev, CONST_D3DPROCESSVERTICESFLAGS flags);
  /*[id(0x60010007)]*/ int SetVertices(int startIndex, int count, void* verts);
  /*[id(0x60010008)]*/ int Unlock();
  /*[id(0x60010009)]*/ int SetVertexSize(int vertexSizeInBytes);
}

// Direct3DEnumPixelFormats Interface
interface Direct3DEnumPixelFormats : IUnknown {
  mixin(uuid("9f76fdd6-8e92-11d1-8808-00c04fc2c602"));
  // static DWINGUID IID = { 0x9f76fdd6, 0x8e92, 0x11d1, 0x88, 0x08, 0x00, 0xc0, 0x4f, 0xc2, 0xc6, 0x02 };
  /*[id(0x60010000)]*/ int GetItem(int index, ref DDPIXELFORMAT pixelFormat);
  /*[id(0x60010001)]*/ int GetCount(out int count);
}

// Direct3DEnumDevices Interface
interface Direct3DEnumDevices : IUnknown {
  mixin(uuid("9f76fdd3-8e92-11d1-8808-00c04fc2c602"));
  // static DWINGUID IID = { 0x9f76fdd3, 0x8e92, 0x11d1, 0x88, 0x08, 0x00, 0xc0, 0x4f, 0xc2, 0xc6, 0x02 };
  /*[id(0x60010000)]*/ int GetGuid(int index, out wchar* guid);
  /*[id(0x60010001)]*/ int GetDescription(int index, out wchar* guid);
  /*[id(0x60010002)]*/ int GetName(int index, out wchar* guid);
  /*[id(0x60010003)]*/ int GetDesc(int index, ref D3DDEVICEDESC7 hwDesc);
  /*[id(0x60010004)]*/ int GetCount(out int count);
}

// DirectDrawEnum Interface
interface DirectDrawEnum : IUnknown {
  mixin(uuid("9f76fde1-8e92-11d1-8808-00c04fc2c602"));
  // static DWINGUID IID = { 0x9f76fde1, 0x8e92, 0x11d1, 0x88, 0x08, 0x00, 0xc0, 0x4f, 0xc2, 0xc6, 0x02 };
  /*[id(0x60010000)]*/ int GetGuid(int index, out wchar* guid);
  /*[id(0x60010001)]*/ int GetDescription(int index, out wchar* ret);
  /*[id(0x60010002)]*/ int GetName(int index, out wchar* ret);
  /*[id(0x60010003)]*/ int GetMonitorHandle(int index, out int ret);
  /*[id(0x60010004)]*/ int GetCount(out int count);
}

// Direct3DRMVisual Interface
interface Direct3DRMVisual : IUnknown {
  mixin(uuid("9f76fe0f-8e92-11d1-8808-00c04fc2c602"));
  // static DWINGUID IID = { 0x9f76fe0f, 0x8e92, 0x11d1, 0x88, 0x08, 0x00, 0xc0, 0x4f, 0xc2, 0xc6, 0x02 };
  /*[id(0x60010000)]*/ int InternalSetObject(IUnknown lpdd);
  /*[id(0x60010001)]*/ int InternalGetObject(out IUnknown lpdd);
  /*[id(0x60010002)]*/ int AddDestroyCallback(Direct3DRMCallback fn, IDispatch arg);
  /*[id(0x60010003)]*/ int DeleteDestroyCallback(Direct3DRMCallback fn, IDispatch args);
  /*[id(0x60010004)]*/ int CloneObject(out Direct3DRMObject retV);
  /*[id(0x60010005)]*/ int SetAppData(int data);
  /*[id(0x60010006)]*/ int GetAppData(out int data);
  /*[id(0x60010007)]*/ int SetName(wchar* name);
  /*[id(0x60010008)]*/ int GetName(out wchar* name);
  /*[id(0x60010009)]*/ int GetClassName(out wchar* name);
}

// Direct3DRMFace2 Interface
interface Direct3DRMFace2 : IUnknown {
  mixin(uuid("9f76fe32-8e92-11d1-8808-00c04fc2c602"));
  // static DWINGUID IID = { 0x9f76fe32, 0x8e92, 0x11d1, 0x88, 0x08, 0x00, 0xc0, 0x4f, 0xc2, 0xc6, 0x02 };
  /*[id(0x60010000)]*/ int InternalSetObject(IUnknown lpdd);
  /*[id(0x60010001)]*/ int InternalGetObject(out IUnknown lpdd);
  /*[id(0x60010002)]*/ int AddDestroyCallback(Direct3DRMCallback fn, IDispatch arg);
  /*[id(0x60010003)]*/ int DeleteDestroyCallback(Direct3DRMCallback fn, IDispatch args);
  /*[id(0x60010004)]*/ int CloneObject(out Direct3DRMObject retV);
  /*[id(0x60010005)]*/ int SetAppData(int data);
  /*[id(0x60010006)]*/ int GetAppData(out int data);
  /*[id(0x60010007)]*/ int SetName(wchar* name);
  /*[id(0x60010008)]*/ int GetName(out wchar* name);
  /*[id(0x60010009)]*/ int GetClassName(out wchar* name);
  /*[id(0x6001000A)]*/ int AddVertex(float x, float y, float z);
  /*[id(0x6001000B)]*/ int AddVertexAndNormalIndexed(int vertexIndex, int normalIndex);
  /*[id(0x6001000C)]*/ int GetColor(out int retV);
  /*[id(0x6001000D)]*/ int GetMaterial(out Direct3DRMMaterial2 retV);
  /*[id(0x6001000E)]*/ int GetNormal(ref D3DVECTOR val);
  /*[id(0x6001000F)]*/ int GetTexture(out Direct3DRMTexture3 refParam);
  /*[id(0x60010010)]*/ int GetTextureCoordinateIndex(int which, out int retV);
  /*[id(0x60010011)]*/ int GetTextureCoordinates(int vertex, ref float u, ref float v);
  /*[id(0x60010012)]*/ int GetVertex(int idx, ref D3DVECTOR vert, ref D3DVECTOR norm);
  /*[id(0x60010013)]*/ int GetVertexCount(out int retV);
  /*[id(0x60010014)]*/ int GetVertexIndex(int which, out int retV);
  /*[id(0x60010015)]*/ int GetVertices(int VertexCount, ref SAFEARRAY coord, ref SAFEARRAY normals);
  /*[id(0x60010016)]*/ int GetVerticesJava(int vertex_cnt, ref float coord, ref float normals);
  /*[id(0x60010017)]*/ int SetColor(int c);
  /*[id(0x60010018)]*/ int SetColorRGB(float r, float g, float b);
  /*[id(0x60010019)]*/ int SetMaterial(Direct3DRMMaterial2 refParam);
  /*[id(0x6001001A)]*/ int SetTexture(Direct3DRMTexture3 refParam);
  /*[id(0x6001001B)]*/ int SetTextureCoordinates(int vertex, float u, float v);
  /*[id(0x6001001C)]*/ int SetTextureTopology(CONST_DBOOLFLAGS wrap_u, CONST_DBOOLFLAGS wrap_v);
  /*[id(0x6001001D)]*/ int GetTextureTopology(ref CONST_DBOOLFLAGS wrap_u, ref CONST_DBOOLFLAGS wrap_v);
}

// Direct3DRMMaterial2 Interface
interface Direct3DRMMaterial2 : IUnknown {
  mixin(uuid("9f76fe21-8e92-11d1-8808-00c04fc2c602"));
  // static DWINGUID IID = { 0x9f76fe21, 0x8e92, 0x11d1, 0x88, 0x08, 0x00, 0xc0, 0x4f, 0xc2, 0xc6, 0x02 };
  /*[id(0x60010000)]*/ int InternalSetObject(IUnknown lpdd);
  /*[id(0x60010001)]*/ int InternalGetObject(out IUnknown lpdd);
  /*[id(0x60010002)]*/ int AddDestroyCallback(Direct3DRMCallback fn, IDispatch arg);
  /*[id(0x60010003)]*/ int DeleteDestroyCallback(Direct3DRMCallback fn, IDispatch args);
  /*[id(0x60010004)]*/ int CloneObject(out Direct3DRMObject retV);
  /*[id(0x60010005)]*/ int SetAppData(int data);
  /*[id(0x60010006)]*/ int GetAppData(out int data);
  /*[id(0x60010007)]*/ int SetName(wchar* name);
  /*[id(0x60010008)]*/ int GetName(out wchar* name);
  /*[id(0x60010009)]*/ int GetClassName(out wchar* name);
  /*[id(0x6001000A)]*/ int SetPower(float power);
  /*[id(0x6001000B)]*/ int SetSpecular(float r, float g, float b);
  /*[id(0x6001000C)]*/ int SetEmissive(float r, float g, float b);
  /*[id(0x6001000D)]*/ int SetAmbient(float r, float g, float b);
  /*[id(0x6001000E)]*/ int GetPower(out float power);
  /*[id(0x6001000F)]*/ int GetSpecular(out float r, out float g, out float b);
  /*[id(0x60010010)]*/ int GetEmissive(out float r, out float g, out float b);
  /*[id(0x60010011)]*/ int GetAmbient(out float r, out float g, out float b);
}

// Direct3DRMLight Interface
interface Direct3DRMLight : IUnknown {
  mixin(uuid("9f76fe03-8e92-11d1-8808-00c04fc2c602"));
  // static DWINGUID IID = { 0x9f76fe03, 0x8e92, 0x11d1, 0x88, 0x08, 0x00, 0xc0, 0x4f, 0xc2, 0xc6, 0x02 };
  /*[id(0x60010000)]*/ int InternalSetObject(IUnknown lpdd);
  /*[id(0x60010001)]*/ int InternalGetObject(out IUnknown lpdd);
  /*[id(0x60010002)]*/ int AddDestroyCallback(Direct3DRMCallback fn, IDispatch arg);
  /*[id(0x60010003)]*/ int DeleteDestroyCallback(Direct3DRMCallback fn, IDispatch args);
  /*[id(0x60010004)]*/ int CloneObject(out Direct3DRMObject retV);
  /*[id(0x60010005)]*/ int SetAppData(int data);
  /*[id(0x60010006)]*/ int GetAppData(out int data);
  /*[id(0x60010007)]*/ int SetName(wchar* name);
  /*[id(0x60010008)]*/ int GetName(out wchar* name);
  /*[id(0x60010009)]*/ int GetClassName(out wchar* name);
  /*[id(0x6001000A)]*/ int SetType(CONST_D3DRMLIGHTTYPE t);
  /*[id(0x6001000B)]*/ int SetColor(int c);
  /*[id(0x6001000C)]*/ int SetColorRGB(float r, float g, float b);
  /*[id(0x6001000D)]*/ int SetRange(float rng);
  /*[id(0x6001000E)]*/ int SetUmbra(float u);
  /*[id(0x6001000F)]*/ int SetPenumbra(float p);
  /*[id(0x60010010)]*/ int SetConstantAttenuation(float atn);
  /*[id(0x60010011)]*/ int SetLinearAttenuation(float atn);
  /*[id(0x60010012)]*/ int SetQuadraticAttenuation(float atn);
  /*[id(0x60010013)]*/ int GetRange(out float retV);
  /*[id(0x60010014)]*/ int GetUmbra(out float retV);
  /*[id(0x60010015)]*/ int GetPenumbra(out float retV);
  /*[id(0x60010016)]*/ int GetConstantAttenuation(out float retV);
  /*[id(0x60010017)]*/ int GetLinearAttenuation(out float retV);
  /*[id(0x60010018)]*/ int GetQuadraticAttenuation(out float retV);
  /*[id(0x60010019)]*/ int GetColor(out int value);
  /*[id(0x6001001A)]*/ int GetType(out CONST_D3DRMLIGHTTYPE retV);
  /*[id(0x6001001B)]*/ int SetEnableFrame(Direct3DRMFrame3 f);
  /*[id(0x6001001C)]*/ int GetEnableFrame(out Direct3DRMFrame3 retV);
}

// Direct3DRMFrame3 Interface
interface Direct3DRMFrame3 : IUnknown {
  mixin(uuid("9f76fe25-8e92-11d1-8808-00c04fc2c602"));
  // static DWINGUID IID = { 0x9f76fe25, 0x8e92, 0x11d1, 0x88, 0x08, 0x00, 0xc0, 0x4f, 0xc2, 0xc6, 0x02 };
  /*[id(0x60010000)]*/ int InternalSetObject(IUnknown lpdd);
  /*[id(0x60010001)]*/ int InternalGetObject(out IUnknown lpdd);
  /*[id(0x60010002)]*/ int AddDestroyCallback(Direct3DRMCallback fn, IDispatch arg);
  /*[id(0x60010003)]*/ int DeleteDestroyCallback(Direct3DRMCallback fn, IDispatch args);
  /*[id(0x60010004)]*/ int CloneObject(out Direct3DRMObject retV);
  /*[id(0x60010005)]*/ int SetAppData(int data);
  /*[id(0x60010006)]*/ int GetAppData(out int data);
  /*[id(0x60010007)]*/ int SetName(wchar* name);
  /*[id(0x60010008)]*/ int GetName(out wchar* name);
  /*[id(0x60010009)]*/ int GetClassName(out wchar* name);
  /*[id(0x6001000A)]*/ int AddVisual(Direct3DRMVisual v);
  /*[id(0x6001000B)]*/ int DeleteVisual(Direct3DRMVisual v);
  /*[id(0x6001000C)]*/ int AddLight(Direct3DRMLight val);
  /*[id(0x6001000D)]*/ int DeleteLight(Direct3DRMLight l);
  /*[id(0x6001000E)]*/ int AddChild(Direct3DRMFrame3 child);
  /*[id(0x6001000F)]*/ int DeleteChild(Direct3DRMFrame3 c);
  /*[id(0x60010010)]*/ int GetTransform(Direct3DRMFrame3 referenceFrame, ref SAFEARRAY val);
  /*[id(0x60010011)]*/ int AddTransform(CONST_D3DRMCOMBINETYPE t, SAFEARRAY* val);
  /*[id(0x60010012)]*/ int AddTranslation(CONST_D3DRMCOMBINETYPE t, float x, float y, float z);
  /*[id(0x60010013)]*/ int AddScale(CONST_D3DRMCOMBINETYPE combineType, float sx, float sy, float sz);
  /*[id(0x60010014)]*/ int AddRotation(CONST_D3DRMCOMBINETYPE combineType, float x, float y, float z, float theta);
  /*[id(0x60010015)]*/ int AddMoveCallback(Direct3DRMFrameMoveCallback3 frameMoveImplementation, IDispatch userArgument, CONST_D3DRMCALLBACKORDERFLAGS flags);
  /*[id(0x60010016)]*/ int DeleteMoveCallback(Direct3DRMFrameMoveCallback3 frameMoveImplementation, IDispatch userArgument);
  /*[id(0x60010017)]*/ int Transform(ref D3DVECTOR D, D3DVECTOR* s);
  /*[id(0x60010018)]*/ int TransformVectors(Direct3DRMFrame3 reference, int num, ref SAFEARRAY DstVectors, ref SAFEARRAY SrcVectors);
  /*[id(0x60010019)]*/ int InverseTransform(ref D3DVECTOR D, D3DVECTOR* s);
  /*[id(0x6001001A)]*/ int InverseTransformVectors(Direct3DRMFrame3 reference, int num, ref SAFEARRAY DstVectors, ref SAFEARRAY SrcVectors);
  /*[id(0x6001001B)]*/ int GetAxes(ref D3DVECTOR dir, ref D3DVECTOR up);
  /*[id(0x6001001C)]*/ int GetBox(ref D3DRMBOX box);
  /*[id(0x6001001D)]*/ int GetBoxEnable(out CONST_DBOOLFLAGS b);
  /*[id(0x6001001E)]*/ int GetChildren(out Direct3DRMFrameArray children);
  /*[id(0x6001001F)]*/ int GetColor(out int retV);
  /*[id(0x60010020)]*/ int GetHierarchyBox(ref D3DRMBOX box);
  /*[id(0x60010021)]*/ int GetInheritAxes(out CONST_DBOOLFLAGS b);
  /*[id(0x60010022)]*/ int GetLights(out Direct3DRMLightArray lights);
  /*[id(0x60010023)]*/ int GetMaterial(Direct3DRMMaterial2* ret);
  /*[id(0x60010024)]*/ int GetMaterialMode(out CONST_D3DRMMATERIALMODE retV);
  /*[id(0x60010025)]*/ int GetOrientation(Direct3DRMFrame3 refParam, ref D3DVECTOR dir, ref D3DVECTOR up);
  /*[id(0x60010026)]*/ int GetMaterialOverride(ref D3DRMMATERIALOVERRIDE overrideParam);
  /*[id(0x60010027)]*/ int GetMaterialOverrideTexture(out Direct3DRMTexture3 ret);
  /*[id(0x60010028)]*/ int GetParent(out Direct3DRMFrame3 retV);
  /*[id(0x60010029)]*/ int GetPosition(Direct3DRMFrame3 refParam, ref D3DVECTOR position);
  /*[id(0x6001002A)]*/ int GetRotation(Direct3DRMFrame3 refParam, ref D3DVECTOR axis, out float theta);
  /*[id(0x6001002B)]*/ int GetScene(out Direct3DRMFrame3 retV);
  /*[id(0x6001002C)]*/ int GetSceneBackground(out int retV);
  /*[id(0x6001002D)]*/ int GetSceneBackgroundDepth(out DirectDrawSurface7 retV);
  /*[id(0x6001002E)]*/ int GetSceneFogColor(out int retV);
  /*[id(0x6001002F)]*/ int GetSceneFogEnable(out CONST_DBOOLFLAGS bEnable);
  /*[id(0x60010030)]*/ int GetSceneFogMode(out CONST_D3DRMFOGMODE retV);
  /*[id(0x60010031)]*/ int GetSceneFogMethod(out CONST_D3DRMFOGMETHOD method);
  /*[id(0x60010032)]*/ int GetSceneFogParams(ref float start, ref float end, ref float density);
  /*[id(0x60010033)]*/ int GetSortMode(out CONST_D3DRMSORTMODE retV);
  /*[id(0x60010034)]*/ int GetTexture(out Direct3DRMTexture3 refParam);
  /*[id(0x60010035)]*/ int GetVelocity(Direct3DRMFrame3 refParam, ref D3DVECTOR vel, CONST_DBOOLFLAGS includeRotationalVelocity);
  /*[id(0x60010036)]*/ int GetVisuals(out Direct3DRMVisualArray visuals);
  /*[id(0x60010037)]*/ int GetVisual(int index, out Direct3DRMVisual visualArray);
  /*[id(0x60010038)]*/ int GetVisualCount(out int vis);
  /*[id(0x60010039)]*/ int GetTraversalOptions(out CONST_D3DRMTRAVERALFLAGS ret);
  /*[id(0x6001003A)]*/ int GetZBufferMode(out CONST_D3DRMZBUFFERMODE ret);
  /*[id(0x6001003B)]*/ int LoadFromFile(wchar* filename, DWINVARIANT id, CONST_D3DRMLOADFLAGS flags, Direct3DRMLoadTextureCallback3 loadTextureImplementation, IDispatch userArgument);
  /*[id(0x6001003C)]*/ int LookAt(Direct3DRMFrame3 tgt, Direct3DRMFrame3 reference, CONST_D3DRMFRAMECONSTRAINT contraint);
  /*[id(0x6001003D)]*/ int Move(float delta);
  /*[id(0x6001003E)]*/ int RayPick(Direct3DRMFrame3 refer, D3DRMRAY* ray, CONST_D3DRMRAYPICKFLAGS flags, out Direct3DRMPick2Array retV);
  /*[id(0x6001003F)]*/ int Save(wchar* name, CONST_D3DRMXOFFORMAT format, CONST_D3DRMSAVEFLAGS flags);
  /*[id(0x60010040)]*/ int SetAxes(float dx, float dy, float dz, float ux, float uy, float uz);
  /*[id(0x60010041)]*/ int SetBox(D3DRMBOX* box);
  /*[id(0x60010042)]*/ int SetBoxEnable(CONST_DBOOLFLAGS boxEnable);
  /*[id(0x60010043)]*/ int SetColor(int c);
  /*[id(0x60010044)]*/ int SetColorRGB(float r, float g, float b);
  /*[id(0x60010045)]*/ int SetInheritAxes(CONST_DBOOLFLAGS inheritFromParent);
  /*[id(0x60010046)]*/ int SetMaterial(Direct3DRMMaterial2 mat);
  /*[id(0x60010047)]*/ int SetMaterialMode(CONST_D3DRMMATERIALMODE val);
  /*[id(0x60010048)]*/ int SetMaterialOverride(ref D3DRMMATERIALOVERRIDE overrideParam);
  /*[id(0x60010049)]*/ int SetMaterialOverrideTexture(Direct3DRMTexture3 tex);
  /*[id(0x6001004A)]*/ int SetOrientation(Direct3DRMFrame3 reference, float dx, float dy, float dz, float ux, float uy, float uz);
  /*[id(0x6001004B)]*/ int SetPosition(Direct3DRMFrame3 reference, float x, float y, float z);
  /*[id(0x6001004C)]*/ int SetQuaternion(Direct3DRMFrame3 reference, D3DRMQUATERNION* quat);
  /*[id(0x6001004D)]*/ int SetRotation(Direct3DRMFrame3 reference, float x, float y, float z, float theta);
  /*[id(0x6001004E)]*/ int SetSceneBackground(int c);
  /*[id(0x6001004F)]*/ int SetSceneBackgroundDepth(DirectDrawSurface7 s);
  /*[id(0x60010050)]*/ int SetSceneBackgroundImage(Direct3DRMTexture3 i);
  /*[id(0x60010051)]*/ int SetSceneBackgroundRGB(float r, float g, float b);
  /*[id(0x60010052)]*/ int SetSceneFogColor(int c);
  /*[id(0x60010053)]*/ int SetSceneFogEnable(CONST_DBOOLFLAGS bEnable);
  /*[id(0x60010054)]*/ int SetSceneFogMethod(CONST_D3DRMFOGMETHOD method);
  /*[id(0x60010055)]*/ int SetSceneFogMode(CONST_D3DRMFOGMODE c);
  /*[id(0x60010056)]*/ int SetSceneFogParams(float start, float end, float density);
  /*[id(0x60010057)]*/ int SetSortMode(CONST_D3DRMSORTMODE val);
  /*[id(0x60010058)]*/ int SetTexture(Direct3DRMTexture3 t);
  /*[id(0x60010059)]*/ int SetTraversalOptions(CONST_D3DRMTRAVERALFLAGS flags);
  /*[id(0x6001005A)]*/ int SetVelocity(Direct3DRMFrame3 reference, float x, float y, float z, CONST_DBOOLFLAGS with_rotation);
  /*[id(0x6001005B)]*/ int SetZbufferMode(CONST_D3DRMZBUFFERMODE val);
}

// Direct3DRMFrameMoveCallback3
interface Direct3DRMFrameMoveCallback3 : IUnknown {
  mixin(uuid("9f76fe33-8e92-11d1-8808-00c04fc2c602"));
  // static DWINGUID IID = { 0x9f76fe33, 0x8e92, 0x11d1, 0x88, 0x08, 0x00, 0xc0, 0x4f, 0xc2, 0xc6, 0x02 };
  /*[id(0x60010000)]*/ int CallbackRMFrameMove(Direct3DRMFrame3 f, IDispatch arg, float delta);
}

// Direct3DRMFrameArray Interface
interface Direct3DRMFrameArray : IUnknown {
  mixin(uuid("9f76fe14-8e92-11d1-8808-00c04fc2c602"));
  // static DWINGUID IID = { 0x9f76fe14, 0x8e92, 0x11d1, 0x88, 0x08, 0x00, 0xc0, 0x4f, 0xc2, 0xc6, 0x02 };
  /*[id(0x60010000)]*/ int InternalSetObject(IUnknown lpdd);
  /*[id(0x60010001)]*/ int InternalGetObject(out IUnknown lpdd);
  /*[id(0x60010002)]*/ int GetSize(out int retV);
  /*[id(0x60010003)]*/ int GetElement(int index, out Direct3DRMFrame3 ppFrame);
}

// IDirect3DRMLightArray Interface
interface Direct3DRMLightArray : IUnknown {
  mixin(uuid("9f76fe16-8e92-11d1-8808-00c04fc2c602"));
  // static DWINGUID IID = { 0x9f76fe16, 0x8e92, 0x11d1, 0x88, 0x08, 0x00, 0xc0, 0x4f, 0xc2, 0xc6, 0x02 };
  /*[id(0x60010000)]*/ int InternalSetObject(IUnknown lpdd);
  /*[id(0x60010001)]*/ int InternalGetObject(out IUnknown lpdd);
  /*[id(0x60010002)]*/ int GetSize(out int retV);
  /*[id(0x60010003)]*/ int GetElement(int index, out Direct3DRMLight retV);
}

// Direct3DRMVisualArray Interface
interface Direct3DRMVisualArray : IUnknown {
  mixin(uuid("9f76fe15-8e92-11d1-8808-00c04fc2c602"));
  // static DWINGUID IID = { 0x9f76fe15, 0x8e92, 0x11d1, 0x88, 0x08, 0x00, 0xc0, 0x4f, 0xc2, 0xc6, 0x02 };
  /*[id(0x60010000)]*/ int InternalSetObject(IUnknown lpdd);
  /*[id(0x60010001)]*/ int InternalGetObject(out IUnknown lpdd);
  /*[id(0x60010002)]*/ int GetSize(out int retV);
  /*[id(0x60010003)]*/ int GetElement(int index, out Direct3DRMVisual retV);
}

// Direct3DRMPick2Array Interface
interface Direct3DRMPick2Array : IUnknown {
  mixin(uuid("9f76fe19-8e92-11d1-8808-00c04fc2c602"));
  // static DWINGUID IID = { 0x9f76fe19, 0x8e92, 0x11d1, 0x88, 0x08, 0x00, 0xc0, 0x4f, 0xc2, 0xc6, 0x02 };
  /*[id(0x60010000)]*/ int InternalSetObject(IUnknown lpdd);
  /*[id(0x60010001)]*/ int InternalGetObject(out IUnknown lpdd);
  /*[id(0x60010002)]*/ int GetSize(out int retV);
  /*[id(0x60010003)]*/ int GetPickVisual(int index, D3DRMPICKDESC2* pickDesc, out Direct3DRMVisual visual);
  /*[id(0x60010004)]*/ int GetPickFrame(int index, D3DRMPICKDESC2* pickDesc, out Direct3DRMFrameArray frameArray);
}

// Direct3DRMMesh Interface
interface Direct3DRMMesh : IUnknown {
  mixin(uuid("9f76fe06-8e92-11d1-8808-00c04fc2c602"));
  // static DWINGUID IID = { 0x9f76fe06, 0x8e92, 0x11d1, 0x88, 0x08, 0x00, 0xc0, 0x4f, 0xc2, 0xc6, 0x02 };
  /*[id(0x60010000)]*/ int InternalSetObject(IUnknown lpdd);
  /*[id(0x60010001)]*/ int InternalGetObject(out IUnknown lpdd);
  /*[id(0x60010002)]*/ int AddDestroyCallback(Direct3DRMCallback fn, IDispatch arg);
  /*[id(0x60010003)]*/ int DeleteDestroyCallback(Direct3DRMCallback fn, IDispatch args);
  /*[id(0x60010004)]*/ int CloneObject(out Direct3DRMObject retV);
  /*[id(0x60010005)]*/ int SetAppData(int data);
  /*[id(0x60010006)]*/ int GetAppData(out int data);
  /*[id(0x60010007)]*/ int SetName(wchar* name);
  /*[id(0x60010008)]*/ int GetName(out wchar* name);
  /*[id(0x60010009)]*/ int GetClassName(out wchar* name);
  /*[id(0x6001000A)]*/ int SetGroupColor(int id, int val);
  /*[id(0x6001000B)]*/ int SetGroupColorRGB(int id, float r, float g, float b);
  /*[id(0x6001000C)]*/ int SetGroupMapping(int id, CONST_D3DRMMAPPINGFLAGS value);
  /*[id(0x6001000D)]*/ int SetGroupQuality(int id, CONST_D3DRMRENDERQUALITY value);
  /*[id(0x6001000E)]*/ int SetGroupMaterial(int id, Direct3DRMMaterial2 val);
  /*[id(0x6001000F)]*/ int SetGroupTexture(int id, Direct3DRMTexture3 val);
  /*[id(0x60010010)]*/ int GetGroupCount(out int retV);
  /*[id(0x60010011)]*/ int GetGroupColor(int id, out int retV);
  /*[id(0x60010012)]*/ int GetGroupMapping(int id, out CONST_D3DRMMAPPINGFLAGS retV);
  /*[id(0x60010013)]*/ int GetGroupQuality(int id, out CONST_D3DRMRENDERQUALITY retV);
  /*[id(0x60010014)]*/ int GetGroupMaterial(int id, out Direct3DRMMaterial2 retV);
  /*[id(0x60010015)]*/ int GetGroupTexture(int id, out Direct3DRMTexture3 retV);
  /*[id(0x60010016)]*/ int ScaleMesh(float sx, float sy, float sz);
  /*[id(0x60010017)]*/ int Translate(float tx, float ty, float tz);
  /*[id(0x60010018)]*/ int GetBox(D3DRMBOX* vector);
  /*[id(0x60010019)]*/ int GetSizes(int id, out int cnt1, out int cnt2, out int cnt3, out int cnt4);
  /*[id(0x6001001A)]*/ int SetVertex(int id, int idx, D3DRMVERTEX* values);
  /*[id(0x6001001B)]*/ int GetVertex(int id, int idx, ref D3DRMVERTEX ret);
  /*[id(0x6001001C)]*/ int GetVertexCount(int id, out int cnt);
  /*[id(0x6001001D)]*/ int AddGroup(int VertexCount, int faceCount, int verticesPerFace, SAFEARRAY* fdata, out int retId);
  /*[id(0x6001001E)]*/ int GetGroupData(int id, ref SAFEARRAY psa);
  /*[id(0x6001001F)]*/ int GetGroupDataSize(int id, out int retval);
  /*[id(0x60010020)]*/ int SetVertices(int id, int idx, int count, SAFEARRAY* vertexArray);
  /*[id(0x60010021)]*/ int GetVertices(int id, int idx, int count, ref SAFEARRAY vertexArray);
  /*[id(0x60010022)]*/ int AddGroupJava(int vcnt, int fcnt, int vPerFace, ref int fdata, out int retId);
  /*[id(0x60010023)]*/ int GetGroupDataJava(int id, int size, ref int fdata);
  /*[id(0x60010024)]*/ int SetVerticesJava(int id, int idx, int cnt, ref float vertexArray);
  /*[id(0x60010025)]*/ int GetVerticesJava(int id, int idx, int cnt, ref float vertexArray);
}

// Direct3DRMWrap Interface
interface Direct3DRMWrap : IUnknown {
  mixin(uuid("9f76fe08-8e92-11d1-8808-00c04fc2c602"));
  // static DWINGUID IID = { 0x9f76fe08, 0x8e92, 0x11d1, 0x88, 0x08, 0x00, 0xc0, 0x4f, 0xc2, 0xc6, 0x02 };
  /*[id(0x60010000)]*/ int InternalSetObject(IUnknown lpdd);
  /*[id(0x60010001)]*/ int InternalGetObject(out IUnknown lpdd);
  /*[id(0x60010002)]*/ int AddDestroyCallback(Direct3DRMCallback fn, IDispatch arg);
  /*[id(0x60010003)]*/ int DeleteDestroyCallback(Direct3DRMCallback fn, IDispatch args);
  /*[id(0x60010004)]*/ int CloneObject(out Direct3DRMObject retV);
  /*[id(0x60010005)]*/ int SetAppData(int data);
  /*[id(0x60010006)]*/ int GetAppData(out int data);
  /*[id(0x60010007)]*/ int SetName(wchar* name);
  /*[id(0x60010008)]*/ int GetName(out wchar* name);
  /*[id(0x60010009)]*/ int GetClassName(out wchar* name);
  /*[id(0x6001000A)]*/ int Apply(Direct3DRMObject visual);
  /*[id(0x6001000B)]*/ int ApplyRelative(Direct3DRMFrame3 f, Direct3DRMObject visual);
}

// Direct3DRMObjectArray Interface
interface Direct3DRMObjectArray : IUnknown {
  mixin(uuid("9f76fe11-8e92-11d1-8808-00c04fc2c602"));
  // static DWINGUID IID = { 0x9f76fe11, 0x8e92, 0x11d1, 0x88, 0x08, 0x00, 0xc0, 0x4f, 0xc2, 0xc6, 0x02 };
  /*[id(0x60010000)]*/ int InternalSetObject(IUnknown lpdd);
  /*[id(0x60010001)]*/ int InternalGetObject(out IUnknown lpdd);
  /*[id(0x60010002)]*/ int GetSize(out int retV);
  /*[id(0x60010003)]*/ int GetElement(int index, out Direct3DRMObject retV);
}

// Direct3DRMDeviceArray Interface
interface Direct3DRMDeviceArray : IUnknown {
  mixin(uuid("9f76fe12-8e92-11d1-8808-00c04fc2c602"));
  // static DWINGUID IID = { 0x9f76fe12, 0x8e92, 0x11d1, 0x88, 0x08, 0x00, 0xc0, 0x4f, 0xc2, 0xc6, 0x02 };
  /*[id(0x60010000)]*/ int InternalSetObject(IUnknown lpdd);
  /*[id(0x60010001)]*/ int InternalGetObject(out IUnknown lpdd);
  /*[id(0x60010002)]*/ int GetSize(out int retV);
  /*[id(0x60010003)]*/ int GetElement(int index, out Direct3DRMDevice3 lplpD3DRMDevice);
}

// Direct3DRMDevice3 Interface
interface Direct3DRMDevice3 : IUnknown {
  mixin(uuid("9f76fe27-8e92-11d1-8808-00c04fc2c602"));
  // static DWINGUID IID = { 0x9f76fe27, 0x8e92, 0x11d1, 0x88, 0x08, 0x00, 0xc0, 0x4f, 0xc2, 0xc6, 0x02 };
  /*[id(0x60010000)]*/ int InternalSetObject(IUnknown lpdd);
  /*[id(0x60010001)]*/ int InternalGetObject(out IUnknown lpdd);
  /*[id(0x60010002)]*/ int AddDestroyCallback(Direct3DRMCallback fn, IDispatch arg);
  /*[id(0x60010003)]*/ int DeleteDestroyCallback(Direct3DRMCallback fn, IDispatch args);
  /*[id(0x60010004)]*/ int CloneObject(out Direct3DRMObject retV);
  /*[id(0x60010005)]*/ int SetAppData(int data);
  /*[id(0x60010006)]*/ int GetAppData(out int data);
  /*[id(0x60010007)]*/ int SetName(wchar* name);
  /*[id(0x60010008)]*/ int GetName(out wchar* name);
  /*[id(0x60010009)]*/ int GetClassName(out wchar* name);
  /*[id(0x6001000A)]*/ int AddUpdateCallback(Direct3DRMDeviceUpdateCallback3 updateCallbackImplementation, IDispatch userArgument);
  /*[id(0x6001000B)]*/ int DeleteUpdateCallback(Direct3DRMDeviceUpdateCallback3 updateCallbackImplementation, IDispatch userArgument);
  /*[id(0x6001000C)]*/ int FindPreferredTextureFormat(CONST_DDBITDEPTHFLAGS bitDepth, CONST_D3DRMFPTFFLAGS flags, ref DDPIXELFORMAT ddpf);
  /*[id(0x6001000D)]*/ int GetBufferCount(out int retV);
  /*[id(0x6001000E)]*/ int GetColorModel(out CONST_D3DCOLORMODEL retV);
  /*[id(0x6001000F)]*/ int GetDither(out CONST_DBOOLFLAGS ditherEnabled);
  /*[id(0x60010010)]*/ int GetHeight(out int w);
  /*[id(0x60010011)]*/ int GetQuality(out CONST_D3DRMRENDERQUALITY retV);
  /*[id(0x60010012)]*/ int GetRenderMode(out CONST_D3DRMRENDERMODEFLAGS retV);
  /*[id(0x60010013)]*/ int GetShades(out int numShades);
  /*[id(0x60010014)]*/ int GetTextureQuality(out CONST_D3DRMTEXTUREQUALITY retV);
  /*[id(0x60010015)]*/ int GetTrianglesDrawn(out int retV);
  /*[id(0x60010016)]*/ int GetViewports(out Direct3DRMViewportArray views);
  /*[id(0x60010017)]*/ int GetWireframeOptions(out CONST_D3DRMWIREFRAMEFLAGS retV);
  /*[id(0x60010018)]*/ int GetWidth(out int w);
  /*[id(0x60010019)]*/ int SetBufferCount(int count);
  /*[id(0x6001001A)]*/ int SetDither(CONST_DBOOLFLAGS ditherEnabled);
  /*[id(0x6001001B)]*/ int SetQuality(CONST_D3DRMRENDERQUALITY q);
  /*[id(0x6001001C)]*/ int SetRenderMode(CONST_D3DRMRENDERMODEFLAGS flags);
  /*[id(0x6001001D)]*/ int SetShades(int numShades);
  /*[id(0x6001001E)]*/ int SetTextureQuality(CONST_D3DRMTEXTUREQUALITY D);
  /*[id(0x6001001F)]*/ int Update();
  /*[id(0x60010020)]*/ int HandleActivate(int wparam);
  /*[id(0x60010021)]*/ int HandlePaint(int hdc);
}

// Direct3DRMDeviceUpdateCallback3 Interface
interface Direct3DRMDeviceUpdateCallback3 : IUnknown {
  mixin(uuid("9f76fe34-8e92-11d1-8808-00c04fc2c602"));
  // static DWINGUID IID = { 0x9f76fe34, 0x8e92, 0x11d1, 0x88, 0x08, 0x00, 0xc0, 0x4f, 0xc2, 0xc6, 0x02 };
  /*[id(0x60010000)]*/ int CallbackRMUpdate(Direct3DRMDevice3 f, IDispatch arg, int n, D3DRECT* Update);
}

// IDirect3DRMViewportArray Interface
interface Direct3DRMViewportArray : IUnknown {
  mixin(uuid("9f76fe13-8e92-11d1-8808-00c04fc2c602"));
  // static DWINGUID IID = { 0x9f76fe13, 0x8e92, 0x11d1, 0x88, 0x08, 0x00, 0xc0, 0x4f, 0xc2, 0xc6, 0x02 };
  /*[id(0x60010000)]*/ int InternalSetObject(IUnknown lpdd);
  /*[id(0x60010001)]*/ int InternalGetObject(out IUnknown lpdd);
  /*[id(0x60010002)]*/ int GetSize(out int retV);
  /*[id(0x60010003)]*/ int GetElement(int index, out Direct3DRMViewport2 lplpD3DRMViewport);
}

// Direct3DRMViewport2 Interface
interface Direct3DRMViewport2 : IUnknown {
  mixin(uuid("9f76fe20-8e92-11d1-8808-00c04fc2c602"));
  // static DWINGUID IID = { 0x9f76fe20, 0x8e92, 0x11d1, 0x88, 0x08, 0x00, 0xc0, 0x4f, 0xc2, 0xc6, 0x02 };
  /*[id(0x60010000)]*/ int InternalSetObject(IUnknown lpdd);
  /*[id(0x60010001)]*/ int InternalGetObject(out IUnknown lpdd);
  /*[id(0x60010002)]*/ int AddDestroyCallback(Direct3DRMCallback fn, IDispatch arg);
  /*[id(0x60010003)]*/ int DeleteDestroyCallback(Direct3DRMCallback fn, IDispatch args);
  /*[id(0x60010004)]*/ int CloneObject(out Direct3DRMObject retV);
  /*[id(0x60010005)]*/ int SetAppData(int data);
  /*[id(0x60010006)]*/ int GetAppData(out int data);
  /*[id(0x60010007)]*/ int SetName(wchar* name);
  /*[id(0x60010008)]*/ int GetName(out wchar* name);
  /*[id(0x60010009)]*/ int GetClassName(out wchar* name);
  /*[id(0x6001000A)]*/ int Clear(CONST_D3DRMVIEWPORTCLEARFLAGS flags);
  /*[id(0x6001000B)]*/ int Render(Direct3DRMFrame3 rootFrame);
  /*[id(0x6001000C)]*/ int GetCamera(out Direct3DRMFrame3 val);
  /*[id(0x6001000D)]*/ int GetDevice(out Direct3DRMDevice3 val);
  /*[id(0x6001000E)]*/ int SetFront(float v);
  /*[id(0x6001000F)]*/ int SetBack(float v);
  /*[id(0x60010010)]*/ int SetField(float v);
  /*[id(0x60010011)]*/ int SetUniformScaling(CONST_DBOOLFLAGS flag);
  /*[id(0x60010012)]*/ int SetCamera(Direct3DRMFrame3 f);
  /*[id(0x60010013)]*/ int SetProjection(CONST_D3DRMPROJECTIONTYPE val);
  /*[id(0x60010014)]*/ int Transform(out D3DRMVECTOR4D D, D3DVECTOR* s);
  /*[id(0x60010015)]*/ int InverseTransform(out D3DVECTOR D, D3DRMVECTOR4D* s);
  /*[id(0x60010016)]*/ int Configure(int x, int y, int width, int height);
  /*[id(0x60010017)]*/ int ForceUpdate(int x1, int y1, int x2, int y2);
  /*[id(0x60010018)]*/ int SetPlane(float Left, float Right, float Bottom, float Top);
  /*[id(0x60010019)]*/ int GetPlane(ref float l, ref float r, ref float b, ref float t);
  /*[id(0x6001001A)]*/ int Pick(int x, int y, out Direct3DRMPickArray retV);
  /*[id(0x6001001B)]*/ int GetUniformScaling(out CONST_DBOOLFLAGS retV);
  /*[id(0x6001001C)]*/ int GetX(out int retV);
  /*[id(0x6001001D)]*/ int GetY(out int retV);
  /*[id(0x6001001E)]*/ int GetHeight(out int w);
  /*[id(0x6001001F)]*/ int GetWidth(out int w);
  /*[id(0x60010020)]*/ int GetField(out float retV);
  /*[id(0x60010021)]*/ int GetBack(out float retV);
  /*[id(0x60010022)]*/ int GetFront(out float retV);
  /*[id(0x60010023)]*/ int GetProjection(out CONST_D3DRMPROJECTIONTYPE retV);
}

// Direct3DRMPickArray Interface
interface Direct3DRMPickArray : IUnknown {
  mixin(uuid("9f76fe17-8e92-11d1-8808-00c04fc2c602"));
  // static DWINGUID IID = { 0x9f76fe17, 0x8e92, 0x11d1, 0x88, 0x08, 0x00, 0xc0, 0x4f, 0xc2, 0xc6, 0x02 };
  /*[id(0x60010000)]*/ int InternalSetObject(IUnknown lpdd);
  /*[id(0x60010001)]*/ int InternalGetObject(out IUnknown lpdd);
  /*[id(0x60010002)]*/ int GetSize(out int retV);
  /*[id(0x60010003)]*/ int GetPickVisual(int index, D3DRMPICKDESC* pickDesc, out Direct3DRMVisual visual);
  /*[id(0x60010004)]*/ int GetPickFrame(int index, D3DRMPICKDESC* pickDesc, out Direct3DRMFrameArray frameArray);
}

// Direct3DRMFaceArray Interface
interface Direct3DRMFaceArray : IUnknown {
  mixin(uuid("9f76fe18-8e92-11d1-8808-00c04fc2c602"));
  // static DWINGUID IID = { 0x9f76fe18, 0x8e92, 0x11d1, 0x88, 0x08, 0x00, 0xc0, 0x4f, 0xc2, 0xc6, 0x02 };
  /*[id(0x60010000)]*/ int InternalSetObject(IUnknown lpdd);
  /*[id(0x60010001)]*/ int InternalGetObject(out IUnknown lpdd);
  /*[id(0x60010002)]*/ int GetSize(out int retV);
  /*[id(0x60010003)]*/ int GetElement(int index, out Direct3DRMFace2 retV);
}

// Direct3DRMAnimationArray
interface Direct3DRMAnimationArray : IUnknown {
  mixin(uuid("9f76fe35-8e92-11d1-8808-00c04fc2c602"));
  // static DWINGUID IID = { 0x9f76fe35, 0x8e92, 0x11d1, 0x88, 0x08, 0x00, 0xc0, 0x4f, 0xc2, 0xc6, 0x02 };
  /*[id(0x60010000)]*/ int GetSize(out int ret);
  /*[id(0x60010001)]*/ int GetElement(int index, out Direct3DRMAnimation2 anim);
}

// Direct3DRMAnimation2 Interface
interface Direct3DRMAnimation2 : IUnknown {
  mixin(uuid("9f76fe22-8e92-11d1-8808-00c04fc2c602"));
  // static DWINGUID IID = { 0x9f76fe22, 0x8e92, 0x11d1, 0x88, 0x08, 0x00, 0xc0, 0x4f, 0xc2, 0xc6, 0x02 };
  /*[id(0x60010000)]*/ int InternalSetObject(IUnknown lpdd);
  /*[id(0x60010001)]*/ int InternalGetObject(out IUnknown lpdd);
  /*[id(0x60010002)]*/ int AddDestroyCallback(Direct3DRMCallback fn, IDispatch arg);
  /*[id(0x60010003)]*/ int DeleteDestroyCallback(Direct3DRMCallback fn, IDispatch args);
  /*[id(0x60010004)]*/ int CloneObject(out Direct3DRMObject retV);
  /*[id(0x60010005)]*/ int SetAppData(int data);
  /*[id(0x60010006)]*/ int GetAppData(out int data);
  /*[id(0x60010007)]*/ int SetName(wchar* name);
  /*[id(0x60010008)]*/ int GetName(out wchar* name);
  /*[id(0x60010009)]*/ int GetClassName(out wchar* name);
  /*[id(0x6001000A)]*/ int SetOptions(CONST_D3DRMANIMATIONFLAGS flags);
  /*[id(0x6001000B)]*/ int AddRotateKey(float time, D3DRMQUATERNION* q);
  /*[id(0x6001000C)]*/ int AddPositionKey(float time, float x, float y, float z);
  /*[id(0x6001000D)]*/ int AddScaleKey(float time, float x, float y, float z);
  /*[id(0x6001000E)]*/ int DeleteKey(float time);
  /*[id(0x6001000F)]*/ int SetFrame(Direct3DRMFrame3 frame);
  /*[id(0x60010010)]*/ int GetFrame(out Direct3DRMFrame3 frame);
  /*[id(0x60010011)]*/ int SetTime(float time);
  /*[id(0x60010012)]*/ int GetOptions(out CONST_D3DRMANIMATIONFLAGS options);
  /*[id(0x60010013)]*/ int AddKey(D3DRMANIMATIONKEY* key);
  /*[id(0x60010014)]*/ int DeleteKeyById(int id);
  /*[id(0x60010015)]*/ int GetKeys(float timeMin, float timeMax, ref SAFEARRAY keyArray);
  /*[id(0x60010016)]*/ int GetKeysCount(float timeMin, float timeMax, out int count);
  /*[id(0x60010017)]*/ int ModifyKey(D3DRMANIMATIONKEY* key);
}

// Direct3DRMShadow2 Interface
interface Direct3DRMShadow2 : IUnknown {
  mixin(uuid("9f76fe36-8e92-11d1-8808-00c04fc2c602"));
  // static DWINGUID IID = { 0x9f76fe36, 0x8e92, 0x11d1, 0x88, 0x08, 0x00, 0xc0, 0x4f, 0xc2, 0xc6, 0x02 };
  /*[id(0x60010000)]*/ int InternalSetObject(IUnknown lpdd);
  /*[id(0x60010001)]*/ int InternalGetObject(out IUnknown lpdd);
  /*[id(0x60010002)]*/ int AddDestroyCallback(Direct3DRMCallback fn, IDispatch arg);
  /*[id(0x60010003)]*/ int DeleteDestroyCallback(Direct3DRMCallback fn, IDispatch args);
  /*[id(0x60010004)]*/ int CloneObject(out Direct3DRMObject retV);
  /*[id(0x60010005)]*/ int SetAppData(int data);
  /*[id(0x60010006)]*/ int GetAppData(out int data);
  /*[id(0x60010007)]*/ int SetName(wchar* name);
  /*[id(0x60010008)]*/ int GetName(out wchar* name);
  /*[id(0x60010009)]*/ int GetClassName(out wchar* name);
  /*[id(0x6001000A)]*/ int SetOptions(CONST_D3DRMSHADOWFLAGS flags);
}

// Direct3DRMAnimationSet2 Interface
interface Direct3DRMAnimationSet2 : IUnknown {
  mixin(uuid("9f76fe23-8e92-11d1-8808-00c04fc2c602"));
  // static DWINGUID IID = { 0x9f76fe23, 0x8e92, 0x11d1, 0x88, 0x08, 0x00, 0xc0, 0x4f, 0xc2, 0xc6, 0x02 };
  /*[id(0x60010000)]*/ int InternalSetObject(IUnknown lpdd);
  /*[id(0x60010001)]*/ int InternalGetObject(out IUnknown lpdd);
  /*[id(0x60010002)]*/ int AddDestroyCallback(Direct3DRMCallback fn, IDispatch arg);
  /*[id(0x60010003)]*/ int DeleteDestroyCallback(Direct3DRMCallback fn, IDispatch args);
  /*[id(0x60010004)]*/ int CloneObject(out Direct3DRMObject retV);
  /*[id(0x60010005)]*/ int SetAppData(int data);
  /*[id(0x60010006)]*/ int GetAppData(out int data);
  /*[id(0x60010007)]*/ int SetName(wchar* name);
  /*[id(0x60010008)]*/ int GetName(out wchar* name);
  /*[id(0x60010009)]*/ int GetClassName(out wchar* name);
  /*[id(0x6001000A)]*/ int AddAnimation(Direct3DRMAnimation2 aid);
  /*[id(0x6001000B)]*/ int DeleteAnimation(Direct3DRMAnimation2 aid);
  /*[id(0x6001000C)]*/ int GetAnimations(out Direct3DRMAnimationArray ret);
  /*[id(0x6001000D)]*/ int LoadFromFile(wchar* filename, DWINVARIANT id, CONST_D3DRMLOADFLAGS flags, Direct3DRMLoadTextureCallback3 loadTextureImplementation, IDispatch userArgument, Direct3DRMFrame3 parentFrame);
  /*[id(0x6001000E)]*/ int SetTime(float time);
}

// Direct3DRM3 Interface
interface Direct3DRM3 : IUnknown {
  mixin(uuid("9f76fe24-8e92-11d1-8808-00c04fc2c602"));
  // static DWINGUID IID = { 0x9f76fe24, 0x8e92, 0x11d1, 0x88, 0x08, 0x00, 0xc0, 0x4f, 0xc2, 0xc6, 0x02 };
  /*[id(0x60010000)]*/ int InternalSetObject(IUnknown lpdd);
  /*[id(0x60010001)]*/ int InternalGetObject(out IUnknown lpdd);
  /*[id(0x60010002)]*/ int CreateDeviceFromClipper(DirectDrawClipper lpDDClipper, wchar* guid, int width, int height, out Direct3DRMDevice3 retV);
  /*[id(0x60010003)]*/ int CreateFrame(Direct3DRMFrame3 parent, out Direct3DRMFrame3 retV);
  /*[id(0x60010004)]*/ int CreateLightRGB(CONST_D3DRMLIGHTTYPE lt, float vred, float vgreen, float vblue, out Direct3DRMLight retV);
  /*[id(0x60010005)]*/ int CreateLight(CONST_D3DRMLIGHTTYPE lt, int color, out Direct3DRMLight retV);
  /*[id(0x60010006)]*/ int CreateMeshBuilder(out Direct3DRMMeshBuilder3 retV);
  /*[id(0x60010007)]*/ int CreateMaterial(float D, out Direct3DRMMaterial2 val);
  /*[id(0x60010008)]*/ int LoadTexture(wchar* name, out Direct3DRMTexture3 retval);
  /*[id(0x60010009)]*/ int CreateViewport(Direct3DRMDevice3 dev, Direct3DRMFrame3 fr, int x, int y, int w, int h, out Direct3DRMViewport2 retval);
  /*[id(0x6001000A)]*/ int SetDefaultTextureColors(int numTextureColors);
  /*[id(0x6001000B)]*/ int SetDefaultTextureShades(int numTextureShades);
  /*[id(0x6001000C)]*/ int CreateAnimationSet(out Direct3DRMAnimationSet2 retval);
  /*[id(0x6001000D)]*/ int CreateMesh(out Direct3DRMMesh retV);
  /*[id(0x6001000E)]*/ int CreateFace(out Direct3DRMFace2 retV);
  /*[id(0x6001000F)]*/ int CreateAnimation(out Direct3DRMAnimation2 retV);
  /*[id(0x60010010)]*/ int Tick(float tic);
  /*[id(0x60010011)]*/ int CreateDeviceFromSurface(wchar* g, DirectDraw4 dd, DirectDrawSurface4 ddS, CONST_D3DRMCREATEDEVICEFLAGS flags, out Direct3DRMDevice3 retval);
  /*[id(0x60010012)]*/ int CreateTextureFromSurface(DirectDrawSurface4 ddS, out Direct3DRMTexture3 retV);
  /*[id(0x60010013)]*/ int CreateWrap(CONST_D3DRMWRAPTYPE t, Direct3DRMFrame3 f, float ox, float oy, float oz, float dx, float dy, float dz, float ux, float uy, float uz, float ou, float ov, float su, float sv, out Direct3DRMWrap retV);
  /*[id(0x60010014)]*/ int GetSearchPath(out wchar* name);
  /*[id(0x60010015)]*/ int GetDevices(out Direct3DRMDeviceArray retval);
  /*[id(0x60010016)]*/ int GetNamedObject(wchar* name, out Direct3DRMObject retval);
  /*[id(0x60010017)]*/ int SetSearchPath(wchar* name);
  /*[id(0x60010018)]*/ int AddSearchPath(wchar* name);
  /*[id(0x60010019)]*/ int EnumerateObjects(Direct3DRMEnumerateObjectsCallback enumerateObjectsImplementation, IDispatch userArgument);
  /*[id(0x6001001A)]*/ int LoadFromFile(wchar* filename, DWINVARIANT id, SAFEARRAY* guidArray, int count, CONST_D3DRMLOADFLAGS options, Direct3DRMLoadCallback loadCallbackImplementation, IDispatch loadArgument, Direct3DRMLoadTextureCallback3 loadTextureImplementation, IDispatch loadTextureArgument, Direct3DRMFrame3 parentFrame);
  /*[id(0x6001001B)]*/ int CreateShadow(Direct3DRMVisual visual, Direct3DRMLight Light, float px, float py, float pz, float nx, float ny, float nz, out Direct3DRMShadow2 retV);
  /*[id(0x6001001C)]*/ int CreateProgressiveMesh(out Direct3DRMProgressiveMesh retV);
  /*[id(0x6001001D)]*/ int CreateClippedVisual(Direct3DRMVisual vis, out Direct3DRMClippedVisual ret);
  /*[id(0x6001001E)]*/ int GetOptions(out CONST_D3DRMHANDEDNESS options);
  /*[id(0x6001001F)]*/ int SetOptions(CONST_D3DRMHANDEDNESS options);
  /*[id(0x60010020)]*/ int CreateInterpolatorMesh(out Direct3DRMMeshInterpolator ret);
  /*[id(0x60010021)]*/ int CreateInterpolatorTexture(out Direct3DRMTextureInterpolator ret);
  /*[id(0x60010022)]*/ int CreateInterpolatorMaterial(out Direct3DRMMaterialInterpolator ret);
  /*[id(0x60010023)]*/ int CreateInterpolatorFrame(out Direct3DRMFrameInterpolator ret);
  /*[id(0x60010024)]*/ int CreateInterpolatorViewport(out Direct3DRMViewportInterpolator ret);
  /*[id(0x60010025)]*/ int CreateInterpolatorLight(out Direct3DRMLightInterpolator ret);
}

// Direct3DRMMeshBuilder3 Interface
interface Direct3DRMMeshBuilder3 : IUnknown {
  mixin(uuid("9f76fe26-8e92-11d1-8808-00c04fc2c602"));
  // static DWINGUID IID = { 0x9f76fe26, 0x8e92, 0x11d1, 0x88, 0x08, 0x00, 0xc0, 0x4f, 0xc2, 0xc6, 0x02 };
  /*[id(0x60010000)]*/ int InternalSetObject(IUnknown lpdd);
  /*[id(0x60010001)]*/ int InternalGetObject(out IUnknown lpdd);
  /*[id(0x60010002)]*/ int AddDestroyCallback(Direct3DRMCallback fn, IDispatch arg);
  /*[id(0x60010003)]*/ int DeleteDestroyCallback(Direct3DRMCallback fn, IDispatch args);
  /*[id(0x60010004)]*/ int CloneObject(out Direct3DRMObject retV);
  /*[id(0x60010005)]*/ int SetAppData(int data);
  /*[id(0x60010006)]*/ int GetAppData(out int data);
  /*[id(0x60010007)]*/ int SetName(wchar* name);
  /*[id(0x60010008)]*/ int GetName(out wchar* name);
  /*[id(0x60010009)]*/ int GetClassName(out wchar* name);
  /*[id(0x6001000A)]*/ int AddFace(Direct3DRMFace2 f);
  /*[id(0x6001000B)]*/ int AddFaces(int vc, SAFEARRAY* verexArray, int nc, SAFEARRAY* normalArray, SAFEARRAY* data, out Direct3DRMFaceArray array);
  /*[id(0x6001000C)]*/ int AddFacesIndexed(CONST_D3DRMADDFACESFLAGS flags, SAFEARRAY* indexArray, out int newFaceIndex);
  /*[id(0x6001000D)]*/ int AddFrame(Direct3DRMFrame3 frame);
  /*[id(0x6001000E)]*/ int AddMesh(Direct3DRMMesh mesh);
  /*[id(0x6001000F)]*/ int AddMeshBuilder(Direct3DRMMeshBuilder3 meshbuilder, CONST_D3DRMADDMESHBUILDERFLAGS flags);
  /*[id(0x60010010)]*/ int AddNormal(float x, float y, float z, out int index);
  /*[id(0x60010011)]*/ int AddTriangles(CONST_D3DRMADDTRIANGLESVT format, int VertexCount, void* data);
  /*[id(0x60010012)]*/ int AddVertex(float x, float y, float z, out int index);
  /*[id(0x60010013)]*/ int CreateFace(out Direct3DRMFace2 retV);
  /*[id(0x60010014)]*/ int CreateMesh(out Direct3DRMMesh retV);
  /*[id(0x60010015)]*/ int CreateSubMesh(out Direct3DRMMeshBuilder3 retV);
  /*[id(0x60010016)]*/ int DeleteFace(Direct3DRMFace2 face);
  /*[id(0x60010017)]*/ int DeleteNormals(int id, int count);
  /*[id(0x60010018)]*/ int DeleteSubMesh(Direct3DRMMeshBuilder3 mesh);
  /*[id(0x60010019)]*/ int DeleteVertices(int id, int count);
  /*[id(0x6001001A)]*/ int Empty();
  /*[id(0x6001001B)]*/ int EnableMesh(CONST_D3DRMADDMESHBUILDERFLAGS flags);
  /*[id(0x6001001C)]*/ int GenerateNormals(float angle, CONST_D3DRMGENERATENORMALSFLAGS flags);
  /*[id(0x6001001D)]*/ int GetBox(ref D3DRMBOX retV);
  /*[id(0x6001001E)]*/ int GetColorSource(out CONST_D3DRMCOLORSOURCE data);
  /*[id(0x6001001F)]*/ int GetEnable(out CONST_D3DRMADDMESHBUILDERFLAGS flags);
  /*[id(0x60010020)]*/ int GetFace(int id, out Direct3DRMFace2 retV);
  /*[id(0x60010021)]*/ int GetFaceCount(out int retV);
  /*[id(0x60010022)]*/ int GetFaces(out Direct3DRMFaceArray retV);
  /*[id(0x60010023)]*/ int GetGeometry(ref SAFEARRAY verexArray, ref SAFEARRAY normalArray, ref SAFEARRAY faceData);
  /*[id(0x60010024)]*/ int GetNormal(int index, ref D3DVECTOR desc);
  /*[id(0x60010025)]*/ int GetNormalCount(out int normalCount);
  /*[id(0x60010026)]*/ int GetParentMesh(CONST_D3DRMPARENTINGFLAGS flags, out Direct3DRMMeshBuilder3 vis);
  /*[id(0x60010027)]*/ int GetPerspective(out int retV);
  /*[id(0x60010028)]*/ int GetQuality(out CONST_D3DRMRENDERQUALITY retV);
  /*[id(0x60010029)]*/ int GetSubMeshes(int count, ref SAFEARRAY arrayOfMeshBuilders);
  /*[id(0x6001002A)]*/ int GetSubMeshCount(out int count);
  /*[id(0x6001002B)]*/ int GetTextureCoordinates(int idx, ref float u, ref float v);
  /*[id(0x6001002C)]*/ int GetVertex(int id, ref D3DVECTOR vec);
  /*[id(0x6001002D)]*/ int GetVertexColor(int index, out int retV);
  /*[id(0x6001002E)]*/ int GetVertexCount(out int retV);
  /*[id(0x6001002F)]*/ int GetFaceDataSize(out int faceCount);
  /*[id(0x60010030)]*/ int LoadFromFile(wchar* filename, DWINVARIANT id, CONST_D3DRMLOADFLAGS flags, Direct3DRMLoadTextureCallback3 loadTextureImplementation, IDispatch userArgument);
  /*[id(0x60010031)]*/ int Optimize();
  /*[id(0x60010032)]*/ int Save(wchar* fname, CONST_D3DRMXOFFORMAT xFormat, CONST_D3DRMSAVEFLAGS Save);
  /*[id(0x60010033)]*/ int ScaleMesh(float sx, float sy, float sz);
  /*[id(0x60010034)]*/ int SetColor(int col);
  /*[id(0x60010035)]*/ int SetColorRGB(float red, float green, float blue);
  /*[id(0x60010036)]*/ int SetColorSource(CONST_D3DRMCOLORSOURCE val);
  /*[id(0x60010037)]*/ int SetMaterial(Direct3DRMMaterial2 mat);
  /*[id(0x60010038)]*/ int SetNormal(int idx, float x, float y, float z);
  /*[id(0x60010039)]*/ int SetPerspective(CONST_DBOOLFLAGS perspectiveEnabled);
  /*[id(0x6001003A)]*/ int SetQuality(CONST_D3DRMRENDERQUALITY q);
  /*[id(0x6001003B)]*/ int SetTexture(Direct3DRMTexture3 tex);
  /*[id(0x6001003C)]*/ int SetTextureCoordinates(int idx, float u, float v);
  /*[id(0x6001003D)]*/ int SetTextureTopology(CONST_DBOOLFLAGS wrap_u, CONST_DBOOLFLAGS wrap_v);
  /*[id(0x6001003E)]*/ int SetVertex(int idx, float x, float y, float z);
  /*[id(0x6001003F)]*/ int SetVertexColor(int idx, int c);
  /*[id(0x60010040)]*/ int SetVertexColorRGB(int idx, float r, float g, float b);
  /*[id(0x60010041)]*/ int Translate(float tx, float ty, float tz);
  /*[id(0x60010042)]*/ int AddFacesJava(int vc, float* ver, int nc, float* norm, int* data, out Direct3DRMFaceArray array);
}

// Direct3DRMProgressiveMesh Interface
interface Direct3DRMProgressiveMesh : IUnknown {
  mixin(uuid("9f76fe31-8e92-11d1-8808-00c04fc2c602"));
  // static DWINGUID IID = { 0x9f76fe31, 0x8e92, 0x11d1, 0x88, 0x08, 0x00, 0xc0, 0x4f, 0xc2, 0xc6, 0x02 };
  /*[id(0x60010000)]*/ int InternalSetObject(IUnknown lpdd);
  /*[id(0x60010001)]*/ int InternalGetObject(out IUnknown lpdd);
  /*[id(0x60010002)]*/ int AddDestroyCallback(Direct3DRMCallback fn, IDispatch arg);
  /*[id(0x60010003)]*/ int DeleteDestroyCallback(Direct3DRMCallback fn, IDispatch args);
  /*[id(0x60010004)]*/ int CloneObject(out Direct3DRMObject retV);
  /*[id(0x60010005)]*/ int SetAppData(int data);
  /*[id(0x60010006)]*/ int GetAppData(out int data);
  /*[id(0x60010007)]*/ int SetName(wchar* name);
  /*[id(0x60010008)]*/ int GetName(out wchar* name);
  /*[id(0x60010009)]*/ int GetClassName(out wchar* name);
  /*[id(0x6001000A)]*/ int LoadFromFile(wchar* sFile, DWINVARIANT id, CONST_D3DRMLOADFLAGS options, Direct3DRMLoadTextureCallback3 loadTextureImplementation, IDispatch userArgument);
  /*[id(0x6001000B)]*/ int GetLoadStatus(ref D3DRMPMESHLOADSTATUS loadStatus);
  /*[id(0x6001000C)]*/ int SetMinRenderDetail(float val);
  /*[id(0x6001000D)]*/ int Abort();
  /*[id(0x6001000E)]*/ int GetFaceDetail(out int count);
  /*[id(0x6001000F)]*/ int GetVertexDetail(out int count);
  /*[id(0x60010010)]*/ int SetFaceDetail(int count);
  /*[id(0x60010011)]*/ int SetVertexDetail(int count);
  /*[id(0x60010012)]*/ int GetFaceDetailRange(ref int min, ref int max);
  /*[id(0x60010013)]*/ int GetVertexDetailRange(ref int min, ref int max);
  /*[id(0x60010014)]*/ int GetDetail(out float detail);
  /*[id(0x60010015)]*/ int SetDetail(float detail);
  /*[id(0x60010016)]*/ int RegisterEvents(int hEvent, int flags, int reserved);
  /*[id(0x60010017)]*/ int CreateMesh(out Direct3DRMMesh mesh);
  /*[id(0x60010018)]*/ int Duplicate(out Direct3DRMProgressiveMesh mesh);
  /*[id(0x60010019)]*/ int GetBox(ref D3DRMBOX box);
  /*[id(0x6001001A)]*/ int SetQuality(CONST_D3DRMRENDERQUALITY quality);
  /*[id(0x6001001B)]*/ int GetQuality(out CONST_D3DRMRENDERQUALITY quality);
}

// Direct3DRMClippedVisual Interface
interface Direct3DRMClippedVisual : IUnknown {
  mixin(uuid("9f76fe30-8e92-11d1-8808-00c04fc2c602"));
  // static DWINGUID IID = { 0x9f76fe30, 0x8e92, 0x11d1, 0x88, 0x08, 0x00, 0xc0, 0x4f, 0xc2, 0xc6, 0x02 };
  /*[id(0x60010000)]*/ int InternalSetObject(IUnknown lpdd);
  /*[id(0x60010001)]*/ int InternalGetObject(out IUnknown lpdd);
  /*[id(0x60010002)]*/ int AddDestroyCallback(Direct3DRMCallback fn, IDispatch arg);
  /*[id(0x60010003)]*/ int DeleteDestroyCallback(Direct3DRMCallback fn, IDispatch args);
  /*[id(0x60010004)]*/ int CloneObject(out Direct3DRMObject retV);
  /*[id(0x60010005)]*/ int SetAppData(int data);
  /*[id(0x60010006)]*/ int GetAppData(out int data);
  /*[id(0x60010007)]*/ int SetName(wchar* name);
  /*[id(0x60010008)]*/ int GetName(out wchar* name);
  /*[id(0x60010009)]*/ int GetClassName(out wchar* name);
  /*[id(0x6001000A)]*/ int AddPlane(Direct3DRMFrame3 refParam, ref D3DVECTOR point, ref D3DVECTOR normal, out int ret);
  /*[id(0x6001000B)]*/ int DeletePlane(int id);
  /*[id(0x6001000C)]*/ int GetPlane(int id, Direct3DRMFrame3 refParam, ref D3DVECTOR point, ref D3DVECTOR normal);
  /*[id(0x6001000D)]*/ int GetPlaneIds(int count, ref SAFEARRAY arrayOfIds);
  /*[id(0x6001000E)]*/ int GetPlaneIdsCount(out int count);
  /*[id(0x6001000F)]*/ int SetPlane(int id, Direct3DRMFrame3 refParam, ref D3DVECTOR point, ref D3DVECTOR normal);
}

// Direct3DRMeshInterpolator Interface
interface Direct3DRMMeshInterpolator : IUnknown {
  mixin(uuid("5f4637e3-62ac-11d2-90b1-00c04fc2c602"));
  // static DWINGUID IID = { 0x5f4637e3, 0x62ac, 0x11d2, 0x90, 0xb1, 0x00, 0xc0, 0x4f, 0xc2, 0xc6, 0x02 };
  /*[id(0x60010000)]*/ int InternalSetObject(IUnknown lpdd);
  /*[id(0x60010001)]*/ int InternalGetObject(out IUnknown lpdd);
  /*[id(0x60010002)]*/ int AttachObject(Direct3DRMObject rmObject);
  /*[id(0x60010003)]*/ int DetachObject(Direct3DRMObject rmObject);
  /*[id(0x60010004)]*/ int GetAttachedObjects(out Direct3DRMObjectArray rmArray);
  /*[id(0x60010005)]*/ int SetIndex(float val);
  /*[id(0x60010006)]*/ int GetIndex(out float val);
  /*[id(0x60010007)]*/ int Interpolate(float val, Direct3DRMObject rmObject, CONST_D3DRMINTERPOLATIONFLAGS options);
  /*[id(0x60010008)]*/ int Translate(float tx, float ty, float tz);
  /*[id(0x60010009)]*/ int SetVertices(int id, int idx, int count, SAFEARRAY* vertexArray);
  /*[id(0x6001000A)]*/ int SetGroupColor(int id, int val);
  /*[id(0x6001000B)]*/ int SetGroupColorRGB(int id, float r, float g, float b);
}

// Direct3DRMTextureInterpolator Interface
interface Direct3DRMTextureInterpolator : IUnknown {
  mixin(uuid("5f4637e5-62ac-11d2-90b1-00c04fc2c602"));
  // static DWINGUID IID = { 0x5f4637e5, 0x62ac, 0x11d2, 0x90, 0xb1, 0x00, 0xc0, 0x4f, 0xc2, 0xc6, 0x02 };
  /*[id(0x60010000)]*/ int InternalSetObject(IUnknown lpdd);
  /*[id(0x60010001)]*/ int InternalGetObject(out IUnknown lpdd);
  /*[id(0x60010002)]*/ int AttachObject(Direct3DRMObject rmObject);
  /*[id(0x60010003)]*/ int DetachObject(Direct3DRMObject rmObject);
  /*[id(0x60010004)]*/ int GetAttachedObjects(out Direct3DRMObjectArray rmArray);
  /*[id(0x60010005)]*/ int SetIndex(float val);
  /*[id(0x60010006)]*/ int GetIndex(out float val);
  /*[id(0x60010007)]*/ int Interpolate(float val, Direct3DRMObject rmObject, CONST_D3DRMINTERPOLATIONFLAGS options);
  /*[id(0x60010008)]*/ int SetDecalOrigin(int x, int y);
  /*[id(0x60010009)]*/ int SetDecalSize(float width, float height);
  /*[id(0x6001000A)]*/ int SetDecalTransparentColor(int tcolor);
}

// Direct3DRMMaterialInterpolator Interface
interface Direct3DRMMaterialInterpolator : IUnknown {
  mixin(uuid("5f4637e6-62ac-11d2-90b1-00c04fc2c602"));
  // static DWINGUID IID = { 0x5f4637e6, 0x62ac, 0x11d2, 0x90, 0xb1, 0x00, 0xc0, 0x4f, 0xc2, 0xc6, 0x02 };
  /*[id(0x60010000)]*/ int InternalSetObject(IUnknown lpdd);
  /*[id(0x60010001)]*/ int InternalGetObject(out IUnknown lpdd);
  /*[id(0x60010002)]*/ int AttachObject(Direct3DRMObject rmObject);
  /*[id(0x60010003)]*/ int DetachObject(Direct3DRMObject rmObject);
  /*[id(0x60010004)]*/ int GetAttachedObjects(out Direct3DRMObjectArray rmArray);
  /*[id(0x60010005)]*/ int SetIndex(float val);
  /*[id(0x60010006)]*/ int GetIndex(out float val);
  /*[id(0x60010007)]*/ int Interpolate(float val, Direct3DRMObject rmObject, CONST_D3DRMINTERPOLATIONFLAGS options);
  /*[id(0x60010008)]*/ int SetPower(float power);
  /*[id(0x60010009)]*/ int SetSpecular(float red, float green, float blue);
  /*[id(0x6001000A)]*/ int SetEmissive(float red, float green, float blue);
}

// Direct3DRMFrameInterpolator Interface
interface Direct3DRMFrameInterpolator : IUnknown {
  mixin(uuid("5f4637e2-62ac-11d2-90b1-00c04fc2c602"));
  // static DWINGUID IID = { 0x5f4637e2, 0x62ac, 0x11d2, 0x90, 0xb1, 0x00, 0xc0, 0x4f, 0xc2, 0xc6, 0x02 };
  /*[id(0x60010000)]*/ int InternalSetObject(IUnknown lpdd);
  /*[id(0x60010001)]*/ int InternalGetObject(out IUnknown lpdd);
  /*[id(0x60010002)]*/ int AttachObject(Direct3DRMObject rmObject);
  /*[id(0x60010003)]*/ int DetachObject(Direct3DRMObject rmObject);
  /*[id(0x60010004)]*/ int GetAttachedObjects(out Direct3DRMObjectArray rmArray);
  /*[id(0x60010005)]*/ int SetIndex(float val);
  /*[id(0x60010006)]*/ int GetIndex(out float val);
  /*[id(0x60010007)]*/ int Interpolate(float val, Direct3DRMObject rmObject, CONST_D3DRMINTERPOLATIONFLAGS options);
  /*[id(0x60010008)]*/ int SetPosition(Direct3DRMFrame3 reference, float x, float y, float z);
  /*[id(0x60010009)]*/ int SetQuaternion(Direct3DRMFrame3 reference, D3DRMQUATERNION* quat);
  /*[id(0x6001000A)]*/ int SetRotation(Direct3DRMFrame3 reference, float x, float y, float z, float theta);
  /*[id(0x6001000B)]*/ int SetVelocity(Direct3DRMFrame3 reference, float x, float y, float z, CONST_DBOOLFLAGS with_rotation);
  /*[id(0x6001000C)]*/ int SetOrientation(Direct3DRMFrame3 reference, float dx, float dy, float dz, float ux, float uy, float uz);
  /*[id(0x6001000D)]*/ int SetSceneBackground(int c);
  /*[id(0x6001000E)]*/ int SetSceneFogColor(int c);
  /*[id(0x6001000F)]*/ int SetSceneBackgroundRGB(float r, float g, float b);
  /*[id(0x60010010)]*/ int SetSceneFogParams(float start, float end, float density);
  /*[id(0x60010011)]*/ int SetColor(int c);
  /*[id(0x60010012)]*/ int SetColorRGB(float r, float g, float b);
}

// Direct3DRMViewportInterpolator Interface
interface Direct3DRMViewportInterpolator : IUnknown {
  mixin(uuid("5f4637e1-62ac-11d2-90b1-00c04fc2c602"));
  // static DWINGUID IID = { 0x5f4637e1, 0x62ac, 0x11d2, 0x90, 0xb1, 0x00, 0xc0, 0x4f, 0xc2, 0xc6, 0x02 };
  /*[id(0x60010000)]*/ int InternalSetObject(IUnknown lpdd);
  /*[id(0x60010001)]*/ int InternalGetObject(out IUnknown lpdd);
  /*[id(0x60010002)]*/ int AttachObject(Direct3DRMObject rmObject);
  /*[id(0x60010003)]*/ int DetachObject(Direct3DRMObject rmObject);
  /*[id(0x60010004)]*/ int GetAttachedObjects(out Direct3DRMObjectArray rmArray);
  /*[id(0x60010005)]*/ int SetIndex(float val);
  /*[id(0x60010006)]*/ int GetIndex(out float val);
  /*[id(0x60010007)]*/ int Interpolate(float val, Direct3DRMObject rmObject, CONST_D3DRMINTERPOLATIONFLAGS options);
  /*[id(0x60010008)]*/ int SetFront(float val);
  /*[id(0x60010009)]*/ int SetBack(float val);
  /*[id(0x6001000A)]*/ int SetField(float val);
  /*[id(0x6001000B)]*/ int SetPlane(float Left, float Right, float Bottom, float Top);
}

// Direct3DRMLightInterpolator Interface
interface Direct3DRMLightInterpolator : IUnknown {
  mixin(uuid("5f4637e4-62ac-11d2-90b1-00c04fc2c602"));
  // static DWINGUID IID = { 0x5f4637e4, 0x62ac, 0x11d2, 0x90, 0xb1, 0x00, 0xc0, 0x4f, 0xc2, 0xc6, 0x02 };
  /*[id(0x60010000)]*/ int InternalSetObject(IUnknown lpdd);
  /*[id(0x60010001)]*/ int InternalGetObject(out IUnknown lpdd);
  /*[id(0x60010002)]*/ int AttachObject(Direct3DRMObject rmObject);
  /*[id(0x60010003)]*/ int DetachObject(Direct3DRMObject rmObject);
  /*[id(0x60010004)]*/ int GetAttachedObjects(out Direct3DRMObjectArray rmArray);
  /*[id(0x60010005)]*/ int SetIndex(float val);
  /*[id(0x60010006)]*/ int GetIndex(out float val);
  /*[id(0x60010007)]*/ int Interpolate(float val, Direct3DRMObject rmObject, CONST_D3DRMINTERPOLATIONFLAGS options);
  /*[id(0x60010008)]*/ int SetColor(int c);
  /*[id(0x60010009)]*/ int SetColorRGB(float r, float g, float b);
  /*[id(0x6001000A)]*/ int SetRange(float rng);
  /*[id(0x6001000B)]*/ int SetUmbra(float u);
  /*[id(0x6001000C)]*/ int SetPenumbra(float p);
  /*[id(0x6001000D)]*/ int SetConstantAttenuation(float atn);
  /*[id(0x6001000E)]*/ int SetLinearAttenuation(float atn);
  /*[id(0x6001000F)]*/ int SetQuadraticAttenuation(float atn);
}

// DirectSound Interface
interface DirectSound : IUnknown {
  mixin(uuid("9f76fb00-8e92-11d1-8808-00c04fc2c602"));
  // static DWINGUID IID = { 0x9f76fb00, 0x8e92, 0x11d1, 0x88, 0x08, 0x00, 0xc0, 0x4f, 0xc2, 0xc6, 0x02 };
  /*[id(0x60010000)]*/ int InternalSetObject(IUnknown lpdd);
  /*[id(0x60010001)]*/ int InternalGetObject(out IUnknown lpdd);
  /*[id(0x60010002)]*/ int CreateSoundBuffer(DSBUFFERDESC* bufferDesc, WAVEFORMATEX* format, out DirectSoundBuffer soundBuffer);
  /*[id(0x60010003)]*/ int CreateSoundBufferFromFile(wchar* filename, ref DSBUFFERDESC bufferDesc, out WAVEFORMATEX format, out DirectSoundBuffer soundBuffer);
  /*[id(0x60010004)]*/ int CreateSoundBufferFromResource(wchar* dll, wchar* resourceName, ref DSBUFFERDESC bufferDesc, out WAVEFORMATEX format, out DirectSoundBuffer soundBuffer);
  /*[id(0x60010005)]*/ int GetCaps(ref DSCAPS caps);
  /*[id(0x60010006)]*/ int DuplicateSoundBuffer(DirectSoundBuffer original, out DirectSoundBuffer Duplicate);
  /*[id(0x60010007)]*/ int SetCooperativeLevel(int hwnd, CONST_DSSCLFLAGS level);
  /*[id(0x60010008)]*/ int GetSpeakerConfig(out CONST_DSSPEAKERFLAGS speakerConfig);
  /*[id(0x60010009)]*/ int SetSpeakerConfig(CONST_DSSPEAKERFLAGS speakerConfig);
}

// DirectSoundBuffer Interface
interface DirectSoundBuffer : IUnknown {
  mixin(uuid("9f76fb01-8e92-11d1-8808-00c04fc2c602"));
  // static DWINGUID IID = { 0x9f76fb01, 0x8e92, 0x11d1, 0x88, 0x08, 0x00, 0xc0, 0x4f, 0xc2, 0xc6, 0x02 };
  /*[id(0x60010000)]*/ int InternalSetObject(IUnknown lpdd);
  /*[id(0x60010001)]*/ int InternalGetObject(out IUnknown lpdd);
  /*[id(0x60010002)]*/ int GetDirectSound3DListener(out DirectSound3DListener lpdsl);
  /*[id(0x60010003)]*/ int GetDirectSound3DBuffer(out DirectSound3DBuffer lpdsb);
  /*[id(0x60010004)]*/ int GetCaps(ref DSBCAPS caps);
  /*[id(0x60010005)]*/ int GetCurrentPosition(out DSCURSORS cursors);
  /*[id(0x60010006)]*/ int GetFormat(ref WAVEFORMATEX format);
  /*[id(0x60010007)]*/ int GetVolume(out int volume);
  /*[id(0x60010008)]*/ int GetPan(out int pan);
  /*[id(0x60010009)]*/ int GetFrequency(out int frequency);
  /*[id(0x6001000A)]*/ int GetStatus(out CONST_DSBSTATUSFLAGS status);
  /*[id(0x6001000B)]*/ int Initialize(DirectSound DirectSound, ref DSBUFFERDESC bufferDesc, ref ubyte wbuf);
  /*[id(0x6001000C)]*/ int WriteBuffer(int start, int size, void* buffer, CONST_DSBLOCKFLAGS flags);
  /*[id(0x6001000D)]*/ int ReadBuffer(int start, int size, void* buffer, CONST_DSBLOCKFLAGS flags);
  /*[id(0x6001000E)]*/ int Play(CONST_DSBPLAYFLAGS flags);
  /*[id(0x6001000F)]*/ int SetCurrentPosition(int newPosition);
  /*[id(0x60010010)]*/ int SetFormat(WAVEFORMATEX* format);
  /*[id(0x60010011)]*/ int SetVolume(int volume);
  /*[id(0x60010012)]*/ int SetPan(int pan);
  /*[id(0x60010013)]*/ int SetFrequency(int frequency);
  /*[id(0x60010014)]*/ int Stop();
  /*[id(0x60010015)]*/ int restore();
  /*[id(0x60010016)]*/ int SetNotificationPositions(int nElements, SAFEARRAY* psa);
  /*[id(0x60010017)]*/ int SaveToFile(wchar* filename);
}

// DirectSound3DListener Interface
interface DirectSound3DListener : IUnknown {
  mixin(uuid("9f76fb02-8e92-11d1-8808-00c04fc2c602"));
  // static DWINGUID IID = { 0x9f76fb02, 0x8e92, 0x11d1, 0x88, 0x08, 0x00, 0xc0, 0x4f, 0xc2, 0xc6, 0x02 };
  /*[id(0x60010000)]*/ int InternalSetObject(IUnknown lpdd);
  /*[id(0x60010001)]*/ int InternalGetObject(out IUnknown lpdd);
  /*[id(0x60010002)]*/ int GetAllParameters(ref DS3DLISTENER listener);
  /*[id(0x60010003)]*/ int GetDistanceFactor(out float distanceFactor);
  /*[id(0x60010004)]*/ int GetDopplerFactor(out float dopplerFactor);
  /*[id(0x60010005)]*/ int GetOrientation(ref D3DVECTOR orientFront, ref D3DVECTOR orientTop);
  /*[id(0x60010006)]*/ int GetPosition(out D3DVECTOR position);
  /*[id(0x60010007)]*/ int GetRolloffFactor(out float rolloffFactor);
  /*[id(0x60010008)]*/ int GetVelocity(out D3DVECTOR velocity);
  /*[id(0x60010009)]*/ int SetAllParameters(DS3DLISTENER* listener, CONST_DS3DAPPLYFLAGS applyFlag);
  /*[id(0x6001000A)]*/ int SetDistanceFactor(float distanceFactor, CONST_DS3DAPPLYFLAGS applyFlag);
  /*[id(0x6001000B)]*/ int SetDopplerFactor(float dopplerFactor, CONST_DS3DAPPLYFLAGS applyFlag);
  /*[id(0x6001000C)]*/ int SetOrientation(float xFront, float yFront, float zFront, float xTop, float yTop, float zTop, CONST_DS3DAPPLYFLAGS applyFlag);
  /*[id(0x6001000D)]*/ int SetPosition(float x, float y, float z, CONST_DS3DAPPLYFLAGS applyFlag);
  /*[id(0x6001000E)]*/ int SetRolloffFactor(float rolloffFactor, CONST_DS3DAPPLYFLAGS applyFlag);
  /*[id(0x6001000F)]*/ int SetVelocity(float x, float y, float z, CONST_DS3DAPPLYFLAGS applyFlag);
  /*[id(0x60010010)]*/ int CommitDeferredSettings();
  /*[id(0x60010011)]*/ int GetDirectSoundBuffer(out DirectSoundBuffer retval);
}

// DirectSound3DBuffer Interface
interface DirectSound3DBuffer : IUnknown {
  mixin(uuid("9f76fb03-8e92-11d1-8808-00c04fc2c602"));
  // static DWINGUID IID = { 0x9f76fb03, 0x8e92, 0x11d1, 0x88, 0x08, 0x00, 0xc0, 0x4f, 0xc2, 0xc6, 0x02 };
  /*[id(0x60010000)]*/ int InternalSetObject(IUnknown lpdd);
  /*[id(0x60010001)]*/ int InternalGetObject(out IUnknown lpdd);
  /*[id(0x60010002)]*/ int GetDirectSound3DListener(out DirectSound3DListener retval);
  /*[id(0x60010003)]*/ int GetDirectSoundBuffer(out DirectSoundBuffer retval);
  /*[id(0x60010004)]*/ int GetAllParameters(ref DS3DBUFFER buffer);
  /*[id(0x60010005)]*/ int GetConeAngles(ref int inCone, ref int outCone);
  /*[id(0x60010006)]*/ int GetConeOrientation(ref D3DVECTOR orientation);
  /*[id(0x60010007)]*/ int GetConeOutsideVolume(out int coneOutsideVolume);
  /*[id(0x60010008)]*/ int GetMaxDistance(out float maxDistance);
  /*[id(0x60010009)]*/ int GetMinDistance(out float minDistance);
  /*[id(0x6001000A)]*/ int GetMode(out CONST_DS3DMODEFLAGS mode);
  /*[id(0x6001000B)]*/ int GetPosition(ref D3DVECTOR position);
  /*[id(0x6001000C)]*/ int GetVelocity(ref D3DVECTOR velocity);
  /*[id(0x6001000D)]*/ int SetAllParameters(DS3DBUFFER* buffer, CONST_DS3DAPPLYFLAGS applyFlag);
  /*[id(0x6001000E)]*/ int SetConeAngles(int inCone, int outCone, CONST_DS3DAPPLYFLAGS applyFlag);
  /*[id(0x6001000F)]*/ int SetConeOrientation(float x, float y, float z, CONST_DS3DAPPLYFLAGS applyFlag);
  /*[id(0x60010010)]*/ int SetConeOutsideVolume(int coneOutsideVolume, CONST_DS3DAPPLYFLAGS applyFlag);
  /*[id(0x60010011)]*/ int SetMaxDistance(float maxDistance, CONST_DS3DAPPLYFLAGS applyFlag);
  /*[id(0x60010012)]*/ int SetMinDistance(float minDistance, CONST_DS3DAPPLYFLAGS applyFlag);
  /*[id(0x60010013)]*/ int SetMode(CONST_DS3DMODEFLAGS mode, CONST_DS3DAPPLYFLAGS applyFlag);
  /*[id(0x60010014)]*/ int SetPosition(float x, float y, float z, CONST_DS3DAPPLYFLAGS applyFlag);
  /*[id(0x60010015)]*/ int SetVelocity(float x, float y, float z, CONST_DS3DAPPLYFLAGS applyFlag);
}

// DirectSoundCapture Interface
interface DirectSoundCapture : IUnknown {
  mixin(uuid("9f76fb04-8e92-11d1-8808-00c04fc2c602"));
  // static DWINGUID IID = { 0x9f76fb04, 0x8e92, 0x11d1, 0x88, 0x08, 0x00, 0xc0, 0x4f, 0xc2, 0xc6, 0x02 };
  /*[id(0x60010000)]*/ int InternalSetObject(IUnknown lpdd);
  /*[id(0x60010001)]*/ int InternalGetObject(out IUnknown lpdd);
  /*[id(0x60010002)]*/ int CreateCaptureBuffer(DSCBUFFERDESC* bufferDesc, out DirectSoundCaptureBuffer ret);
  /*[id(0x60010003)]*/ int GetCaps(ref DSCCAPS caps);
}

// DirectSoundCaptureBuffer Interface
interface DirectSoundCaptureBuffer : IUnknown {
  mixin(uuid("9f76fb05-8e92-11d1-8808-00c04fc2c602"));
  // static DWINGUID IID = { 0x9f76fb05, 0x8e92, 0x11d1, 0x88, 0x08, 0x00, 0xc0, 0x4f, 0xc2, 0xc6, 0x02 };
  /*[id(0x60010000)]*/ int InternalSetObject(IUnknown lpdd);
  /*[id(0x60010001)]*/ int InternalGetObject(out IUnknown lpdd);
  /*[id(0x60010002)]*/ int GetCaps(ref DSCBCAPS caps);
  /*[id(0x60010003)]*/ int GetCurrentPosition(ref DSCURSORS cursors);
  /*[id(0x60010004)]*/ int GetFormat(ref WAVEFORMATEX waveformat);
  /*[id(0x60010005)]*/ int GetStatus(out CONST_DSCBSTATUSFLAGS status);
  /*[id(0x60010006)]*/ int Initialize(DirectSoundCaptureBuffer captureBuffer, DSCBUFFERDESC* bufferDesc);
  /*[id(0x60010007)]*/ int start(CONST_DSCBSTARTFLAGS flags);
  /*[id(0x60010008)]*/ int Stop();
  /*[id(0x60010009)]*/ int WriteBuffer(int start, int size, void* buffer, CONST_DSCBLOCKFLAGS flags);
  /*[id(0x6001000A)]*/ int ReadBuffer(int start, int size, void* buffer, CONST_DSCBLOCKFLAGS flags);
  /*[id(0x6001000B)]*/ int SetNotificationPositions(int nElements, SAFEARRAY* psa);
}

// DirectSoundEnum Interface
interface DirectSoundEnum : IUnknown {
  mixin(uuid("9f76fb07-8e92-11d1-8808-00c04fc2c602"));
  // static DWINGUID IID = { 0x9f76fb07, 0x8e92, 0x11d1, 0x88, 0x08, 0x00, 0xc0, 0x4f, 0xc2, 0xc6, 0x02 };
  /*[id(0x60010000)]*/ int GetGuid(int index, out wchar* guid);
  /*[id(0x60010001)]*/ int GetDescription(int index, out wchar* guid);
  /*[id(0x60010002)]*/ int GetName(int index, out wchar* guid);
  /*[id(0x60010003)]*/ int GetCount(out int count);
}

// DirectInput Interface
interface DirectInput : IUnknown {
  mixin(uuid("9f76fa02-8e92-11d1-8808-00c04fc2c602"));
  // static DWINGUID IID = { 0x9f76fa02, 0x8e92, 0x11d1, 0x88, 0x08, 0x00, 0xc0, 0x4f, 0xc2, 0xc6, 0x02 };
  /*[id(0x60010000)]*/ int InternalSetObject(IUnknown lpdd);
  /*[id(0x60010001)]*/ int InternalGetObject(out IUnknown lpdd);
  /*[id(0x60010002)]*/ int CreateDevice(wchar* guid, out DirectInputDevice dev);
  /*[id(0x60010003)]*/ int GetDIEnumDevices(CONST_DIDEVICETYPE deviceType, CONST_DIENUMDEVICESFLAGS flags, out DirectInputEnumDevices retval);
  /*[id(0x60010004)]*/ int GetDeviceStatus(wchar* guid, out short status);
  /*[id(0x60010005)]*/ int RunControlPanel(int hwndOwner);
}

// DirectInputDevice Interface
interface DirectInputDevice : IUnknown {
  mixin(uuid("9f76fa03-8e92-11d1-8808-00c04fc2c602"));
  // static DWINGUID IID = { 0x9f76fa03, 0x8e92, 0x11d1, 0x88, 0x08, 0x00, 0xc0, 0x4f, 0xc2, 0xc6, 0x02 };
  /*[id(0x60010000)]*/ int InternalSetObject(IUnknown lpdd);
  /*[id(0x60010001)]*/ int InternalGetObject(out IUnknown lpdd);
  /*[id(0x60010002)]*/ int Acquire();
  /*[id(0x60010003)]*/ int GetDeviceObjectsEnum(CONST_DIDFTFLAGS flags, out DirectInputEnumDeviceObjects ppret);
  /*[id(0x60010004)]*/ int GetCapabilities(ref DIDEVCAPS caps);
  /*[id(0x60010005)]*/ int GetDeviceData(ref SAFEARRAY deviceObjectDataArray, CONST_DIDGDDFLAGS flags, out int c);
  /*[id(0x60010006)]*/ int GetDeviceInfo(out DirectInputDeviceInstance deviceInstance);
  /*[id(0x60010007)]*/ int GetDeviceStateKeyboard(ref DIKEYBOARDSTATE state);
  /*[id(0x60010008)]*/ int GetDeviceStateMouse(ref DIMOUSESTATE state);
  /*[id(0x60010009)]*/ int GetDeviceStateJoystick(ref DIJOYSTATE state);
  /*[id(0x6001000A)]*/ int GetDeviceStateJoystick2(ref DIJOYSTATE2 state);
  /*[id(0x6001000B)]*/ int GetDeviceState(int cb, void* state);
  /*[id(0x6001000C)]*/ int GetObjectInfo(int Obj, CONST_DIPHFLAGS how, out DirectInputDeviceObjectInstance ret);
  /*[id(0x6001000D)]*/ int GetProperty(wchar* guid, void *propertyInfo);
  /*[id(0x6001000E)]*/ int RunControlPanel(int hwnd);
  /*[id(0x6001000F)]*/ int SetCooperativeLevel(int hwnd, CONST_DISCLFLAGS flags);
  /*[id(0x60010010)]*/ int SetCommonDataFormat(CONST_DICOMMONDATAFORMATS format);
  /*[id(0x60010011)]*/ int SetDataFormat(DIDATAFORMAT* format, SAFEARRAY* formatArray);
  /*[id(0x60010012)]*/ int SetEventNotification(int hEvent);
  /*[id(0x60010013)]*/ int SetProperty(wchar* guid, void* propertyInfo);
  /*[id(0x60010014)]*/ int Unacquire();
  /*[id(0x60010015)]*/ int Poll();
  /*[id(0x60010016)]*/ int CreateEffect(wchar* effectGuid, DIEFFECT* effectinfo, out DirectInputEffect ret);
  /*[id(0x60010017)]*/ int CreateCustomEffect(DIEFFECT* effectinfo, int channels, int samplePeriod, int nSamples, SAFEARRAY* sampledata, out DirectInputEffect ret);
  /*[id(0x60010018)]*/ int SendDeviceData(int count, SAFEARRAY* data, CONST_DISDDFLAGS flags, out int retcount);
  /*[id(0x60010019)]*/ int SendForceFeedbackCommand(CONST_DISFFCFLAGS flags);
  /*[id(0x6001001A)]*/ int GetForceFeedbackState(out CONST_DIGFFSFLAGS state);
  /*[id(0x6001001B)]*/ int GetEffectsEnum(CONST_DIEFTFLAGS effType, out DirectInputEnumEffects ret);
}

// DirectInputEnumDeviceObjects Interface
interface DirectInputEnumDeviceObjects : IUnknown {
  mixin(uuid("9f76fa08-8e92-11d1-8808-00c04fc2c602"));
  // static DWINGUID IID = { 0x9f76fa08, 0x8e92, 0x11d1, 0x88, 0x08, 0x00, 0xc0, 0x4f, 0xc2, 0xc6, 0x02 };
  /*[id(0x60010000)]*/ int GetItem(int index, out DirectInputDeviceObjectInstance info);
  /*[id(0x60010001)]*/ int GetCount(out int count);
}

// DirectInputDeviceObjectInstance Interface
interface DirectInputDeviceObjectInstance : IUnknown {
  mixin(uuid("9f76fa05-8e92-11d1-8808-00c04fc2c602"));
  // static DWINGUID IID = { 0x9f76fa05, 0x8e92, 0x11d1, 0x88, 0x08, 0x00, 0xc0, 0x4f, 0xc2, 0xc6, 0x02 };
  /*[id(0x60010000)]*/ int GetGuidType(out wchar* ret);
  /*[id(0x60010001)]*/ int GetOfs(out int ret);
  /*[id(0x60010002)]*/ int GetType(out int ret);
  /*[id(0x60010003)]*/ int GetFlags(out CONST_DIDEVICEOBJINSTANCEFLAGS ret);
  /*[id(0x60010004)]*/ int GetName(out wchar* ret);
  /*[id(0x60010005)]*/ int GetCollectionNumber(out short ret);
  /*[id(0x60010006)]*/ int GetDesignatorIndex(out short ret);
  /*[id(0x60010007)]*/ int GetUsagePage(out short ret);
  /*[id(0x60010008)]*/ int GetUsage(out short ret);
  /*[id(0x60010009)]*/ int GetDimension(out int ret);
  /*[id(0x6001000A)]*/ int GetExponent(out short ret);
}

// DirectInputDeviceInstance Interface
interface DirectInputDeviceInstance : IUnknown {
  mixin(uuid("9f76fa04-8e92-11d1-8808-00c04fc2c602"));
  // static DWINGUID IID = { 0x9f76fa04, 0x8e92, 0x11d1, 0x88, 0x08, 0x00, 0xc0, 0x4f, 0xc2, 0xc6, 0x02 };
  /*[id(0x60010000)]*/ int GetGuidInstance(out wchar* ret);
  /*[id(0x60010001)]*/ int GetGuidProduct(out wchar* ret);
  /*[id(0x60010002)]*/ int GetProductName(out wchar* ret);
  /*[id(0x60010003)]*/ int GetInstanceName(out wchar* ret);
  /*[id(0x60010004)]*/ int GetGuidFFDriver(out wchar* ret);
  /*[id(0x60010005)]*/ int GetUsagePage(out short ret);
  /*[id(0x60010006)]*/ int GetUsage(out short ret);
  /*[id(0x60010007)]*/ int GetDevType(out int ret);
}

// DirectInputEffect Interface
interface DirectInputEffect : IUnknown {
  mixin(uuid("bcaa7da9-f7ef-11d2-93fd-00c04fc2c602"));
  // static DWINGUID IID = { 0xbcaa7da9, 0xf7ef, 0x11d2, 0x93, 0xfd, 0x00, 0xc0, 0x4f, 0xc2, 0xc6, 0x02 };
  /*[id(0x60010000)]*/ int InternalSetObject(IUnknown lpdd);
  /*[id(0x60010001)]*/ int InternalGetObject(out IUnknown lpdd);
  /*[id(0x60010002)]*/ int Download();
  /*[id(0x60010003)]*/ int GetEffectGuid(out wchar* guid);
  /*[id(0x60010004)]*/ int GetEffectStatus(out int ret);
  /*[id(0x60010005)]*/ int start(int iterations, int flags);
  /*[id(0x60010006)]*/ int Stop();
  /*[id(0x60010007)]*/ int Unload();
  /*[id(0x60010008)]*/ int SetParameters(DIEFFECT* effectinfo, CONST_DIEPFLAGS flags);
  /*[id(0x60010009)]*/ int GetParameters(ref DIEFFECT effectinfo);
}

// DirectInputEnumEffects Interface
interface DirectInputEnumEffects : IUnknown {
  mixin(uuid("bcaa7daa-f7ef-11d2-93fd-00c04fc2c602"));
  // static DWINGUID IID = { 0xbcaa7daa, 0xf7ef, 0x11d2, 0x93, 0xfd, 0x00, 0xc0, 0x4f, 0xc2, 0xc6, 0x02 };
  /*[id(0x60010000)]*/ int GetCount(out int ret);
  /*[id(0x60010001)]*/ int GetEffectGuid(int i, out wchar* ret);
  /*[id(0x60010002)]*/ int GetType(int i, out CONST_DIEFTFLAGS ret);
  /*[id(0x60010003)]*/ int GetStaticParams(int i, out CONST_DIEPFLAGS ret);
  /*[id(0x60010004)]*/ int GetDynamicParams(int i, out CONST_DIEPFLAGS ret);
  /*[id(0x60010005)]*/ int GetName(int i, out wchar* ret);
}

// DirectInputEnumDevices Interface
interface DirectInputEnumDevices : IUnknown {
  mixin(uuid("9f76fa09-8e92-11d1-8808-00c04fc2c602"));
  // static DWINGUID IID = { 0x9f76fa09, 0x8e92, 0x11d1, 0x88, 0x08, 0x00, 0xc0, 0x4f, 0xc2, 0xc6, 0x02 };
  /*[id(0x60010000)]*/ int GetItem(int index, out DirectInputDeviceInstance info);
  /*[id(0x60010001)]*/ int GetCount(out int count);
}

// Direct3DRMInterpolator Interface
interface Direct3DRMInterpolator : IUnknown {
  mixin(uuid("9f76fe29-8e92-11d1-8808-00c04fc2c602"));
  // static DWINGUID IID = { 0x9f76fe29, 0x8e92, 0x11d1, 0x88, 0x08, 0x00, 0xc0, 0x4f, 0xc2, 0xc6, 0x02 };
  /*[id(0x60010000)]*/ int InternalSetObject(IUnknown lpdd);
  /*[id(0x60010001)]*/ int InternalGetObject(out IUnknown lpdd);
  /*[id(0x60010002)]*/ int AttachObject(Direct3DRMObject rmObject);
  /*[id(0x60010003)]*/ int DetachObject(Direct3DRMObject rmObject);
  /*[id(0x60010004)]*/ int GetAttachedObjects(out Direct3DRMObjectArray rmArray);
  /*[id(0x60010005)]*/ int SetIndex(float val);
  /*[id(0x60010006)]*/ int GetIndex(out float val);
  /*[id(0x60010007)]*/ int Interpolate(float val, Direct3DRMObject rmObject, CONST_D3DRMINTERPOLATIONFLAGS options);
}

// DirectMusicLoader Interface
interface DirectMusicLoader : IUnknown {
  mixin(uuid("fafa35a0-8b72-11d2-90b2-00c04fc2c602"));
  // static DWINGUID IID = { 0xfafa35a0, 0x8b72, 0x11d2, 0x90, 0xb2, 0x00, 0xc0, 0x4f, 0xc2, 0xc6, 0x02 };
  /*[id(0x60010000)]*/ int InternalSetObject(IUnknown lpdd);
  /*[id(0x60010001)]*/ int InternalGetObject(out IUnknown lpdd);
  /*[id(0x60010002)]*/ int LoadSegment(wchar* filename, out DirectMusicSegment ret);
  /*[id(0x60010003)]*/ int LoadStyle(wchar* filename, out DirectMusicStyle ret);
  /*[id(0x60010004)]*/ int LoadBand(wchar* filename, out DirectMusicBand ret);
  /*[id(0x60010005)]*/ int LoadCollection(wchar* filename, out DirectMusicCollection ret);
  /*[id(0x60010006)]*/ int LoadSegmentFromResource(wchar* moduleName, wchar* resourceName, out DirectMusicSegment ret);
  /*[id(0x60010007)]*/ int LoadStyleFromResource(wchar* moduleName, wchar* resourceName, out DirectMusicStyle ret);
  /*[id(0x60010008)]*/ int LoadBandFromResource(wchar* moduleName, wchar* resourceName, out DirectMusicBand ret);
  /*[id(0x60010009)]*/ int LoadCollectionFromResource(wchar* moduleName, wchar* resourceName, out DirectMusicCollection ret);
  /*[id(0x6001000A)]*/ int SetSearchDirectory(wchar* dir);
  /*[id(0x6001000B)]*/ int LoadChordMap(wchar* filename, out DirectMusicChordMap ret);
  /*[id(0x6001000C)]*/ int LoadChordMapFromResource(wchar* moduleName, wchar* resourceName, out DirectMusicChordMap ret);
}

// DirectMusicSegment Interface
interface DirectMusicSegment : IUnknown {
  mixin(uuid("fafa35a1-8b72-11d2-90b2-00c04fc2c602"));
  // static DWINGUID IID = { 0xfafa35a1, 0x8b72, 0x11d2, 0x90, 0xb2, 0x00, 0xc0, 0x4f, 0xc2, 0xc6, 0x02 };
  /*[id(0x60010000)]*/ int InternalSetObject(IUnknown lpdd);
  /*[id(0x60010001)]*/ int InternalGetObject(out IUnknown lpdd);
  /*[id(0x60010002)]*/ int Clone(int mtStart, int mtEnd, out DirectMusicSegment ppSegment);
  /*[id(0x60010003)]*/ int SetStartPoint(int mtStart);
  /*[id(0x60010004)]*/ int GetStartPoint(out int pmtStart);
  /*[id(0x60010005)]*/ int SetLoopPoints(int mtStart, int mtEnd);
  /*[id(0x60010006)]*/ int GetLoopPointStart(out int pmtStart);
  /*[id(0x60010007)]*/ int GetLoopPointEnd(out int pmtEnd);
  /*[id(0x60010008)]*/ int GetLength(out int pmtLength);
  /*[id(0x60010009)]*/ int SetLength(int mtLength);
  /*[id(0x6001000A)]*/ int GetRepeats(out int lRepeats);
  /*[id(0x6001000B)]*/ int SetRepeats(int lRepeats);
  /*[id(0x6001000C)]*/ int Download(DirectMusicPerformance performance);
  /*[id(0x6001000D)]*/ int Unload(DirectMusicPerformance performance);
  /*[id(0x6001000E)]*/ int SetAutoDownloadEnable(short b);
  /*[id(0x6001000F)]*/ int SetTempoEnable(short b);
  /*[id(0x60010010)]*/ int SetTimeSigEnable(short b);
  /*[id(0x60010011)]*/ int SetStandardMidiFile();
  /*[id(0x60010012)]*/ int ConnectToCollection(DirectMusicCollection c);
}

// DirectMusicPerformance Interface
interface DirectMusicPerformance : IUnknown {
  mixin(uuid("fafa35a7-8b72-11d2-90b2-00c04fc2c602"));
  // static DWINGUID IID = { 0xfafa35a7, 0x8b72, 0x11d2, 0x90, 0xb2, 0x00, 0xc0, 0x4f, 0xc2, 0xc6, 0x02 };
  /*[id(0x60010000)]*/ int InternalSetObject(IUnknown lpdd);
  /*[id(0x60010001)]*/ int InternalGetObject(out IUnknown lpdd);
  /*[id(0x60010002)]*/ int Init(DirectSound DirectSound, int hwnd);
  /*[id(0x60010003)]*/ int CloseDown();
  /*[id(0x60010004)]*/ int PlaySegment(DirectMusicSegment segment, int lFlags, int startTime, out DirectMusicSegmentState segmentState);
  /*[id(0x60010005)]*/ int Stop(DirectMusicSegment segment, DirectMusicSegmentState segmentState, int mtTime, int lFlags);
  /*[id(0x60010006)]*/ int GetSegmentState(int mtTime, out DirectMusicSegmentState ret);
  /*[id(0x60010007)]*/ int Invalidate(int mtTime, int flags);
  /*[id(0x60010008)]*/ int IsPlaying(DirectMusicSegment segment, DirectMusicSegmentState segmentState, out short b);
  /*[id(0x60010009)]*/ int AddNotificationType(CONST_DMUS_NOTIFICATION_TYPE type);
  /*[id(0x6001000A)]*/ int RemoveNotificationType(CONST_DMUS_NOTIFICATION_TYPE type);
  /*[id(0x6001000B)]*/ int SetNotificationHandle(int hnd);
  /*[id(0x6001000C)]*/ int GetNotificationPMSG(ref DMUS_NOTIFICATION_PMSG message, out short success);
  /*[id(0x6001000D)]*/ int MusicToClockTime(int mtTime, out int ctTime);
  /*[id(0x6001000E)]*/ int ClockToMusicTime(int ctTime, out int mtTime);
  /*[id(0x6001000F)]*/ int GetMusicTime(out int ret);
  /*[id(0x60010010)]*/ int GetClockTime(out int ret);
  /*[id(0x60010011)]*/ int GetPrepareTime(out int lMilliSeconds);
  /*[id(0x60010012)]*/ int GetBumperLength(out int lMilliSeconds);
  /*[id(0x60010013)]*/ int GetLatencyTime(out int ctTime);
  /*[id(0x60010014)]*/ int GetQueueTime(out int ctTime);
  /*[id(0x60010015)]*/ int GetResolvedTime(int ctTime, int flags, out int ret);
  /*[id(0x60010016)]*/ int SetPrepareTime(int lMilliSeconds);
  /*[id(0x60010017)]*/ int SetBumperLength(int lMilliSeconds);
  /*[id(0x60010018)]*/ int AdjustTime(int tAmount);
  /*[id(0x60010019)]*/ int SetMasterAutoDownload(short b);
  /*[id(0x6001001A)]*/ int GetMasterAutoDownload(out short b);
  /*[id(0x6001001B)]*/ int SetMasterTempo(float tempo);
  /*[id(0x6001001C)]*/ int GetMasterTempo(out float tempo);
  /*[id(0x6001001D)]*/ int SetMasterVolume(int vol);
  /*[id(0x6001001E)]*/ int GetMasterVolume(out int v);
  /*[id(0x6001001F)]*/ int SetMasterGrooveLevel(short level);
  /*[id(0x60010020)]*/ int GetMasterGrooveLevel(out short level);
  /*[id(0x60010021)]*/ int Reset(int resetflags);
  /*[id(0x60010022)]*/ int GetStyle(int mtTime, ref int mtUntil, out DirectMusicStyle ret);
  /*[id(0x60010023)]*/ int GetChordMap(int mtTime, ref int mtUntil, out DirectMusicChordMap ret);
  /*[id(0x60010024)]*/ int GetCommand(int mtTime, ref int mtUntil, out ubyte command);
  /*[id(0x60010025)]*/ int GetGrooveLevel(int mtTime, ref int mtUntil, out ubyte level);
  /*[id(0x60010026)]*/ int GetTempo(int mtTime, ref int mtUntil, out double tempo);
  /*[id(0x60010027)]*/ int GetTimeSig(int mtTime, ref int mtUntil, ref DMUS_TIMESIGNATURE timeSig);
  /*[id(0x60010028)]*/ int SendNotePMSG(int lTime, int flags, int channel, DMUS_NOTE_PMSG* msg);
  /*[id(0x60010029)]*/ int SendCurvePMSG(int lTime, int flags, int channel, DMUS_CURVE_PMSG* msg);
  /*[id(0x6001002A)]*/ int SendMIDIPMSG(int lTime, int flags, int channel, ubyte status, ubyte byte1, ubyte byte2);
  /*[id(0x6001002B)]*/ int SendPatchPMSG(int lTime, int flags, int channel, ubyte instrument, ubyte byte1, ubyte byte2);
  /*[id(0x6001002C)]*/ int SendTempoPMSG(int lTime, int flags, double tempo);
  /*[id(0x6001002D)]*/ int SendTransposePMSG(int lTime, int flags, int channel, short transpose);
  /*[id(0x6001002E)]*/ int SendTimeSigPMSG(int lTime, int flags, DMUS_TIMESIGNATURE* timeSig);
  /*[id(0x6001002F)]*/ int GetPortName(int index, out wchar* name);
  /*[id(0x60010030)]*/ int GetPortCount(out int c);
  /*[id(0x60010031)]*/ int GetPortCaps(int index, ref DMUS_PORTCAPS caps);
  /*[id(0x60010032)]*/ int SetPort(int index, int numGroups);
}

// DirectMusicSegmentState Interface
interface DirectMusicSegmentState : IUnknown {
  mixin(uuid("fafa35a6-8b72-11d2-90b2-00c04fc2c602"));
  // static DWINGUID IID = { 0xfafa35a6, 0x8b72, 0x11d2, 0x90, 0xb2, 0x00, 0xc0, 0x4f, 0xc2, 0xc6, 0x02 };
  /*[id(0x60010000)]*/ int InternalSetObject(IUnknown lpdd);
  /*[id(0x60010001)]*/ int InternalGetObject(out IUnknown lpdd);
  /*[id(0x60010002)]*/ int GetRepeats(out int repeats);
  /*[id(0x60010003)]*/ int GetSeek(out int seek);
  /*[id(0x60010004)]*/ int GetStartPoint(out int seek);
  /*[id(0x60010005)]*/ int GetStartTime(out int seek);
  /*[id(0x60010006)]*/ int GetSegment(out DirectMusicSegment segment);
}

// DirectMusicStyle Interface
interface DirectMusicStyle : IUnknown {
  mixin(uuid("fafa35a4-8b72-11d2-90b2-00c04fc2c602"));
  // static DWINGUID IID = { 0xfafa35a4, 0x8b72, 0x11d2, 0x90, 0xb2, 0x00, 0xc0, 0x4f, 0xc2, 0xc6, 0x02 };
  /*[id(0x60010000)]*/ int InternalSetObject(IUnknown lpdd);
  /*[id(0x60010001)]*/ int InternalGetObject(out IUnknown lpdd);
  /*[id(0x60010002)]*/ int GetBandName(int index, out wchar* name);
  /*[id(0x60010003)]*/ int GetBandCount(out int count);
  /*[id(0x60010004)]*/ int GetBand(wchar* name, out DirectMusicBand ret);
  /*[id(0x60010005)]*/ int GetDefaultBand(out DirectMusicBand ret);
  /*[id(0x60010006)]*/ int GetMotifName(int index, out wchar* name);
  /*[id(0x60010007)]*/ int GetMotifCount(out int count);
  /*[id(0x60010008)]*/ int GetMotif(wchar* name, out DirectMusicSegment ret);
  /*[id(0x60010009)]*/ int GetTimeSignature(ref DMUS_TIMESIGNATURE pTimeSig);
  /*[id(0x6001000A)]*/ int GetTempo(out double pTempo);
}

// DirectMusicBand Interface
interface DirectMusicBand : IUnknown {
  mixin(uuid("fafa35a3-8b72-11d2-90b2-00c04fc2c602"));
  // static DWINGUID IID = { 0xfafa35a3, 0x8b72, 0x11d2, 0x90, 0xb2, 0x00, 0xc0, 0x4f, 0xc2, 0xc6, 0x02 };
  /*[id(0x60010000)]*/ int InternalSetObject(IUnknown lpdd);
  /*[id(0x60010001)]*/ int InternalGetObject(out IUnknown lpdd);
  /*[id(0x60010002)]*/ int CreateSegment(out DirectMusicSegment ret);
  /*[id(0x60010003)]*/ int Download(DirectMusicPerformance performance);
  /*[id(0x60010004)]*/ int Unload(DirectMusicPerformance performance);
}

// DirectMusicChordMap Interface
interface DirectMusicChordMap : IUnknown {
  mixin(uuid("fafa35a5-8b72-11d2-90b2-00c04fc2c602"));
  // static DWINGUID IID = { 0xfafa35a5, 0x8b72, 0x11d2, 0x90, 0xb2, 0x00, 0xc0, 0x4f, 0xc2, 0xc6, 0x02 };
  /*[id(0x60010000)]*/ int InternalSetObject(IUnknown lpdd);
  /*[id(0x60010001)]*/ int InternalGetObject(out IUnknown lpdd);
  /*[id(0x60010002)]*/ int GetScale(out int scale);
}

// DirectMusicCollection Interface
interface DirectMusicCollection : IUnknown {
  mixin(uuid("fafa35a8-8b72-11d2-90b2-00c04fc2c602"));
  // static DWINGUID IID = { 0xfafa35a8, 0x8b72, 0x11d2, 0x90, 0xb2, 0x00, 0xc0, 0x4f, 0xc2, 0xc6, 0x02 };
  /*[id(0x60010000)]*/ int InternalSetObject(IUnknown lpdd);
  /*[id(0x60010001)]*/ int InternalGetObject(out IUnknown lpdd);
}

// DirectMusicComposer Interface
interface DirectMusicComposer : IUnknown {
  mixin(uuid("fafa35a2-8b72-11d2-90b2-00c04fc2c602"));
  // static DWINGUID IID = { 0xfafa35a2, 0x8b72, 0x11d2, 0x90, 0xb2, 0x00, 0xc0, 0x4f, 0xc2, 0xc6, 0x02 };
  /*[id(0x60010000)]*/ int InternalSetObject(IUnknown lpdd);
  /*[id(0x60010001)]*/ int InternalGetObject(out IUnknown lpdd);
  /*[id(0x60010002)]*/ int AutoTransition(DirectMusicPerformance performance, DirectMusicSegment toSeg, int lCommand, int lFlags, DirectMusicChordMap chordmap, out DirectMusicSegment ppTransSeg);
  /*[id(0x60010003)]*/ int ComposeSegmentFromTemplate(DirectMusicStyle style, DirectMusicSegment templateSeg, short activity, DirectMusicChordMap chordmap, out DirectMusicSegment SectionSeg);
  /*[id(0x60010004)]*/ int ComposeSegmentFromShape(DirectMusicStyle style, short numberOfMeasures, short shape, short activity, short bIntro, short bEnd, DirectMusicChordMap chordmap, out DirectMusicSegment SectionSeg);
  /*[id(0x60010005)]*/ int ComposeTransition(DirectMusicSegment fromSeg, DirectMusicSegment toSeg, int mtTime, int lCommand, int lFlags, DirectMusicChordMap chordmap, out DirectMusicSegment SectionSeg);
  /*[id(0x60010006)]*/ int ComposeTemplateFromShape(short numMeasures, short shape, short bIntro, short bEnd, short endLength, out DirectMusicSegment TempSeg);
  /*[id(0x60010007)]*/ int ChangeChordMap(DirectMusicSegment segment, short trackScale, DirectMusicChordMap chordmap);
}

// DirectXEvent Interface
interface DirectXEvent : IUnknown {
  mixin(uuid("fafa35b0-8b72-11d2-90b2-00c04fc2c602"));
  // static DWINGUID IID = { 0xfafa35b0, 0x8b72, 0x11d2, 0x90, 0xb2, 0x00, 0xc0, 0x4f, 0xc2, 0xc6, 0x02 };
  /*[id(0x60010000)]*/ int DXCallback(int eventid);
}

// DirectX7 root object functions
interface IDirectX7 : IUnknown {
  mixin(uuid("fafa3599-8b72-11d2-90b2-00c04fc2c602"));
  // static DWINGUID IID = { 0xfafa3599, 0x8b72, 0x11d2, 0x90, 0xb2, 0x00, 0xc0, 0x4f, 0xc2, 0xc6, 0x02 };
  /*[id(0x60010000)]*/ int Direct3DRMCreate(out Direct3DRM3 ret);
  /*[id(0x60010001)]*/ int DirectDrawCreate(wchar* guid, out DirectDraw7 ret);
  /*[id(0x60010002)]*/ int GetDDEnum(out DirectDrawEnum ret);
  /*[id(0x60010003)]*/ int DirectSoundCreate(wchar* guid, out DirectSound ret);
  /*[id(0x60010004)]*/ int DirectSoundCaptureCreate(wchar* guid, out DirectSoundCapture ret);
  /*[id(0x60010005)]*/ int GetDSEnum(out DirectSoundEnum retval);
  /*[id(0x60010006)]*/ int GetDSCaptureEnum(out DirectSoundEnum retval);
  /*[id(0x60010007)]*/ int DirectInputCreate(out DirectInput ret);
  /*[id(0x60010008)]*/ int DirectPlayCreate(wchar* guid, out DirectPlay4 ret);
  /*[id(0x60010009)]*/ int DirectPlayLobbyCreate(out DirectPlayLobby3 ret);
  /*[id(0x6001000A)]*/ int GetDPEnum(out DirectPlayEnumServiceProviders retval);
  /*[id(0x6001000B)]*/ int ColorGetAlpha(int color, out float ret);
  /*[id(0x6001000C)]*/ int ColorGetBlue(int color, out float ret);
  /*[id(0x6001000D)]*/ int ColorGetGreen(int color, out float ret);
  /*[id(0x6001000E)]*/ int ColorGetRed(int color, out float ret);
  /*[id(0x6001000F)]*/ int CreateColorRGB(float r, float g, float b, out int color);
  /*[id(0x60010010)]*/ int CreateColorRGBA(float r, float g, float b, float a, out int color);
  /*[id(0x60010011)]*/ int MatrixFromQuaternion(out D3DMATRIX matrix, D3DRMQUATERNION* quat);
  /*[id(0x60010012)]*/ int QuaternionRotation(out D3DRMQUATERNION quat, D3DVECTOR* axis, float theta);
  /*[id(0x60010013)]*/ int QuaternionMultiply(out D3DRMQUATERNION quat, D3DRMQUATERNION* quatA, D3DRMQUATERNION* quatB);
  /*[id(0x60010014)]*/ int QuaternionSlerp(out D3DRMQUATERNION quat, D3DRMQUATERNION* quatA, D3DRMQUATERNION* quatB, float alpha);
  /*[id(0x60010015)]*/ int VectorAdd(out D3DVECTOR v, D3DVECTOR* vA, D3DVECTOR* vB);
  /*[id(0x60010016)]*/ int VectorCrossProduct(out D3DVECTOR v, D3DVECTOR* vA, D3DVECTOR* vB);
  /*[id(0x60010017)]*/ int VectorDotProduct(D3DVECTOR* vA, D3DVECTOR* vB, out float ret);
  /*[id(0x60010018)]*/ int VectorModulus(D3DVECTOR* vA, out float ret);
  /*[id(0x60010019)]*/ int VectorNormalize(ref D3DVECTOR v);
  /*[id(0x6001001A)]*/ int VectorRandom(ref D3DVECTOR v);
  /*[id(0x6001001B)]*/ int VectorReflect(out D3DVECTOR vDest, D3DVECTOR* vRay, D3DVECTOR* vNormal);
  /*[id(0x6001001C)]*/ int VectorRotate(out D3DVECTOR vDest, D3DVECTOR* vA, D3DVECTOR* vAxis, float theta);
  /*[id(0x6001001D)]*/ int VectorScale(out D3DVECTOR vDest, D3DVECTOR* vA, float factor);
  /*[id(0x6001001E)]*/ int VectorSubtract(out D3DVECTOR v, D3DVECTOR* vA, D3DVECTOR* vB);
  /*[id(0x6001001F)]*/ int VectorCopy(ref D3DVECTOR vDest, D3DVECTOR* vSrc);
  /*[id(0x60010020)]*/ int RotateXMatrix(ref D3DMATRIX mDest, float radians);
  /*[id(0x60010021)]*/ int RotateYMatrix(ref D3DMATRIX mDest, float radians);
  /*[id(0x60010022)]*/ int RotateZMatrix(ref D3DMATRIX mDest, float radians);
  /*[id(0x60010023)]*/ int ViewMatrix(ref D3DMATRIX mDest, D3DVECTOR* vFrom, D3DVECTOR* vTo, D3DVECTOR* vUp, float roll);
  /*[id(0x60010024)]*/ int MatrixMultiply(ref D3DMATRIX mDest, D3DMATRIX* mA, D3DMATRIX* mB);
  /*[id(0x60010025)]*/ int ProjectionMatrix(ref D3DMATRIX mDest, float nearPlane, float farplane, float fov);
  /*[id(0x60010026)]*/ int CopyMatrix(ref D3DMATRIX mDest, D3DMATRIX* mSrc);
  /*[id(0x60010027)]*/ int IdentityMatrix(ref D3DMATRIX mDest);
  /*[id(0x60010028)]*/ int ZeroMatrix(ref D3DMATRIX mDest);
  /*[id(0x60010029)]*/ int TickCount(out int retV);
  /*[id(0x6001002A)]*/ int SystemBpp(out int retV);
  /*[id(0x6001002B)]*/ int DirectMusicLoaderCreate(out DirectMusicLoader ret);
  /*[id(0x6001002C)]*/ int DirectMusicComposerCreate(out DirectMusicComposer ret);
  /*[id(0x6001002D)]*/ int DirectMusicPerformanceCreate(out DirectMusicPerformance ret);
  /*[id(0x6001002E)]*/ int GetWindowRect(int hwnd, ref RECT r);
  /*[id(0x6001002F)]*/ int CreateEvent(DirectXEvent event, out int h);
  /*[id(0x60010030)]*/ int SetEvent(int eventid);
  /*[id(0x60010031)]*/ int DestroyEvent(int eventid);
  /*[id(0x60010032)]*/ int CreateD3DVertex(float x, float y, float z, float nx, float ny, float nz, float tu, float tv, ref D3DVERTEX v);
  /*[id(0x60010033)]*/ int CreateD3DLVertex(float x, float y, float z, int color, int specular, float tu, float tv, ref D3DLVERTEX v);
  /*[id(0x60010034)]*/ int CreateD3DTLVertex(float sx, float sy, float sz, float rhw, int color, int specular, float tu, float tv, ref D3DTLVERTEX v);
  /*[id(0x60010035)]*/ int DirectDraw4Create(wchar* guid, out DirectDraw4 ret);
  /*[id(0x60010036)]*/ int CreateNewGuid(out wchar* retGuid);
}

// CoClasses

// DirectX7
abstract class DirectX7 {
  mixin(uuid("e1211353-8e94-11d1-8808-00c04fc2c602"));
  // static DWINGUID CLSID = { 0xe1211353, 0x8e94, 0x11d1, 0x88, 0x08, 0x00, 0xc0, 0x4f, 0xc2, 0xc6, 0x02 };
  mixin Interfaces!(IDirectX7);
}
