/*** Converted to D from curl.h by htod
    Main interface file for libcurl library
 */
module ydb.net.libcurl.c.curl;

version(Tangobos):

version(Win32)
    { pragma(lib, "libcurl-4.lib"); }

private import std.c.windows.winsock;
//C     #ifndef __CURL_CURL_H
//C     #define __CURL_CURL_H


/** If you have problems, all libcurl docs and details are found here:
   http://curl.haxx.se/libcurl/
*/

//C     #include "curlver.h" /** the libcurl version defines */
//C     #ifndef __CURL_CURLVER_H
//C     #define __CURL_CURLVER_H


/** This header file contains nothing but libcurl version info, generated by
   a script at release-time. This was made its own header file in 7.11.2 */

/** This is the version number of the libcurl package from which this header
   file origins: */
//C     #define LIBCURL_VERSION "7.16.0"

/** The numeric version number is also available "in parts" by using these
   defines: */
//C     #define LIBCURL_VERSION_MAJOR 7
//C     #define LIBCURL_VERSION_MINOR 16
const LIBCURL_VERSION_MAJOR = 7;
//C     #define LIBCURL_VERSION_PATCH 0
const LIBCURL_VERSION_MINOR = 16;

const LIBCURL_VERSION_PATCH = 0;
/** This is the numeric version of the libcurl version number, meant for easier
   parsing and comparions by programs. The LIBCURL_VERSION_NUM define will
   always follow this syntax:

         0xXXYYZZ

   Where XX, YY and ZZ are the main version, release and patch numbers in
   hexadecimal (using 8 bits each). All three numbers are always represented
   using two digits.  1.2 would appear as "0x010200" while version 9.11.7
   appears as "0x090b07".

   This 6-digit (24 bits) hexadecimal number does not show pre-release number,
   and it is always a greater number in a more recent release. It makes
   comparisons with greater than and less than work.
*/
//C     #define LIBCURL_VERSION_NUM 0x071000

const LIBCURL_VERSION_NUM = 0x071000;
//C     #endif /** __CURL_CURLVER_H */

//C     #include <stdio.h>
//import std.c.stdio;
//C     #include <limits.h>
//import std.c.limits;

/** The include stuff here below is mainly for time_t! */
//C     #ifdef vms
//C     # include <types.h>
//C     # include <time.h>
//C     #else
//C     # include <sys/types.h>
//import std.c.types;
//C     # include <time.h>
//import std.c.time;
//C     #endif /** defined (vms) */

//C     typedef void CURL;
extern (C):
alias void CURL;

//C     #ifdef  __cplusplus
//C     extern "C" {
//C     #endif

/**
 * Decorate exportable functions for Win32 DLL linking.
 * This avoids using a .def file for building libcurl.dll.
 */
//C     #if (defined(WIN32) || defined(_WIN32)) && !defined(CURL_STATICLIB)
//C     #if defined(BUILDING_LIBCURL)
//C     #define CURL_EXTERN  __declspec(dllexport)
//C     #else
//C     #define CURL_EXTERN  __declspec(dllimport)
//C     #endif
//C     #else

//C     #ifdef CURL_HIDDEN_SYMBOLS
/**
 * This definition is used to make external definitions visibile in the
 * shared library when symbols are hidden by default.  It makes no
 * difference when compiling applications whether this is set or not,
 * only when compiling the library.
 */
//C     #define CURL_EXTERN CURL_EXTERN_SYMBOL
//C     #else
//C     #define CURL_EXTERN
//C     #endif
//C     #endif

/**
 * We want the typedef curl_off_t setup for large file support on all
 * platforms. We also provide a CURL_FORMAT_OFF_T define to use in *printf
 * format strings when outputting a variable of type curl_off_t.
 *
 * Note: "pocc -Ze" is MSVC compatibily mode and this sets _MSC_VER!
 */

//C     #if (defined(_MSC_VER) && !defined(__POCC__)) || (defined(__LCC__) && defined(WIN32))
/** MSVC */
//C     #ifdef _WIN32_WCE
//C       typedef long curl_off_t;
//C     #define CURL_FORMAT_OFF_T "%ld"
//C     #else
//C       typedef signed __int64 curl_off_t;
alias long curl_off_t;
//C     #define CURL_FORMAT_OFF_T "%I64d"
//C     #endif
//C     #else /** (_MSC_VER && !__POCC__) || (__LCC__ && WIN32) */
//C     #if (defined(__GNUC__) && defined(WIN32)) || defined(__WATCOMC__)
/** gcc on windows or Watcom */
//C       typedef long long curl_off_t;
//C     #define CURL_FORMAT_OFF_T "%I64d"
//C     #else /** GCC or Watcom on Windows  */

/** "normal" POSIX approach, do note that this does not necessarily mean that
   the type is >32 bits, see the SIZEOF_CURL_OFF_T define for that! */
//C       typedef off_t curl_off_t;

/** Check a range of defines to detect large file support. On Linux it seems
   none of these are set by default, so if you don't explicitly switches on
   large file support, this define will be made for "small file" support. */
//C     #ifndef _FILE_OFFSET_BITS
//C     #define _FILE_OFFSET_BITS 0 /** to prevent warnings in the check below */
//C     #define UNDEF_FILE_OFFSET_BITS
//C     #endif
//C     #ifndef FILESIZEBITS
//C     #define FILESIZEBITS 0 /** to prevent warnings in the check below */
//C     #define UNDEF_FILESIZEBITS
//C     #endif

//C     #if defined(_LARGE_FILES) || (_FILE_OFFSET_BITS > 32) || (FILESIZEBITS > 32)    || defined(_LARGEFILE_SOURCE) || defined(_LARGEFILE64_SOURCE)
  /** For now, we assume at least one of these to be set for large files to
     work! */
//C     #define CURL_FORMAT_OFF_T "%lld"
//C     #else /** LARGE_FILE support */
//C     #define CURL_FORMAT_OFF_T "%ld"
//C     #endif
//C     #endif /** GCC or Watcom on Windows */
//C     #endif /** (_MSC_VER && !__POCC__) || (__LCC__ && WIN32) */

//C     #ifdef UNDEF_FILE_OFFSET_BITS
/** this was defined above for our checks, undefine it again */
//C     #undef _FILE_OFFSET_BITS
//C     #endif

//C     #ifdef UNDEF_FILESIZEBITS
/** this was defined above for our checks, undefine it again */
//C     #undef FILESIZEBITS
//C     #endif

//C     #if defined(_WIN32) && !defined(WIN32)
/** Chris Lewis mentioned that he doesn't get WIN32 defined, only _WIN32 so we
   make this adjustment to catch this. */
//C     #define WIN32 1
//C     #endif

//C     #if defined(WIN32) && !defined(_WIN32_WCE) && !defined(__GNUC__) &&   !defined(__CYGWIN__) || defined(__MINGW32__)
//C     #if !(defined(_WINSOCKAPI_) || defined(_WINSOCK_H))
/** The check above prevents the winsock2 inclusion if winsock.h already was
   included, since they can't co-exist without problems */
//C     #include <winsock2.h>
//import std.c.winsock2;
//C     #endif
//C     #else

/** HP-UX systems version 9, 10 and 11 lack sys/select.h and so does oldish
   libc5-based Linux systems. Only include it on system that are known to
   require it! */
//C     #if defined(_AIX) || defined(NETWARE) || defined(__NetBSD__) || defined(__minix)
//C     #include <sys/select.h>
//C     #endif

//C     #ifndef _WIN32_WCE
//C     #include <sys/socket.h>
//C     #endif
//C     #ifndef __WATCOMC__
//C     #include <sys/time.h>
//C     #endif
//C     #include <sys/types.h>
//C     #endif

//C     #ifndef curl_socket_typedef
/** socket typedef */
//C     #ifdef WIN32
//C     typedef SOCKET curl_socket_t;
alias SOCKET curl_socket_t;
alias ulong time_t;
alias INVALID_SOCKET CURL_SOCKET_BAD;

//C     #define CURL_SOCKET_BAD INVALID_SOCKET
//C     #else
//alias INVALID_SOCKET CURL_SOCKET_BAD;
//C     typedef int curl_socket_t;
//C     #define CURL_SOCKET_BAD -1
//C     #endif
//C     #define curl_socket_typedef
//C     #endif /** curl_socket_typedef */

//C     struct curl_httppost {
//C       struct curl_httppost *next;       /** next entry in the list */
//C       char *name;                       /** pointer to allocated name */
//C       long namelength;                  /** length of name length */
//C       char *contents;                   /** pointer to allocated data contents */
//C       long contentslength;              /** length of contents field */
//C       char *buffer;                     /** pointer to allocated buffer contents */
//C       long bufferlength;                /** length of buffer field */
//C       char *contenttype;                /** Content-Type */
//C       struct curl_slist* contentheader; /** list of extra headers for this form */
//C       struct curl_httppost *more;       
/** if one field name has more than one
                                       file, this link should link to following
                                       files */
//C       long flags;                       /** as defined below */
//C     #define HTTPPOST_FILENAME (1<<0)    /** specified content is a file name */
//C     #define HTTPPOST_READFILE (1<<1)    /** specified content is a file name */
//C     #define HTTPPOST_PTRNAME (1<<2)     
/** name is only stored pointer
                                       do not free in formfree */
//C     #define HTTPPOST_PTRCONTENTS (1<<3) 
/** contents is only stored pointer
                                       do not free in formfree */
//C     #define HTTPPOST_BUFFER (1<<4)      /** upload file from buffer */
//C     #define HTTPPOST_PTRBUFFER (1<<5)   /** upload file from pointer contents */

//C       char *showfilename;               
/** The file name to show. If not set, the
                                       actual file name will be used (if this
                                       is a file part) */
//C     };


//C       long flags;                       /** as defined below */
//C     #define HTTPPOST_FILENAME 1    /** specified content is a file name */
//C     #define HTTPPOST_READFILE 2    /** specified content is a file name */
const HTTPPOST_FILENAME = 1;
//C     #define HTTPPOST_PTRNAME 4     /** name is only stored pointer do not free in formfree */
const HTTPPOST_READFILE = 2;
//C     #define HTTPPOST_PTRCONTENTS 8 /** contents is only stored pointer do not free in formfree */
const HTTPPOST_PTRNAME = 4;
//C     #define HTTPPOST_BUFFER 16      /** upload file from buffer */
const HTTPPOST_PTRCONTENTS = 8;
//C     #define HTTPPOST_PTRBUFFER 32   /** upload file from pointer contents */
const HTTPPOST_BUFFER = 16;

const HTTPPOST_PTRBUFFER = 32;




struct curl_httppost
{
    curl_httppost *next;
    char *name;
    int namelength;
    char *contents;
    int contentslength;
    char *buffer;
    int bufferlength;
    char *contenttype;
    curl_slist *contentheader;
    curl_httppost *more;
    int flags;
    char *showfilename;
}

//C     typedef int (*curl_progress_callback)(void *clientp,
//C                                           double dltotal,
//C                                           double dlnow,
//C                                           double ultotal,
//C                                           double ulnow);
alias int  function(void *clientp, double dltotal, double dlnow, double ultotal, double ulnow)curl_progress_callback;

  /** Tests have proven that 20K is a very bad buffer size for uploads on
     Windows, while 16K for some odd reason performed a lot better. */
//C     #define CURL_MAX_WRITE_SIZE 16384

const CURL_MAX_WRITE_SIZE = 16384;
//C     typedef size_t (*curl_write_callback)(char *buffer,
//C                                           size_t size,
//C                                           size_t nitems,
//C                                           void *outstream);
alias size_t  function(char *buffer, size_t size, size_t nitems, void *outstream)curl_write_callback;

/** This is a return code for the read callback that, when returned, will
   signal libcurl to immediately abort the current transfer. */
//C     #define CURL_READFUNC_ABORT 0x10000000
//C     typedef size_t (*curl_read_callback)(char *buffer,
const CURL_READFUNC_ABORT = 0x10000000;
//C                                           size_t size,
//C                                           size_t nitems,
//C                                           void *instream);
alias size_t  function(char *buffer, size_t size, size_t nitems, void *instream)curl_read_callback;

//C     typedef enum  {
//C       CURLSOCKTYPE_IPCXN, /** socket created for a specific IP connection */
//C       CURLSOCKTYPE_LAST   /** never use */
//C     } curlsocktype;
enum
{
    CURLSOCKTYPE_IPCXN,
    CURLSOCKTYPE_LAST,
}
alias int curlsocktype;

//C     typedef int (*curl_sockopt_callback)(void *clientp,
//C                                          curl_socket_t curlfd,
//C                                          curlsocktype purpose);
alias int  function(void *clientp, curl_socket_t curlfd, curlsocktype purpose)curl_sockopt_callback;

//C     #ifndef CURL_NO_OLDIES
  /** not used since 7.10.8, will be removed in a future release */
//C     typedef int (*curl_passwd_callback)(void *clientp,
//C                                         const char *prompt,
//C                                         char *buffer,
//C                                         int buflen);
alias int  function(void *clientp, char *prompt, char *buffer, int buflen)curl_passwd_callback;
//C     #endif

//C     typedef enum {
//C       CURLIOE_OK,            /** I/O operation successful */
//C       CURLIOE_UNKNOWNCMD,    /** command was unknown to callback */
//C       CURLIOE_FAILRESTART,   /** failed to restart the read */
//C       CURLIOE_LAST           /** never use */
//C     } curlioerr;
enum
{
    CURLIOE_OK,
    CURLIOE_UNKNOWNCMD,
    CURLIOE_FAILRESTART,
    CURLIOE_LAST,
}
alias int curlioerr;

//C     typedef enum  {
//C       CURLIOCMD_NOP,         /** no operation */
//C       CURLIOCMD_RESTARTREAD, /** restart the read stream from start */
//C       CURLIOCMD_LAST         /** never use */
//C     } curliocmd;
enum
{
    CURLIOCMD_NOP,
    CURLIOCMD_RESTARTREAD,
    CURLIOCMD_LAST,
}
alias int curliocmd;

//C     typedef curlioerr (*curl_ioctl_callback)(CURL *handle,
//C                                              int cmd,
//C                                              void *clientp);
alias curlioerr  function(CURL *handle, int cmd, void *clientp)curl_ioctl_callback;

/**
 * The following typedef's are signatures of malloc, free, realloc, strdup and
 * calloc respectively.  Function pointers of these types can be passed to the
 * curl_global_init_mem() function to set user defined memory management
 * callback routines.
 */
//C     typedef void *(*curl_malloc_callback)(size_t size);
alias void * function(size_t size)curl_malloc_callback;
//C     typedef void (*curl_free_callback)(void *ptr);
alias void  function(void *ptr)curl_free_callback;
//C     typedef void *(*curl_realloc_callback)(void *ptr, size_t size);
alias void * function(void *ptr, size_t size)curl_realloc_callback;
//C     typedef char *(*curl_strdup_callback)(const char *str);
alias char * function(char *str)curl_strdup_callback;
//C     typedef void *(*curl_calloc_callback)(size_t nmemb, size_t size);
alias void * function(size_t nmemb, size_t size)curl_calloc_callback;

/** the kind of data that is passed to information_callback*/
//C     typedef enum {
//C       CURLINFO_TEXT = 0,
//C       CURLINFO_HEADER_IN,    /** 1 */
//C       CURLINFO_HEADER_OUT,   /** 2 */
//C       CURLINFO_DATA_IN,      /** 3 */
//C       CURLINFO_DATA_OUT,     /** 4 */
//C       CURLINFO_SSL_DATA_IN,  /** 5 */
//C       CURLINFO_SSL_DATA_OUT, /** 6 */
//C       CURLINFO_END
//C     } curl_infotype;
enum
{
    CURLINFO_TEXT,
    CURLINFO_HEADER_IN,
    CURLINFO_HEADER_OUT,
    CURLINFO_DATA_IN,
    CURLINFO_DATA_OUT,
    CURLINFO_SSL_DATA_IN,
    CURLINFO_SSL_DATA_OUT,
    CURLINFO_END,
}
alias int curl_infotype;

//C     typedef int (*curl_debug_callback)
//C            (CURL *handle,      /** the handle/transfer this concerns */
//C             curl_infotype type, /** what kind of data */
//C             char *data,        /** points to the data */
//C             size_t size,       /** size of the data pointed to */
//C             void *userptr);    /** whatever the user please */
alias int  function(CURL *handle, curl_infotype type, char *data, size_t size, void *userptr)curl_debug_callback;

/** All possible error codes from all sorts of curl functions. Future versions
   may return other values, stay prepared.

   Always add new return codes last. Never *EVER* remove any. The return
   codes must remain the same!
 */

//C     typedef enum {
//C       CURLE_OK = 0,
//C       CURLE_UNSUPPORTED_PROTOCOL,    /** 1 */
//C       CURLE_FAILED_INIT,             /** 2 */
//C       CURLE_URL_MALFORMAT,           /** 3 */
//C       CURLE_URL_MALFORMAT_USER,      /** 4 - NOT USED */
//C       CURLE_COULDNT_RESOLVE_PROXY,   /** 5 */
//C       CURLE_COULDNT_RESOLVE_HOST,    /** 6 */
//C       CURLE_COULDNT_CONNECT,         /** 7 */
//C       CURLE_FTP_WEIRD_SERVER_REPLY,  /** 8 */
//C       CURLE_FTP_ACCESS_DENIED,       
/** 9 a service was denied by the FTP server
                                    due to lack of access - when login fails
                                    this is not returned. */
//C       CURLE_FTP_USER_PASSWORD_INCORRECT, /** 10 - NOT USED */
//C       CURLE_FTP_WEIRD_PASS_REPLY,    /** 11 */
//C       CURLE_FTP_WEIRD_USER_REPLY,    /** 12 */
//C       CURLE_FTP_WEIRD_PASV_REPLY,    /** 13 */
//C       CURLE_FTP_WEIRD_227_FORMAT,    /** 14 */
//C       CURLE_FTP_CANT_GET_HOST,       /** 15 */
//C       CURLE_FTP_CANT_RECONNECT,      /** 16 */
//C       CURLE_FTP_COULDNT_SET_BINARY,  /** 17 */
//C       CURLE_PARTIAL_FILE,            /** 18 */
//C       CURLE_FTP_COULDNT_RETR_FILE,   /** 19 */
//C       CURLE_FTP_WRITE_ERROR,         /** 20 */
//C       CURLE_FTP_QUOTE_ERROR,         /** 21 */
//C       CURLE_HTTP_RETURNED_ERROR,     /** 22 */
//C       CURLE_WRITE_ERROR,             /** 23 */
//C       CURLE_MALFORMAT_USER,          /** 24 - NOT USED */
//C       CURLE_FTP_COULDNT_STOR_FILE,   /** 25 - failed FTP upload */
//C       CURLE_READ_ERROR,              /** 26 - could open/read from file */
//C       CURLE_OUT_OF_MEMORY,           /** 27 */
  /** Note: CURLE_OUT_OF_MEMORY may sometimes indicate a conversion error
           instead of a memory allocation error if CURL_DOES_CONVERSIONS
           is defined
  */
//C       CURLE_OPERATION_TIMEOUTED,     /** 28 - the timeout time was reached */
//C       CURLE_FTP_COULDNT_SET_ASCII,   /** 29 - TYPE A failed */
//C       CURLE_FTP_PORT_FAILED,         /** 30 - FTP PORT operation failed */
//C       CURLE_FTP_COULDNT_USE_REST,    /** 31 - the REST command failed */
//C       CURLE_FTP_COULDNT_GET_SIZE,    /** 32 - the SIZE command failed */
//C       CURLE_HTTP_RANGE_ERROR,        /** 33 - RANGE "command" didn't work */
//C       CURLE_HTTP_POST_ERROR,         /** 34 */
//C       CURLE_SSL_CONNECT_ERROR,       /** 35 - wrong when connecting with SSL */
//C       CURLE_BAD_DOWNLOAD_RESUME,     /** 36 - couldn't resume download */
//C       CURLE_FILE_COULDNT_READ_FILE,  /** 37 */
//C       CURLE_LDAP_CANNOT_BIND,        /** 38 */
//C       CURLE_LDAP_SEARCH_FAILED,      /** 39 */
//C       CURLE_LIBRARY_NOT_FOUND,       /** 40 */
//C       CURLE_FUNCTION_NOT_FOUND,      /** 41 */
//C       CURLE_ABORTED_BY_CALLBACK,     /** 42 */
//C       CURLE_BAD_FUNCTION_ARGUMENT,   /** 43 */
//C       CURLE_BAD_CALLING_ORDER,       /** 44 - NOT USED */
//C       CURLE_INTERFACE_FAILED,        /** 45 - CURLOPT_INTERFACE failed */
//C       CURLE_BAD_PASSWORD_ENTERED,    /** 46 - NOT USED */
//C       CURLE_TOO_MANY_REDIRECTS ,     /** 47 - catch endless re-direct loops */
//C       CURLE_UNKNOWN_TELNET_OPTION,   /** 48 - User specified an unknown option */
//C       CURLE_TELNET_OPTION_SYNTAX ,   /** 49 - Malformed telnet option */
//C       CURLE_OBSOLETE,                /** 50 - NOT USED */
//C       CURLE_SSL_PEER_CERTIFICATE,    /** 51 - peer's certificate wasn't ok */
//C       CURLE_GOT_NOTHING,             /** 52 - when this is a specific error */
//C       CURLE_SSL_ENGINE_NOTFOUND,     /** 53 - SSL crypto engine not found */
//C       CURLE_SSL_ENGINE_SETFAILED,    
/** 54 - can not set SSL crypto engine as
                                    default */
//C       CURLE_SEND_ERROR,              /** 55 - failed sending network data */
//C       CURLE_RECV_ERROR,              /** 56 - failure in receiving network data */
//C       CURLE_SHARE_IN_USE,            /** 57 - share is in use */
//C       CURLE_SSL_CERTPROBLEM,         /** 58 - problem with the local certificate */
//C       CURLE_SSL_CIPHER,              /** 59 - couldn't use specified cipher */
//C       CURLE_SSL_CACERT,              /** 60 - problem with the CA cert (path?) */
//C       CURLE_BAD_CONTENT_ENCODING,    /** 61 - Unrecognized transfer encoding */
//C       CURLE_LDAP_INVALID_URL,        /** 62 - Invalid LDAP URL */
//C       CURLE_FILESIZE_EXCEEDED,       /** 63 - Maximum file size exceeded */
//C       CURLE_FTP_SSL_FAILED,          /** 64 - Requested FTP SSL level failed */
//C       CURLE_SEND_FAIL_REWIND,        
/** 65 - Sending the data requires a rewind
                                    that failed */
//C       CURLE_SSL_ENGINE_INITFAILED,   /** 66 - failed to initialise ENGINE */
//C       CURLE_LOGIN_DENIED,            
/** 67 - user, password or similar was not
                                    accepted and we failed to login */
//C       CURLE_TFTP_NOTFOUND,           /** 68 - file not found on server */
//C       CURLE_TFTP_PERM,               /** 69 - permission problem on server */
//C       CURLE_TFTP_DISKFULL,           /** 70 - out of disk space on server */
//C       CURLE_TFTP_ILLEGAL,            /** 71 - Illegal TFTP operation */
//C       CURLE_TFTP_UNKNOWNID,          /** 72 - Unknown transfer ID */
//C       CURLE_TFTP_EXISTS,             /** 73 - File already exists */
//C       CURLE_TFTP_NOSUCHUSER,         /** 74 - No such user */
//C       CURLE_CONV_FAILED,             /** 75 - conversion failed */
//C       CURLE_CONV_REQD,               
/** 76 - caller must register conversion
                                    callbacks using curl_easy_setopt options
                                    CURLOPT_CONV_FROM_NETWORK_FUNCTION,
                                    CURLOPT_CONV_TO_NETWORK_FUNCTION, and
                                    CURLOPT_CONV_FROM_UTF8_FUNCTION */
//C       CURLE_SSL_CACERT_BADFILE,      
/** 77 - could not load CACERT file, missing
                                    or wrong format */
//C       CURL_LAST /** never use! */
//C     } CURLcode;
enum
{
    CURLE_OK,
    CURLE_UNSUPPORTED_PROTOCOL,
    CURLE_FAILED_INIT,
    CURLE_URL_MALFORMAT,
    CURLE_URL_MALFORMAT_USER,
    CURLE_COULDNT_RESOLVE_PROXY,
    CURLE_COULDNT_RESOLVE_HOST,
    CURLE_COULDNT_CONNECT,
    CURLE_FTP_WEIRD_SERVER_REPLY,
    CURLE_FTP_ACCESS_DENIED,
    CURLE_FTP_USER_PASSWORD_INCORRECT,
    CURLE_FTP_WEIRD_PASS_REPLY,
    CURLE_FTP_WEIRD_USER_REPLY,
    CURLE_FTP_WEIRD_PASV_REPLY,
    CURLE_FTP_WEIRD_227_FORMAT,
    CURLE_FTP_CANT_GET_HOST,
    CURLE_FTP_CANT_RECONNECT,
    CURLE_FTP_COULDNT_SET_BINARY,
    CURLE_PARTIAL_FILE,
    CURLE_FTP_COULDNT_RETR_FILE,
    CURLE_FTP_WRITE_ERROR,
    CURLE_FTP_QUOTE_ERROR,
    CURLE_HTTP_RETURNED_ERROR,
    CURLE_WRITE_ERROR,
    CURLE_MALFORMAT_USER,
    CURLE_FTP_COULDNT_STOR_FILE,
    CURLE_READ_ERROR,
    CURLE_OUT_OF_MEMORY,
    CURLE_OPERATION_TIMEOUTED,
    CURLE_FTP_COULDNT_SET_ASCII,
    CURLE_FTP_PORT_FAILED,
    CURLE_FTP_COULDNT_USE_REST,
    CURLE_FTP_COULDNT_GET_SIZE,
    CURLE_HTTP_RANGE_ERROR,
    CURLE_HTTP_POST_ERROR,
    CURLE_SSL_CONNECT_ERROR,
    CURLE_BAD_DOWNLOAD_RESUME,
    CURLE_FILE_COULDNT_READ_FILE,
    CURLE_LDAP_CANNOT_BIND,
    CURLE_LDAP_SEARCH_FAILED,
    CURLE_LIBRARY_NOT_FOUND,
    CURLE_FUNCTION_NOT_FOUND,
    CURLE_ABORTED_BY_CALLBACK,
    CURLE_BAD_FUNCTION_ARGUMENT,
    CURLE_BAD_CALLING_ORDER,
    CURLE_INTERFACE_FAILED,
    CURLE_BAD_PASSWORD_ENTERED,
    CURLE_TOO_MANY_REDIRECTS,
    CURLE_UNKNOWN_TELNET_OPTION,
    CURLE_TELNET_OPTION_SYNTAX,
    CURLE_OBSOLETE,
    CURLE_SSL_PEER_CERTIFICATE,
    CURLE_GOT_NOTHING,
    CURLE_SSL_ENGINE_NOTFOUND,
    CURLE_SSL_ENGINE_SETFAILED,
    CURLE_SEND_ERROR,
    CURLE_RECV_ERROR,
    CURLE_SHARE_IN_USE,
    CURLE_SSL_CERTPROBLEM,
    CURLE_SSL_CIPHER,
    CURLE_SSL_CACERT,
    CURLE_BAD_CONTENT_ENCODING,
    CURLE_LDAP_INVALID_URL,
    CURLE_FILESIZE_EXCEEDED,
    CURLE_FTP_SSL_FAILED,
    CURLE_SEND_FAIL_REWIND,
    CURLE_SSL_ENGINE_INITFAILED,
    CURLE_LOGIN_DENIED,
    CURLE_TFTP_NOTFOUND,
    CURLE_TFTP_PERM,
    CURLE_TFTP_DISKFULL,
    CURLE_TFTP_ILLEGAL,
    CURLE_TFTP_UNKNOWNID,
    CURLE_TFTP_EXISTS,
    CURLE_TFTP_NOSUCHUSER,
    CURLE_CONV_FAILED,
    CURLE_CONV_REQD,
    CURLE_SSL_CACERT_BADFILE,
    CURL_LAST,
}
alias int CURLcode;

/** This prototype applies to all conversion callbacks */
//C     typedef CURLcode (*curl_conv_callback)(char *buffer, size_t length);
alias CURLcode  function(char *buffer, size_t length)curl_conv_callback;

//C     typedef CURLcode (*curl_ssl_ctx_callback)(CURL *curl,    /** easy handle */
//C                                               void *ssl_ctx, 
/** actually an
                                                            OpenSSL SSL_CTX */
//C                                               void *userptr);
alias CURLcode  function(CURL *curl, void *ssl_ctx, void *userptr)curl_ssl_ctx_callback;

/** Make a spelling correction for the operation timed-out define */
//C     #define CURLE_OPERATION_TIMEDOUT CURLE_OPERATION_TIMEOUTED

alias CURLE_OPERATION_TIMEOUTED CURLE_OPERATION_TIMEDOUT;
//C     #ifndef CURL_NO_OLDIES 
/** define this to test if your app builds with all
                          the obsolete stuff removed! */
/** backwards compatibility with older names */
//C     #define CURLE_HTTP_NOT_FOUND CURLE_HTTP_RETURNED_ERROR
//C     #define CURLE_HTTP_PORT_FAILED CURLE_INTERFACE_FAILED
alias CURLE_HTTP_RETURNED_ERROR CURLE_HTTP_NOT_FOUND;
//C     #endif
alias CURLE_INTERFACE_FAILED CURLE_HTTP_PORT_FAILED;

//C     typedef enum {
//C       CURLPROXY_HTTP = 0,
//C       CURLPROXY_SOCKS4 = 4,
//C       CURLPROXY_SOCKS5 = 5
//C     } curl_proxytype;
enum
{
    CURLPROXY_HTTP,
    CURLPROXY_SOCKS4 = 4,
    CURLPROXY_SOCKS5,
}
alias int curl_proxytype;

//C     #define CURLAUTH_NONE         0       /** nothing */
//C     #define CURLAUTH_BASIC        (1<<0)  /** Basic (default) */

//C     #define CURLAUTH_DIGEST       (1<<1)  /** Digest */
//C     #define CURLAUTH_GSSNEGOTIATE (1<<2)  /** GSS-Negotiate */
//C     #define CURLAUTH_NTLM         (1<<3)  /** NTLM */
//C     #define CURLAUTH_ANY ~0               /** all types set */
//C     #define CURLAUTH_ANYSAFE (~CURLAUTH_BASIC)

const CURLAUTH_NONE = 0;
const CURLAUTH_BASIC = 1;
const CURLAUTH_DIGEST = 2;
const CURLAUTH_GSSNEGOTIATE = 4;
const CURLAUTH_NTLM = 8;
const CURLAUTH_ANY = 15;
const CURLAUTH_ANYSAFE = 14;


//C     #ifndef CURL_NO_OLDIES 
/** define this to test if your app builds with all
                          the obsolete stuff removed! */
/** this was the error code 50 in 7.7.3 and a few earlier versions, this
   is no longer used by libcurl but is instead #defined here only to not
   make programs break */
//C     #define CURLE_ALREADY_COMPLETE 99999

const CURLE_ALREADY_COMPLETE = 99999;
/** These are just to make older programs not break: */
//C     #define CURLE_FTP_PARTIAL_FILE CURLE_PARTIAL_FILE
//C     #define CURLE_FTP_BAD_DOWNLOAD_RESUME CURLE_BAD_DOWNLOAD_RESUME
alias CURLE_PARTIAL_FILE CURLE_FTP_PARTIAL_FILE;
//C     #endif
alias CURLE_BAD_DOWNLOAD_RESUME CURLE_FTP_BAD_DOWNLOAD_RESUME;

//C     #define CURL_ERROR_SIZE 256

const CURL_ERROR_SIZE = 256;
/** parameter for the CURLOPT_FTP_SSL option */
//C     typedef enum {
//C       CURLFTPSSL_NONE,    /** do not attempt to use SSL */
//C       CURLFTPSSL_TRY,     /** try using SSL, proceed anyway otherwise */
//C       CURLFTPSSL_CONTROL, /** SSL for the control connection or fail */
//C       CURLFTPSSL_ALL,     /** SSL for all communication or fail */
//C       CURLFTPSSL_LAST     /** not an option, never use */
//C     } curl_ftpssl;
enum
{
    CURLFTPSSL_NONE,
    CURLFTPSSL_TRY,
    CURLFTPSSL_CONTROL,
    CURLFTPSSL_ALL,
    CURLFTPSSL_LAST,
}
alias int curl_ftpssl;

/** parameter for the CURLOPT_FTPSSLAUTH option */
//C     typedef enum {
//C       CURLFTPAUTH_DEFAULT, /** let libcurl decide */
//C       CURLFTPAUTH_SSL,     /** use "AUTH SSL" */
//C       CURLFTPAUTH_TLS,     /** use "AUTH TLS" */
//C       CURLFTPAUTH_LAST /** not an option, never use */
//C     } curl_ftpauth;
enum
{
    CURLFTPAUTH_DEFAULT,
    CURLFTPAUTH_SSL,
    CURLFTPAUTH_TLS,
    CURLFTPAUTH_LAST,
}
alias int curl_ftpauth;

/** parameter for the CURLOPT_FTP_FILEMETHOD option */
//C     typedef enum {
//C       CURLFTPMETHOD_DEFAULT,   /** let libcurl pick */
//C       CURLFTPMETHOD_MULTICWD,  /** single CWD operation for each path part */
//C       CURLFTPMETHOD_NOCWD,     /** no CWD at all */
//C       CURLFTPMETHOD_SINGLECWD, /** one CWD to full dir, then work on file */
//C       CURLFTPMETHOD_LAST       /** not an option, never use */
//C     } curl_ftpmethod;
enum
{
    CURLFTPMETHOD_DEFAULT,
    CURLFTPMETHOD_MULTICWD,
    CURLFTPMETHOD_NOCWD,
    CURLFTPMETHOD_SINGLECWD,
    CURLFTPMETHOD_LAST,
}
alias int curl_ftpmethod;

/** long may be 32 or 64 bits, but we should never depend on anything else
   but 32 */
//C     #define CURLOPTTYPE_LONG          0
//C     #define CURLOPTTYPE_OBJECTPOINT   10000
const CURLOPTTYPE_LONG = 0;
//C     #define CURLOPTTYPE_FUNCTIONPOINT 20000
const CURLOPTTYPE_OBJECTPOINT = 10000;
//C     #define CURLOPTTYPE_OFF_T         30000
const CURLOPTTYPE_FUNCTIONPOINT = 20000;

const CURLOPTTYPE_OFF_T = 30000;
/** name is uppercase CURLOPT_<name>,
   type is one of the defined CURLOPTTYPE_<type>
   number is unique identifier */
//C     #ifdef CINIT
//C     #undef CINIT
//C     #endif
/**
 * Figure out if we can use the ## operator, which is supported by ISO/ANSI C
 * and C++. Some compilers support it without setting __STDC__ or __cplusplus
 * so we need to carefully check for them too. We don't use configure-checks
 * for these since we want these headers to remain generic and working for all
 * platforms.
 */
//C     #if defined(__STDC__) || defined(_MSC_VER) || defined(__cplusplus) ||   defined(__HP_aCC) || defined(__BORLANDC__) || defined(__LCC__) ||   defined(__POCC__) || defined(__SALFORDC__) || defined(__HIGHC__)
  /** This compiler is believed to have an ISO compatible preprocessor */
//C     #define CURL_ISOCPP
//C     #else
  /** This compiler is believed NOT to have an ISO compatible preprocessor */
//C     #undef CURL_ISOCPP
//C     #endif

//C     #ifdef CURL_ISOCPP
//C     #define CINIT(name,type,number) CURLOPT_ ## name = CURLOPTTYPE_ ## type + number
//C     #else
/** The macro "##" is ISO C, we assume pre-ISO C doesn't support it. */
//C     #define LONG          CURLOPTTYPE_LONG
//C     #define OBJECTPOINT   CURLOPTTYPE_OBJECTPOINT
//C     #define FUNCTIONPOINT CURLOPTTYPE_FUNCTIONPOINT
//C     #define OFF_T         CURLOPTTYPE_OFF_T
//C     #define CINIT(name,type,number) CURLOPT_/***/name = type + number
//C     #endif

/**
 * This macro-mania below setups the CURLOPT_[what] enum, to be used with
 * curl_easy_setopt(). The first argument in the CINIT() macro is the [what]
 * word.
 */

//C     typedef enum {
  /** This is the FILE * or void * the regular output should be written to. */
//C       CINIT(FILE, OBJECTPOINT, 1),

  /** The full URL to get/put */
//C       CINIT(URL,  OBJECTPOINT, 2),

  /** Port number to connect to, if other than default. */
//C       CINIT(PORT, LONG, 3),

  /** Name of proxy to use. */
//C       CINIT(PROXY, OBJECTPOINT, 4),

  /** "name:password" to use when fetching. */
//C       CINIT(USERPWD, OBJECTPOINT, 5),

  /** "name:password" to use with proxy. */
//C       CINIT(PROXYUSERPWD, OBJECTPOINT, 6),

  /** Range to get, specified as an ASCII string. */
//C       CINIT(RANGE, OBJECTPOINT, 7),

  /** not used */

  /** Specified file stream to upload from (use as input): */
//C       CINIT(INFILE, OBJECTPOINT, 9),

  /** Buffer to receive error messages in, must be at least CURL_ERROR_SIZE
   * bytes big. If this is not used, error messages go to stderr instead: */
//C       CINIT(ERRORBUFFER, OBJECTPOINT, 10),

  /** Function that will be called to store the output (instead of fwrite). The
   * parameters will use fwrite() syntax, make sure to follow them. */
//C       CINIT(WRITEFUNCTION, FUNCTIONPOINT, 11),

  /** Function that will be called to read the input (instead of fread). The
   * parameters will use fread() syntax, make sure to follow them. */
//C       CINIT(READFUNCTION, FUNCTIONPOINT, 12),

  /** Time-out the read operation after this amount of seconds */
//C       CINIT(TIMEOUT, LONG, 13),

  /** If the CURLOPT_INFILE is used, this can be used to inform libcurl about
   * how large the file being sent really is. That allows better error
   * checking and better verifies that the upload was succcessful. -1 means
   * unknown size.
   *
   * For large file support, there is also a _LARGE version of the key
   * which takes an off_t type, allowing platforms with larger off_t
   * sizes to handle larger files.  See below for INFILESIZE_LARGE.
   */
//C       CINIT(INFILESIZE, LONG, 14),

  /** POST input fields. */
//C       CINIT(POSTFIELDS, OBJECTPOINT, 15),

  /** Set the referer page (needed by some CGIs) */
//C       CINIT(REFERER, OBJECTPOINT, 16),

  /** Set the FTP PORT string (interface name, named or numerical IP address)
     Use i.e '-' to use default address. */
//C       CINIT(FTPPORT, OBJECTPOINT, 17),

  /** Set the User-Agent string (examined by some CGIs) */
//C       CINIT(USERAGENT, OBJECTPOINT, 18),

  /** If the download receives less than "low speed limit" bytes/second
   * during "low speed time" seconds, the operations is aborted.
   * You could i.e if you have a pretty high speed connection, abort if
   * it is less than 2000 bytes/sec during 20 seconds.
   */

  /** Set the "low speed limit" */
//C       CINIT(LOW_SPEED_LIMIT, LONG , 19),

  /** Set the "low speed time" */
//C       CINIT(LOW_SPEED_TIME, LONG, 20),

  /** Set the continuation offset.
   *
   * Note there is also a _LARGE version of this key which uses
   * off_t types, allowing for large file offsets on platforms which
   * use larger-than-32-bit off_t's.  Look below for RESUME_FROM_LARGE.
   */
//C       CINIT(RESUME_FROM, LONG, 21),

  /** Set cookie in request: */
//C       CINIT(COOKIE, OBJECTPOINT, 22),

  /** This points to a linked list of headers, struct curl_slist kind */
//C       CINIT(HTTPHEADER, OBJECTPOINT, 23),

  /** This points to a linked list of post entries, struct HttpPost */
//C       CINIT(HTTPPOST, OBJECTPOINT, 24),

  /** name of the file keeping your private SSL-certificate */
//C       CINIT(SSLCERT, OBJECTPOINT, 25),

  /** password for the SSL-private key, keep this for compatibility */
//C       CINIT(SSLCERTPASSWD, OBJECTPOINT, 26),
  /** password for the SSL private key */
//C       CINIT(SSLKEYPASSWD, OBJECTPOINT, 26),

  /** send TYPE parameter? */
//C       CINIT(CRLF, LONG, 27),

  /** send linked-list of QUOTE commands */
//C       CINIT(QUOTE, OBJECTPOINT, 28),

  /** send FILE * or void * to store headers to, if you use a callback it
     is simply passed to the callback unmodified */
//C       CINIT(WRITEHEADER, OBJECTPOINT, 29),

  /** point to a file to read the initial cookies from, also enables
     "cookie awareness" */
//C       CINIT(COOKIEFILE, OBJECTPOINT, 31),

  /** What version to specifly try to use.
     See CURL_SSLVERSION defines below. */
//C       CINIT(SSLVERSION, LONG, 32),

  /** What kind of HTTP time condition to use, see defines */
//C       CINIT(TIMECONDITION, LONG, 33),

  /** Time to use with the above condition. Specified in number of seconds
     since 1 Jan 1970 */
//C       CINIT(TIMEVALUE, LONG, 34),

  /** 35 = OBSOLETE */

  /** Custom request, for customizing the get command like
     HTTP: DELETE, TRACE and others
     FTP: to use a different list command
     */
//C       CINIT(CUSTOMREQUEST, OBJECTPOINT, 36),

  /** HTTP request, for odd commands like DELETE, TRACE and others */
//C       CINIT(STDERR, OBJECTPOINT, 37),

  /** 38 is not used */

  /** send linked-list of post-transfer QUOTE commands */
//C       CINIT(POSTQUOTE, OBJECTPOINT, 39),

  /** Pass a pointer to string of the output using full variable-replacement
     as described elsewhere. */
//C       CINIT(WRITEINFO, OBJECTPOINT, 40),

//C       CINIT(VERBOSE, LONG, 41),      /** talk a lot */
//C       CINIT(HEADER, LONG, 42),       /** throw the header out too */
//C       CINIT(NOPROGRESS, LONG, 43),   /** shut off the progress meter */
//C       CINIT(NOBODY, LONG, 44),       /** use HEAD to get http document */
//C       CINIT(FAILONERROR, LONG, 45),  /** no output on http error codes >= 300 */
//C       CINIT(UPLOAD, LONG, 46),       /** this is an upload */
//C       CINIT(POST, LONG, 47),         /** HTTP POST method */
//C       CINIT(FTPLISTONLY, LONG, 48),  /** Use NLST when listing ftp dir */

//C       CINIT(FTPAPPEND, LONG, 50),    /** Append instead of overwrite on upload! */

  /** Specify whether to read the user+password from the .netrc or the URL.
   * This must be one of the CURL_NETRC_* enums below. */
//C       CINIT(NETRC, LONG, 51),

//C       CINIT(FOLLOWLOCATION, LONG, 52),  /** use Location: Luke! */

//C       CINIT(TRANSFERTEXT, LONG, 53), /** transfer data in text/ASCII format */
//C       CINIT(PUT, LONG, 54),          /** HTTP PUT */

  /** 55 = OBSOLETE */

  /** Function that will be called instead of the internal progress display
   * function. This function should be defined as the curl_progress_callback
   * prototype defines. */
//C       CINIT(PROGRESSFUNCTION, FUNCTIONPOINT, 56),

  /** Data passed to the progress callback */
//C       CINIT(PROGRESSDATA, OBJECTPOINT, 57),

  /** We want the referer field set automatically when following locations */
//C       CINIT(AUTOREFERER, LONG, 58),

  /** Port of the proxy, can be set in the proxy string as well with:
     "[host]:[port]" */
//C       CINIT(PROXYPORT, LONG, 59),

  /** size of the POST input data, if strlen() is not good to use */
//C       CINIT(POSTFIELDSIZE, LONG, 60),

  /** tunnel non-http operations through a HTTP proxy */
//C       CINIT(HTTPPROXYTUNNEL, LONG, 61),

  /** Set the interface string to use as outgoing network interface */
//C       CINIT(INTERFACE, OBJECTPOINT, 62),

  /** Set the krb4 security level, this also enables krb4 awareness.  This is a
   * string, 'clear', 'safe', 'confidential' or 'private'.  If the string is
   * set but doesn't match one of these, 'private' will be used.  */
//C       CINIT(KRB4LEVEL, OBJECTPOINT, 63),

  /** Set if we should verify the peer in ssl handshake, set 1 to verify. */
//C       CINIT(SSL_VERIFYPEER, LONG, 64),

  /** The CApath or CAfile used to validate the peer certificate
     this option is used only if SSL_VERIFYPEER is true */
//C       CINIT(CAINFO, OBJECTPOINT, 65),

  /** 66 = OBSOLETE */
  /** 67 = OBSOLETE */

  /** Maximum number of http redirects to follow */
//C       CINIT(MAXREDIRS, LONG, 68),

  /** Pass a long set to 1 to get the date of the requested document (if
     possible)! Pass a zero to shut it off. */
//C       CINIT(FILETIME, LONG, 69),

  /** This points to a linked list of telnet options */
//C       CINIT(TELNETOPTIONS, OBJECTPOINT, 70),

  /** Max amount of cached alive connections */
//C       CINIT(MAXCONNECTS, LONG, 71),

  /** What policy to use when closing connections when the cache is filled
     up */
//C       CINIT(CLOSEPOLICY, LONG, 72),

  /** 73 = OBSOLETE */

  /** Set to explicitly use a new connection for the upcoming transfer.
     Do not use this unless you're absolutely sure of this, as it makes the
     operation slower and is less friendly for the network. */
//C       CINIT(FRESH_CONNECT, LONG, 74),

  /** Set to explicitly forbid the upcoming transfer's connection to be re-used
     when done. Do not use this unless you're absolutely sure of this, as it
     makes the operation slower and is less friendly for the network. */
//C       CINIT(FORBID_REUSE, LONG, 75),

  /** Set to a file name that contains random data for libcurl to use to
     seed the random engine when doing SSL connects. */
//C       CINIT(RANDOM_FILE, OBJECTPOINT, 76),

  /** Set to the Entropy Gathering Daemon socket pathname */
//C       CINIT(EGDSOCKET, OBJECTPOINT, 77),

  /** Time-out connect operations after this amount of seconds, if connects
     are OK within this time, then fine... This only aborts the connect
     phase. [Only works on unix-style/SIGALRM operating systems] */
//C       CINIT(CONNECTTIMEOUT, LONG, 78),

  /** Function that will be called to store headers (instead of fwrite). The
   * parameters will use fwrite() syntax, make sure to follow them. */
//C       CINIT(HEADERFUNCTION, FUNCTIONPOINT, 79),

  /** Set this to force the HTTP request to get back to GET. Only really usable
     if POST, PUT or a custom request have been used first.
   */
//C       CINIT(HTTPGET, LONG, 80),

  /** Set if we should verify the Common name from the peer certificate in ssl
   * handshake, set 1 to check existence, 2 to ensure that it matches the
   * provided hostname. */
//C       CINIT(SSL_VERIFYHOST, LONG, 81),

  /** Specify which file name to write all known cookies in after completed
     operation. Set file name to "-" (dash) to make it go to stdout. */
//C       CINIT(COOKIEJAR, OBJECTPOINT, 82),

  /** Specify which SSL ciphers to use */
//C       CINIT(SSL_CIPHER_LIST, OBJECTPOINT, 83),

  /** Specify which HTTP version to use! This must be set to one of the
     CURL_HTTP_VERSION* enums set below. */
//C       CINIT(HTTP_VERSION, LONG, 84),

  /** Specificly switch on or off the FTP engine's use of the EPSV command. By
     default, that one will always be attempted before the more traditional
     PASV command. */
//C       CINIT(FTP_USE_EPSV, LONG, 85),

  /** type of the file keeping your SSL-certificate ("DER", "PEM", "ENG") */
//C       CINIT(SSLCERTTYPE, OBJECTPOINT, 86),

  /** name of the file keeping your private SSL-key */
//C       CINIT(SSLKEY, OBJECTPOINT, 87),

  /** type of the file keeping your private SSL-key ("DER", "PEM", "ENG") */
//C       CINIT(SSLKEYTYPE, OBJECTPOINT, 88),

  /** crypto engine for the SSL-sub system */
//C       CINIT(SSLENGINE, OBJECTPOINT, 89),

  /** set the crypto engine for the SSL-sub system as default
     the param has no meaning...
   */
//C       CINIT(SSLENGINE_DEFAULT, LONG, 90),

  /** Non-zero value means to use the global dns cache */
//C       CINIT(DNS_USE_GLOBAL_CACHE, LONG, 91), /** To becomeO BSOLETE soon */

  /** DNS cache timeout */
//C       CINIT(DNS_CACHE_TIMEOUT, LONG, 92),

  /** send linked-list of pre-transfer QUOTE commands (Wesley Laxton)*/
//C       CINIT(PREQUOTE, OBJECTPOINT, 93),

  /** set the debug function */
//C       CINIT(DEBUGFUNCTION, FUNCTIONPOINT, 94),

  /** set the data for the debug function */
//C       CINIT(DEBUGDATA, OBJECTPOINT, 95),

  /** mark this as start of a cookie session */
//C       CINIT(COOKIESESSION, LONG, 96),

  /** The CApath directory used to validate the peer certificate
     this option is used only if SSL_VERIFYPEER is true */
//C       CINIT(CAPATH, OBJECTPOINT, 97),

  /** Instruct libcurl to use a smaller receive buffer */
//C       CINIT(BUFFERSIZE, LONG, 98),

  /** Instruct libcurl to not use any signal/alarm handlers, even when using
     timeouts. This option is useful for multi-threaded applications.
     See libcurl-the-guide for more background information. */
//C       CINIT(NOSIGNAL, LONG, 99),

  /** Provide a CURLShare for mutexing non-ts data */
//C       CINIT(SHARE, OBJECTPOINT, 100),

  /** indicates type of proxy. accepted values are CURLPROXY_HTTP (default),
     CURLPROXY_SOCKS4 and CURLPROXY_SOCKS5. */
//C       CINIT(PROXYTYPE, LONG, 101),

  /** Set the Accept-Encoding string. Use this to tell a server you would like
     the response to be compressed. */
//C       CINIT(ENCODING, OBJECTPOINT, 102),

  /** Set pointer to private data */
//C       CINIT(PRIVATE, OBJECTPOINT, 103),

  /** Set aliases for HTTP 200 in the HTTP Response header */
//C       CINIT(HTTP200ALIASES, OBJECTPOINT, 104),

  /** Continue to send authentication (user+password) when following locations,
     even when hostname changed. This can potentionally send off the name
     and password to whatever host the server decides. */
//C       CINIT(UNRESTRICTED_AUTH, LONG, 105),

  /** Specificly switch on or off the FTP engine's use of the EPRT command ( it
     also disables the LPRT attempt). By default, those ones will always be
     attempted before the good old traditional PORT command. */
//C       CINIT(FTP_USE_EPRT, LONG, 106),

  /** Set this to a bitmask value to enable the particular authentications
     methods you like. Use this in combination with CURLOPT_USERPWD.
     Note that setting multiple bits may cause extra network round-trips. */
//C       CINIT(HTTPAUTH, LONG, 107),

  /** Set the ssl context callback function, currently only for OpenSSL ssl_ctx
     in second argument. The function must be matching the
     curl_ssl_ctx_callback proto. */
//C       CINIT(SSL_CTX_FUNCTION, FUNCTIONPOINT, 108),

  /** Set the userdata for the ssl context callback function's third
     argument */
//C       CINIT(SSL_CTX_DATA, OBJECTPOINT, 109),

  /** FTP Option that causes missing dirs to be created on the remote server */
//C       CINIT(FTP_CREATE_MISSING_DIRS, LONG, 110),

  /** Set this to a bitmask value to enable the particular authentications
     methods you like. Use this in combination with CURLOPT_PROXYUSERPWD.
     Note that setting multiple bits may cause extra network round-trips. */
//C       CINIT(PROXYAUTH, LONG, 111),

  /** FTP option that changes the timeout, in seconds, associated with
     getting a response.  This is different from transfer timeout time and
     essentially places a demand on the FTP server to acknowledge commands
     in a timely manner. */
//C       CINIT(FTP_RESPONSE_TIMEOUT, LONG , 112),

  /** Set this option to one of the CURL_IPRESOLVE_* defines (see below) to
     tell libcurl to resolve names to those IP versions only. This only has
     affect on systems with support for more than one, i.e IPv4 _and_ IPv6. */
//C       CINIT(IPRESOLVE, LONG, 113),

  /** Set this option to limit the size of a file that will be downloaded from
     an HTTP or FTP server.

     Note there is also _LARGE version which adds large file support for
     platforms which have larger off_t sizes.  See MAXFILESIZE_LARGE below. */
//C       CINIT(MAXFILESIZE, LONG, 114),

  /** See the comment for INFILESIZE above, but in short, specifies
   * the size of the file being uploaded.  -1 means unknown.
   */
//C       CINIT(INFILESIZE_LARGE, OFF_T, 115),

  /** Sets the continuation offset.  There is also a LONG version of this;
   * look above for RESUME_FROM.
   */
//C       CINIT(RESUME_FROM_LARGE, OFF_T, 116),

  /** Sets the maximum size of data that will be downloaded from
   * an HTTP or FTP server.  See MAXFILESIZE above for the LONG version.
   */
//C       CINIT(MAXFILESIZE_LARGE, OFF_T, 117),

  /** Set this option to the file name of your .netrc file you want libcurl
     to parse (using the CURLOPT_NETRC option). If not set, libcurl will do
     a poor attempt to find the user's home directory and check for a .netrc
     file in there. */
//C       CINIT(NETRC_FILE, OBJECTPOINT, 118),

  /** Enable SSL/TLS for FTP, pick one of:
     CURLFTPSSL_TRY     - try using SSL, proceed anyway otherwise
     CURLFTPSSL_CONTROL - SSL for the control connection or fail
     CURLFTPSSL_ALL     - SSL for all communication or fail
  */
//C       CINIT(FTP_SSL, LONG, 119),

  /** The _LARGE version of the standard POSTFIELDSIZE option */
//C       CINIT(POSTFIELDSIZE_LARGE, OFF_T, 120),

  /** Enable/disable the TCP Nagle algorithm */
//C       CINIT(TCP_NODELAY, LONG, 121),

  /** 122 OBSOLETE, used in 7.12.3. Gone in 7.13.0 */
  /** 123 OBSOLETE. Gone in 7.16.0 */
  /** 124 OBSOLETE, used in 7.12.3. Gone in 7.13.0 */
  /** 125 OBSOLETE, used in 7.12.3. Gone in 7.13.0 */
  /** 126 OBSOLETE, used in 7.12.3. Gone in 7.13.0 */
  /** 127 OBSOLETE. Gone in 7.16.0 */
  /** 128 OBSOLETE. Gone in 7.16.0 */

  /** When FTP over SSL/TLS is selected (with CURLOPT_FTP_SSL), this option
     can be used to change libcurl's default action which is to first try
     "AUTH SSL" and then "AUTH TLS" in this order, and proceed when a OK
     response has been received.

     Available parameters are:
     CURLFTPAUTH_DEFAULT - let libcurl decide
     CURLFTPAUTH_SSL     - try "AUTH SSL" first, then TLS
     CURLFTPAUTH_TLS     - try "AUTH TLS" first, then SSL
  */
//C       CINIT(FTPSSLAUTH, LONG, 129),

//C       CINIT(IOCTLFUNCTION, FUNCTIONPOINT, 130),
//C       CINIT(IOCTLDATA, OBJECTPOINT, 131),

  /** 132 OBSOLETE. Gone in 7.16.0 */
  /** 133 OBSOLETE. Gone in 7.16.0 */

  /** zero terminated string for pass on to the FTP server when asked for
     "account" info */
//C       CINIT(FTP_ACCOUNT, OBJECTPOINT, 134),

  /** feed cookies into cookie engine */
//C       CINIT(COOKIELIST, OBJECTPOINT, 135),

  /** ignore Content-Length */
//C       CINIT(IGNORE_CONTENT_LENGTH, LONG, 136),

  /** Set to non-zero to skip the IP address received in a 227 PASV FTP server
     response. Typically used for FTP-SSL purposes but is not restricted to
     that. libcurl will then instead use the same IP address it used for the
     control connection. */
//C       CINIT(FTP_SKIP_PASV_IP, LONG, 137),

  /** Select "file method" to use when doing FTP, see the curl_ftpmethod
     above. */
//C       CINIT(FTP_FILEMETHOD, LONG, 138),

  /** Local port number to bind the socket to */
//C       CINIT(LOCALPORT, LONG, 139),

  /** Number of ports to try, including the first one set with LOCALPORT.
     Thus, setting it to 1 will make no additional attempts but the first.
  */
//C       CINIT(LOCALPORTRANGE, LONG, 140),

  /** no transfer, set up connection and let application use the socket by
     extracting it with CURLINFO_LASTSOCKET */
//C       CINIT(CONNECT_ONLY, LONG, 141),

  /** Function that will be called to convert from the
     network encoding (instead of using the iconv calls in libcurl) */
//C       CINIT(CONV_FROM_NETWORK_FUNCTION, FUNCTIONPOINT, 142),

  /** Function that will be called to convert to the
     network encoding (instead of using the iconv calls in libcurl) */
//C       CINIT(CONV_TO_NETWORK_FUNCTION, FUNCTIONPOINT, 143),

  /** Function that will be called to convert from UTF8
     (instead of using the iconv calls in libcurl)
     Note that this is used only for SSL certificate processing */
//C       CINIT(CONV_FROM_UTF8_FUNCTION, FUNCTIONPOINT, 144),

  /** if the connection proceeds too quickly then need to slow it down */
  /** limit-rate: maximum number of bytes per second to send or receive */
//C       CINIT(MAX_SEND_SPEED_LARGE, OFF_T, 145),
//C       CINIT(MAX_RECV_SPEED_LARGE, OFF_T, 146),

  /** Pointer to command string to send if USER/PASS fails. */
//C       CINIT(FTP_ALTERNATIVE_TO_USER, OBJECTPOINT, 147),

  /** callback function for setting socket options */
//C       CINIT(SOCKOPTFUNCTION, FUNCTIONPOINT, 148),
//C       CINIT(SOCKOPTDATA, OBJECTPOINT, 149),

  /** set to 0 to disable session ID re-use for this transfer, default is
     enabled (== 1) */
//C       CINIT(SSL_SESSIONID_CACHE, LONG, 150),

//C       CURLOPT_LASTENTRY /** the last unused */
//C     } CURLoption;
enum
{
    CURLOPT_FILE = 10001,
    CURLOPT_URL,
    CURLOPT_PORT = 3,
    CURLOPT_PROXY = 10004,
    CURLOPT_USERPWD,
    CURLOPT_PROXYUSERPWD,
    CURLOPT_RANGE,
    CURLOPT_INFILE = 10009,
    CURLOPT_ERRORBUFFER,
    CURLOPT_WRITEFUNCTION = 20011,
    CURLOPT_READFUNCTION,
    CURLOPT_TIMEOUT = 13,
    CURLOPT_INFILESIZE,
    CURLOPT_POSTFIELDS = 10015,
    CURLOPT_REFERER,
    CURLOPT_FTPPORT,
    CURLOPT_USERAGENT,
    CURLOPT_LOW_SPEED_LIMIT = 19,
    CURLOPT_LOW_SPEED_TIME,
    CURLOPT_RESUME_FROM,
    CURLOPT_COOKIE = 10022,
    CURLOPT_HTTPHEADER,
    CURLOPT_HTTPPOST,
    CURLOPT_SSLCERT,
    CURLOPT_SSLCERTPASSWD,
    CURLOPT_SSLKEYPASSWD = 10026,
    CURLOPT_CRLF = 27,
    CURLOPT_QUOTE = 10028,
    CURLOPT_WRITEHEADER,
    CURLOPT_COOKIEFILE = 10031,
    CURLOPT_SSLVERSION = 32,
    CURLOPT_TIMECONDITION,
    CURLOPT_TIMEVALUE,
    CURLOPT_CUSTOMREQUEST = 10036,
    CURLOPT_STDERR,
    CURLOPT_POSTQUOTE = 10039,
    CURLOPT_WRITEINFO,
    CURLOPT_VERBOSE = 41,
    CURLOPT_HEADER,
    CURLOPT_NOPROGRESS,
    CURLOPT_NOBODY,
    CURLOPT_FAILONERROR,
    CURLOPT_UPLOAD,
    CURLOPT_POST,
    CURLOPT_FTPLISTONLY,
    CURLOPT_FTPAPPEND = 50,
    CURLOPT_NETRC,
    CURLOPT_FOLLOWLOCATION,
    CURLOPT_TRANSFERTEXT,
    CURLOPT_PUT,
    CURLOPT_PROGRESSFUNCTION = 20056,
    CURLOPT_PROGRESSDATA = 10057,
    CURLOPT_AUTOREFERER = 58,
    CURLOPT_PROXYPORT,
    CURLOPT_POSTFIELDSIZE,
    CURLOPT_HTTPPROXYTUNNEL,
    CURLOPT_INTERFACE = 10062,
    CURLOPT_KRB4LEVEL,
    CURLOPT_SSL_VERIFYPEER = 64,
    CURLOPT_CAINFO = 10065,
    CURLOPT_MAXREDIRS = 68,
    CURLOPT_FILETIME,
    CURLOPT_TELNETOPTIONS = 10070,
    CURLOPT_MAXCONNECTS = 71,
    CURLOPT_CLOSEPOLICY,
    CURLOPT_FRESH_CONNECT = 74,
    CURLOPT_FORBID_REUSE,
    CURLOPT_RANDOM_FILE = 10076,
    CURLOPT_EGDSOCKET,
    CURLOPT_CONNECTTIMEOUT = 78,
    CURLOPT_HEADERFUNCTION = 20079,
    CURLOPT_HTTPGET = 80,
    CURLOPT_SSL_VERIFYHOST,
    CURLOPT_COOKIEJAR = 10082,
    CURLOPT_SSL_CIPHER_LIST,
    CURLOPT_HTTP_VERSION = 84,
    CURLOPT_FTP_USE_EPSV,
    CURLOPT_SSLCERTTYPE = 10086,
    CURLOPT_SSLKEY,
    CURLOPT_SSLKEYTYPE,
    CURLOPT_SSLENGINE,
    CURLOPT_SSLENGINE_DEFAULT = 90,
    CURLOPT_DNS_USE_GLOBAL_CACHE,
    CURLOPT_DNS_CACHE_TIMEOUT,
    CURLOPT_PREQUOTE = 10093,
    CURLOPT_DEBUGFUNCTION = 20094,
    CURLOPT_DEBUGDATA = 10095,
    CURLOPT_COOKIESESSION = 96,
    CURLOPT_CAPATH = 10097,
    CURLOPT_BUFFERSIZE = 98,
    CURLOPT_NOSIGNAL,
    CURLOPT_SHARE = 10100,
    CURLOPT_PROXYTYPE = 101,
    CURLOPT_ENCODING = 10102,
    CURLOPT_PRIVATE,
    CURLOPT_HTTP200ALIASES,
    CURLOPT_UNRESTRICTED_AUTH = 105,
    CURLOPT_FTP_USE_EPRT,
    CURLOPT_HTTPAUTH,
    CURLOPT_SSL_CTX_FUNCTION = 20108,
    CURLOPT_SSL_CTX_DATA = 10109,
    CURLOPT_FTP_CREATE_MISSING_DIRS = 110,
    CURLOPT_PROXYAUTH,
    CURLOPT_FTP_RESPONSE_TIMEOUT,
    CURLOPT_IPRESOLVE,
    CURLOPT_MAXFILESIZE,
    CURLOPT_INFILESIZE_LARGE = 30115,
    CURLOPT_RESUME_FROM_LARGE,
    CURLOPT_MAXFILESIZE_LARGE,
    CURLOPT_NETRC_FILE = 10118,
    CURLOPT_FTP_SSL = 119,
    CURLOPT_POSTFIELDSIZE_LARGE = 30120,
    CURLOPT_TCP_NODELAY = 121,
    CURLOPT_FTPSSLAUTH = 129,
    CURLOPT_IOCTLFUNCTION = 20130,
    CURLOPT_IOCTLDATA = 10131,
    CURLOPT_FTP_ACCOUNT = 10134,
    CURLOPT_COOKIELIST,
    CURLOPT_IGNORE_CONTENT_LENGTH = 136,
    CURLOPT_FTP_SKIP_PASV_IP,
    CURLOPT_FTP_FILEMETHOD,
    CURLOPT_LOCALPORT,
    CURLOPT_LOCALPORTRANGE,
    CURLOPT_CONNECT_ONLY,
    CURLOPT_CONV_FROM_NETWORK_FUNCTION = 20142,
    CURLOPT_CONV_TO_NETWORK_FUNCTION,
    CURLOPT_CONV_FROM_UTF8_FUNCTION,
    CURLOPT_MAX_SEND_SPEED_LARGE = 30145,
    CURLOPT_MAX_RECV_SPEED_LARGE,
    CURLOPT_FTP_ALTERNATIVE_TO_USER = 10147,
    CURLOPT_SOCKOPTFUNCTION = 20148,
    CURLOPT_SOCKOPTDATA = 10149,
    CURLOPT_SSL_SESSIONID_CACHE = 150,
    CURLOPT_LASTENTRY,
}
alias int CURLoption;

  /** Below here follows defines for the CURLOPT_IPRESOLVE option. If a host
     name resolves addresses using more than one IP protocol version, this
     option might be handy to force libcurl to use a specific IP version. */
//C     #define CURL_IPRESOLVE_WHATEVER 0 
/** default, resolves addresses to all IP
                                     versions that your system allows */
//C     #define CURL_IPRESOLVE_V4       1 /** resolve to ipv4 addresses */
const CURL_IPRESOLVE_WHATEVER = 0;
//C     #define CURL_IPRESOLVE_V6       2 /** resolve to ipv6 addresses */
const CURL_IPRESOLVE_V4 = 1;

const CURL_IPRESOLVE_V6 = 2;
  /** three convenient "aliases" that follow the name scheme better */
//C     #define CURLOPT_WRITEDATA CURLOPT_FILE
//C     #define CURLOPT_READDATA  CURLOPT_INFILE
alias CURLOPT_FILE CURLOPT_WRITEDATA;
//C     #define CURLOPT_HEADERDATA CURLOPT_WRITEHEADER
alias CURLOPT_INFILE CURLOPT_READDATA;

alias CURLOPT_WRITEHEADER CURLOPT_HEADERDATA;
//C     #ifndef CURL_NO_OLDIES 
/** define this to test if your app builds with all
                          the obsolete stuff removed! */
//C     #else
/** This is set if CURL_NO_OLDIES is defined at compile-time */
//C     #undef CURLOPT_DNS_USE_GLOBAL_CACHE /** soon obsolete */
//C     #endif


  /** These enums are for use with the CURLOPT_HTTP_VERSION option. */
//C     enum {
//C       CURL_HTTP_VERSION_NONE, 
/** setting this means we don't care, and that we'd
                             like the library to choose the best possible
                             for us! */
//C       CURL_HTTP_VERSION_1_0,  /** please use HTTP 1.0 in the request */
//C       CURL_HTTP_VERSION_1_1,  /** please use HTTP 1.1 in the request */

//C       CURL_HTTP_VERSION_LAST /** *ILLEGAL* http version */
//C     };
enum
{
    CURL_HTTP_VERSION_NONE,
    CURL_HTTP_VERSION_1_0,
    CURL_HTTP_VERSION_1_1,
    CURL_HTTP_VERSION_LAST,
}

  /** These enums are for use with the CURLOPT_NETRC option. */
//C     enum CURL_NETRC_OPTION {
//C       CURL_NETRC_IGNORED,     
/** The .netrc will never be read.
                           * This is the default. */
//C       CURL_NETRC_OPTIONAL,    
/** A user:password in the URL will be preferred
                           * to one in the .netrc. */
//C       CURL_NETRC_REQUIRED,    
/** A user:password in the URL will be ignored.
                           * Unless one is set programmatically, the .netrc
                           * will be queried. */
//C       CURL_NETRC_LAST
//C     };
enum CURL_NETRC_OPTION
{
    CURL_NETRC_IGNORED,
    CURL_NETRC_OPTIONAL,
    CURL_NETRC_REQUIRED,
    CURL_NETRC_LAST,
}

//C     enum {
//C       CURL_SSLVERSION_DEFAULT,
//C       CURL_SSLVERSION_TLSv1,
//C       CURL_SSLVERSION_SSLv2,
//C       CURL_SSLVERSION_SSLv3,

//C       CURL_SSLVERSION_LAST /** never use, keep last */
//C     };
enum
{
    CURL_SSLVERSION_DEFAULT,
    CURL_SSLVERSION_TLSv1,
    CURL_SSLVERSION_SSLv2,
    CURL_SSLVERSION_SSLv3,
    CURL_SSLVERSION_LAST,
}


//C     typedef enum {
//C       CURL_TIMECOND_NONE,

//C       CURL_TIMECOND_IFMODSINCE,
//C       CURL_TIMECOND_IFUNMODSINCE,
//C       CURL_TIMECOND_LASTMOD,

//C       CURL_TIMECOND_LAST
//C     } curl_TimeCond;
enum
{
    CURL_TIMECOND_NONE,
    CURL_TIMECOND_IFMODSINCE,
    CURL_TIMECOND_IFUNMODSINCE,
    CURL_TIMECOND_LASTMOD,
    CURL_TIMECOND_LAST,
}
alias int curl_TimeCond;

//C     #ifdef __BEOS__
//C     #include <support/SupportDefs.h>
//C     #endif


/** curl_strequal() and curl_strnequal() are subject for removal in a future
   libcurl, see lib/README.curlx for details */
//C     CURL_EXTERN int (curl_strequal)(const char *s1, const char *s2);
int  curl_strequal(char *s1, char *s2);
//C     CURL_EXTERN int (curl_strnequal)(const char *s1, const char *s2, size_t n);
int  curl_strnequal(char *s1, char *s2, size_t n);

/** name is uppercase CURLFORM_<name> */
//C     #ifdef CFINIT
//C     #undef CFINIT
//C     #endif

//C     #ifdef CURL_ISOCPP
//C     #define CFINIT(name) CURLFORM_ ## name
//C     #else
/** The macro "##" is ISO C, we assume pre-ISO C doesn't support it. */
//C     #define CFINIT(name) CURLFORM_/***/name
//C     #endif

//C     typedef enum {
//C       CFINIT(NOTHING),        /********** the first one is unused ************/

  /**  */
//C       CFINIT(COPYNAME),
//C       CFINIT(PTRNAME),
//C       CFINIT(NAMELENGTH),
//C       CFINIT(COPYCONTENTS),
//C       CFINIT(PTRCONTENTS),
//C       CFINIT(CONTENTSLENGTH),
//C       CFINIT(FILECONTENT),
//C       CFINIT(ARRAY),
//C       CFINIT(OBSOLETE),
//C       CFINIT(FILE),

//C       CFINIT(BUFFER),
//C       CFINIT(BUFFERPTR),
//C       CFINIT(BUFFERLENGTH),

//C       CFINIT(CONTENTTYPE),
//C       CFINIT(CONTENTHEADER),
//C       CFINIT(FILENAME),
//C       CFINIT(END),
//C       CFINIT(OBSOLETE2),

//C       CURLFORM_LASTENTRY /** the last unusued */
//C     } CURLformoption;
enum
{
    CURLFORM_NOTHING,
    CURLFORM_COPYNAME,
    CURLFORM_PTRNAME,
    CURLFORM_NAMELENGTH,
    CURLFORM_COPYCONTENTS,
    CURLFORM_PTRCONTENTS,
    CURLFORM_CONTENTSLENGTH,
    CURLFORM_FILECONTENT,
    CURLFORM_ARRAY,
    CURLFORM_OBSOLETE,
    CURLFORM_FILE,
    CURLFORM_BUFFER,
    CURLFORM_BUFFERPTR,
    CURLFORM_BUFFERLENGTH,
    CURLFORM_CONTENTTYPE,
    CURLFORM_CONTENTHEADER,
    CURLFORM_FILENAME,
    CURLFORM_END,
    CURLFORM_OBSOLETE2,
    CURLFORM_LASTENTRY,
}
alias int CURLformoption;

//C     #undef CFINIT /** done */

/** structure to be used as parameter for CURLFORM_ARRAY */
//C     struct curl_forms {
//C       CURLformoption option;
//C       const char     *value;
//C     };
struct curl_forms
{
    CURLformoption option;
    char *value;
}

/** use this for multipart formpost building */
/** Returns code for curl_formadd()
 *
 * Returns:
 * CURL_FORMADD_OK             on success
 * CURL_FORMADD_MEMORY         if the FormInfo allocation fails
 * CURL_FORMADD_OPTION_TWICE   if one option is given twice for one Form
 * CURL_FORMADD_NULL           if a null pointer was given for a char
 * CURL_FORMADD_MEMORY         if the allocation of a FormInfo struct failed
 * CURL_FORMADD_UNKNOWN_OPTION if an unknown option was used
 * CURL_FORMADD_INCOMPLETE     if the some FormInfo is not complete (or error)
 * CURL_FORMADD_MEMORY         if a HttpPost struct cannot be allocated
 * CURL_FORMADD_MEMORY         if some allocation for string copying failed.
 * CURL_FORMADD_ILLEGAL_ARRAY  if an illegal option is used in an array
 *
 ***************************************************************************/
//C     typedef enum {
//C       CURL_FORMADD_OK, /** first, no error */

//C       CURL_FORMADD_MEMORY,
//C       CURL_FORMADD_OPTION_TWICE,
//C       CURL_FORMADD_NULL,
//C       CURL_FORMADD_UNKNOWN_OPTION,
//C       CURL_FORMADD_INCOMPLETE,
//C       CURL_FORMADD_ILLEGAL_ARRAY,
//C       CURL_FORMADD_DISABLED, /** libcurl was built with this disabled */

//C       CURL_FORMADD_LAST /** last */
//C     } CURLFORMcode;
enum
{
    CURL_FORMADD_OK,
    CURL_FORMADD_MEMORY,
    CURL_FORMADD_OPTION_TWICE,
    CURL_FORMADD_NULL,
    CURL_FORMADD_UNKNOWN_OPTION,
    CURL_FORMADD_INCOMPLETE,
    CURL_FORMADD_ILLEGAL_ARRAY,
    CURL_FORMADD_DISABLED,
    CURL_FORMADD_LAST,
}
alias int CURLFORMcode;

/**
 * NAME curl_formadd()
 *
 * DESCRIPTION
 *
 * Pretty advanved function for building multi-part formposts. Each invoke
 * adds one part that together construct a full post. Then use
 * CURLOPT_HTTPPOST to send it off to libcurl.
 */
//C     CURL_EXTERN CURLFORMcode curl_formadd(struct curl_httppost **httppost,
//C                                           struct curl_httppost **last_post,
//C                                           ...);
CURLFORMcode  curl_formadd(curl_httppost **httppost, curl_httppost **last_post,...);

/**
 * callback function for curl_formget()
 * The void *arg pointer will be the one passed as second argument to curl_formget().
 * The character buffer passed to it must not be freed.
 * Should return the buffer length passed to it as the argument "len" on success.
 */
//C     typedef size_t (*curl_formget_callback)(void *arg, const char *buf, size_t len);
alias size_t  function(void *arg, char *buf, size_t len)curl_formget_callback;

/**
 * NAME curl_formget()
 *
 * DESCRIPTION
 *
 * Serialize a curl_httppost struct built with curl_formadd().
 * Accepts a void pointer as second argument which will be passed to
 * the curl_formget_callback function.
 * Returns 0 on success.
 */
//C     CURL_EXTERN int curl_formget(struct curl_httppost *form, void *arg,
//C                                  curl_formget_callback append);
int  curl_formget(curl_httppost *form, void *arg, curl_formget_callback append);
/**
 * NAME curl_formfree()
 *
 * DESCRIPTION
 *
 * Free a multipart formpost previously built with curl_formadd().
 */
//C     CURL_EXTERN void curl_formfree(struct curl_httppost *form);
void  curl_formfree(curl_httppost *form);

/**
 * NAME curl_getenv()
 *
 * DESCRIPTION
 *
 * Returns a malloc()'ed string that MUST be curl_free()ed after usage is
 * complete. DEPRECATED - see lib/README.curlx
 */
//C     CURL_EXTERN char *curl_getenv(const char *variable);
char * curl_getenv(char *variable);

/**
 * NAME curl_version()
 *
 * DESCRIPTION
 *
 * Returns a static ascii string of the libcurl version.
 */
//C     CURL_EXTERN char *curl_version(void);
char * curl_version();

/**
 * NAME curl_easy_escape()
 *
 * DESCRIPTION
 *
 * Escapes URL strings (converts all letters consider illegal in URLs to their
 * %XX versions). This function returns a new allocated string or NULL if an
 * error occurred.
 */
//C     CURL_EXTERN char *curl_easy_escape(CURL *handle,
//C                                        const char *string,
//C                                        int length);
char * curl_easy_escape(CURL *handle, char *string, int length);

/** the previous version: */
//C     CURL_EXTERN char *curl_escape(const char *string,
//C                                   int length);
char * curl_escape(char *string, int length);


/**
 * NAME curl_easy_unescape()
 *
 * DESCRIPTION
 *
 * Unescapes URL encoding in strings (converts all %XX codes to their 8bit
 * versions). This function returns a new allocated string or NULL if an error
 * occurred.
 * Conversion Note: On non-ASCII platforms the ASCII %XX codes are
 * converted into the host encoding.
 */
//C     CURL_EXTERN char *curl_easy_unescape(CURL *handle,
//C                                          const char *string,
//C                                          int length,
//C                                          int *outlength);
char * curl_easy_unescape(CURL *handle, char *string, int length, int *outlength);

/** the previous version */
//C     CURL_EXTERN char *curl_unescape(const char *string,
//C                                     int length);
char * curl_unescape(char *string, int length);

/**
 * NAME curl_free()
 *
 * DESCRIPTION
 *
 * Provided for de-allocation in the same translation unit that did the
 * allocation. Added in libcurl 7.10
 */
//C     CURL_EXTERN void curl_free(void *p);
void  curl_free(void *p);

/**
 * NAME curl_global_init()
 *
 * DESCRIPTION
 *
 * curl_global_init() should be invoked exactly once for each application that
 * uses libcurl
 */
//C     CURL_EXTERN CURLcode curl_global_init(long flags);
CURLcode  curl_global_init(int flags);

/**
 * NAME curl_global_init_mem()
 *
 * DESCRIPTION
 *
 * curl_global_init() or curl_global_init_mem() should be invoked exactly once
 * for each application that uses libcurl.  This function can be used to
 * initialize libcurl and set user defined memory management callback
 * functions.  Users can implement memory management routines to check for
 * memory leaks, check for mis-use of the curl library etc.  User registered
 * callback routines with be invoked by this library instead of the system
 * memory management routines like malloc, free etc.
 */
//C     CURL_EXTERN CURLcode curl_global_init_mem(long flags,
//C                                               curl_malloc_callback m,
//C                                               curl_free_callback f,
//C                                               curl_realloc_callback r,
//C                                               curl_strdup_callback s,
//C                                               curl_calloc_callback c);
CURLcode  curl_global_init_mem(int flags, curl_malloc_callback m, curl_free_callback f, curl_realloc_callback r, curl_strdup_callback s, curl_calloc_callback c);

/**
 * NAME curl_global_cleanup()
 *
 * DESCRIPTION
 *
 * curl_global_cleanup() should be invoked exactly once for each application
 * that uses libcurl
 */
//C     CURL_EXTERN void curl_global_cleanup(void);
void  curl_global_cleanup();

/** linked-list structure for the CURLOPT_QUOTE option (and other) */
//C     struct curl_slist {
//C       char *data;
//C       struct curl_slist *next;
//C     };
struct curl_slist
{
    char *data;
    curl_slist *next;
}

/**
 * NAME curl_slist_append()
 *
 * DESCRIPTION
 *
 * Appends a string to a linked list. If no list exists, it will be created
 * first. Returns the new list, after appending.
 */
//C     CURL_EXTERN struct curl_slist *curl_slist_append(struct curl_slist *,
//C                                                      const char *);
curl_slist * curl_slist_append(curl_slist *, char *);

/**
 * NAME curl_slist_free_all()
 *
 * DESCRIPTION
 *
 * free a previously built curl_slist.
 */
//C     CURL_EXTERN void curl_slist_free_all(struct curl_slist *);
void  curl_slist_free_all(curl_slist *);

/**
 * NAME curl_getdate()
 *
 * DESCRIPTION
 *
 * Returns the time, in seconds since 1 Jan 1970 of the time string given in
 * the first argument. The time argument in the second parameter is unused
 * and should be set to NULL.
 */
//C     CURL_EXTERN time_t curl_getdate(const char *p, const time_t *unused);
time_t  curl_getdate(char *p, time_t *unused);

//C     #define CURLINFO_STRING   0x100000
//C     #define CURLINFO_LONG     0x200000
const CURLINFO_STRING = 0x100000;
//C     #define CURLINFO_DOUBLE   0x300000
const CURLINFO_LONG = 0x200000;
//C     #define CURLINFO_SLIST    0x400000
const CURLINFO_DOUBLE = 0x300000;
//C     #define CURLINFO_MASK     0x0fffff
const CURLINFO_SLIST = 0x400000;
//C     #define CURLINFO_TYPEMASK 0xf00000
const CURLINFO_MASK = 0x0fffff;

const CURLINFO_TYPEMASK = 0xf00000;
//C     typedef enum {
//C       CURLINFO_NONE, /** first, never use this */
//C       CURLINFO_EFFECTIVE_URL    = CURLINFO_STRING + 1,
//C       CURLINFO_RESPONSE_CODE    = CURLINFO_LONG   + 2,
//C       CURLINFO_TOTAL_TIME       = CURLINFO_DOUBLE + 3,
//C       CURLINFO_NAMELOOKUP_TIME  = CURLINFO_DOUBLE + 4,
//C       CURLINFO_CONNECT_TIME     = CURLINFO_DOUBLE + 5,
//C       CURLINFO_PRETRANSFER_TIME = CURLINFO_DOUBLE + 6,
//C       CURLINFO_SIZE_UPLOAD      = CURLINFO_DOUBLE + 7,
//C       CURLINFO_SIZE_DOWNLOAD    = CURLINFO_DOUBLE + 8,
//C       CURLINFO_SPEED_DOWNLOAD   = CURLINFO_DOUBLE + 9,
//C       CURLINFO_SPEED_UPLOAD     = CURLINFO_DOUBLE + 10,
//C       CURLINFO_HEADER_SIZE      = CURLINFO_LONG   + 11,
//C       CURLINFO_REQUEST_SIZE     = CURLINFO_LONG   + 12,
//C       CURLINFO_SSL_VERIFYRESULT = CURLINFO_LONG   + 13,
//C       CURLINFO_FILETIME         = CURLINFO_LONG   + 14,
//C       CURLINFO_CONTENT_LENGTH_DOWNLOAD   = CURLINFO_DOUBLE + 15,
//C       CURLINFO_CONTENT_LENGTH_UPLOAD     = CURLINFO_DOUBLE + 16,
//C       CURLINFO_STARTTRANSFER_TIME = CURLINFO_DOUBLE + 17,
//C       CURLINFO_CONTENT_TYPE     = CURLINFO_STRING + 18,
//C       CURLINFO_REDIRECT_TIME    = CURLINFO_DOUBLE + 19,
//C       CURLINFO_REDIRECT_COUNT   = CURLINFO_LONG   + 20,
//C       CURLINFO_PRIVATE          = CURLINFO_STRING + 21,
//C       CURLINFO_HTTP_CONNECTCODE = CURLINFO_LONG   + 22,
//C       CURLINFO_HTTPAUTH_AVAIL   = CURLINFO_LONG   + 23,
//C       CURLINFO_PROXYAUTH_AVAIL  = CURLINFO_LONG   + 24,
//C       CURLINFO_OS_ERRNO         = CURLINFO_LONG   + 25,
//C       CURLINFO_NUM_CONNECTS     = CURLINFO_LONG   + 26,
//C       CURLINFO_SSL_ENGINES      = CURLINFO_SLIST  + 27,
//C       CURLINFO_COOKIELIST       = CURLINFO_SLIST  + 28,
//C       CURLINFO_LASTSOCKET       = CURLINFO_LONG   + 29,
//C       CURLINFO_FTP_ENTRY_PATH   = CURLINFO_STRING + 30,
  /** Fill in new entries below here! */

//C       CURLINFO_LASTONE          = 30
//C     } CURLINFO;
enum
{
    CURLINFO_NONE,
    CURLINFO_EFFECTIVE_URL = 1048577,
    CURLINFO_RESPONSE_CODE = 2097154,
    CURLINFO_TOTAL_TIME = 3145731,
    CURLINFO_NAMELOOKUP_TIME,
    CURLINFO_CONNECT_TIME,
    CURLINFO_PRETRANSFER_TIME,
    CURLINFO_SIZE_UPLOAD,
    CURLINFO_SIZE_DOWNLOAD,
    CURLINFO_SPEED_DOWNLOAD,
    CURLINFO_SPEED_UPLOAD,
    CURLINFO_HEADER_SIZE = 2097163,
    CURLINFO_REQUEST_SIZE,
    CURLINFO_SSL_VERIFYRESULT,
    CURLINFO_FILETIME,
    CURLINFO_CONTENT_LENGTH_DOWNLOAD = 3145743,
    CURLINFO_CONTENT_LENGTH_UPLOAD,
    CURLINFO_STARTTRANSFER_TIME,
    CURLINFO_CONTENT_TYPE = 1048594,
    CURLINFO_REDIRECT_TIME = 3145747,
    CURLINFO_REDIRECT_COUNT = 2097172,
    CURLINFO_PRIVATE = 1048597,
    CURLINFO_HTTP_CONNECTCODE = 2097174,
    CURLINFO_HTTPAUTH_AVAIL,
    CURLINFO_PROXYAUTH_AVAIL,
    CURLINFO_OS_ERRNO,
    CURLINFO_NUM_CONNECTS,
    CURLINFO_SSL_ENGINES = 4194331,
    CURLINFO_COOKIELIST,
    CURLINFO_LASTSOCKET = 2097181,
    CURLINFO_FTP_ENTRY_PATH = 1048606,
    CURLINFO_LASTONE = 30,
}
alias int CURLINFO;

/** CURLINFO_RESPONSE_CODE is the new name for the option previously known as
   CURLINFO_HTTP_CODE */
//C     #define CURLINFO_HTTP_CODE CURLINFO_RESPONSE_CODE

alias CURLINFO_RESPONSE_CODE CURLINFO_HTTP_CODE;
//C     typedef enum {
//C       CURLCLOSEPOLICY_NONE, /** first, never use this */

//C       CURLCLOSEPOLICY_OLDEST,
//C       CURLCLOSEPOLICY_LEAST_RECENTLY_USED,
//C       CURLCLOSEPOLICY_LEAST_TRAFFIC,
//C       CURLCLOSEPOLICY_SLOWEST,
//C       CURLCLOSEPOLICY_CALLBACK,

//C       CURLCLOSEPOLICY_LAST /** last, never use this */
//C     } curl_closepolicy;
enum
{
    CURLCLOSEPOLICY_NONE,
    CURLCLOSEPOLICY_OLDEST,
    CURLCLOSEPOLICY_LEAST_RECENTLY_USED,
    CURLCLOSEPOLICY_LEAST_TRAFFIC,
    CURLCLOSEPOLICY_SLOWEST,
    CURLCLOSEPOLICY_CALLBACK,
    CURLCLOSEPOLICY_LAST,
}
alias int curl_closepolicy;

//C     #define CURL_GLOBAL_SSL (1<<0)
//C     #define CURL_GLOBAL_WIN32 (1<<1)
//C     #define CURL_GLOBAL_ALL (CURL_GLOBAL_SSL|CURL_GLOBAL_WIN32)
//C     #define CURL_GLOBAL_NOTHING 0
//C     #define CURL_GLOBAL_DEFAULT CURL_GLOBAL_ALL
const CURL_GLOBAL_NOTHING = 0;
const CURL_GLOBAL_SSL = 1;
const CURL_GLOBAL_WIN32 = 2;
const CURL_GLOBAL_ALL = 3;

alias CURL_GLOBAL_ALL CURL_GLOBAL_DEFAULT;

/******************************************************************************
 * Setup defines, protos etc for the sharing stuff.
 */

/** Different data locks for a single share */
//C     typedef enum {
//C       CURL_LOCK_DATA_NONE = 0,
  /**  CURL_LOCK_DATA_SHARE is used internaly to say that
   *  the locking is just made to change the internal state of the share
   *  itself.
   */
//C       CURL_LOCK_DATA_SHARE,
//C       CURL_LOCK_DATA_COOKIE,
//C       CURL_LOCK_DATA_DNS,
//C       CURL_LOCK_DATA_SSL_SESSION,
//C       CURL_LOCK_DATA_CONNECT,
//C       CURL_LOCK_DATA_LAST
//C     } curl_lock_data;
enum
{
    CURL_LOCK_DATA_NONE,
    CURL_LOCK_DATA_SHARE,
    CURL_LOCK_DATA_COOKIE,
    CURL_LOCK_DATA_DNS,
    CURL_LOCK_DATA_SSL_SESSION,
    CURL_LOCK_DATA_CONNECT,
    CURL_LOCK_DATA_LAST,
}
alias int curl_lock_data;

/** Different lock access types */
//C     typedef enum {
//C       CURL_LOCK_ACCESS_NONE = 0,   /** unspecified action */
//C       CURL_LOCK_ACCESS_SHARED = 1, /** for read perhaps */
//C       CURL_LOCK_ACCESS_SINGLE = 2, /** for write perhaps */
//C       CURL_LOCK_ACCESS_LAST        /** never use */
//C     } curl_lock_access;
enum
{
    CURL_LOCK_ACCESS_NONE,
    CURL_LOCK_ACCESS_SHARED,
    CURL_LOCK_ACCESS_SINGLE,
    CURL_LOCK_ACCESS_LAST,
}
alias int curl_lock_access;

//C     typedef void (*curl_lock_function)(CURL *handle,
//C                                        curl_lock_data data,
//C                                        curl_lock_access locktype,
//C                                        void *userptr);
alias void  function(CURL *handle, curl_lock_data data, curl_lock_access locktype, void *userptr)curl_lock_function;
//C     typedef void (*curl_unlock_function)(CURL *handle,
//C                                          curl_lock_data data,
//C                                          void *userptr);
alias void  function(CURL *handle, curl_lock_data data, void *userptr)curl_unlock_function;

//C     typedef void CURLSH;
alias void CURLSH;

//C     typedef enum {
//C       CURLSHE_OK,  /** all is fine */
//C       CURLSHE_BAD_OPTION, /** 1 */
//C       CURLSHE_IN_USE,     /** 2 */
//C       CURLSHE_INVALID,    /** 3 */
//C       CURLSHE_NOMEM,      /** out of memory */
//C       CURLSHE_LAST /** never use */
//C     } CURLSHcode;
enum
{
    CURLSHE_OK,
    CURLSHE_BAD_OPTION,
    CURLSHE_IN_USE,
    CURLSHE_INVALID,
    CURLSHE_NOMEM,
    CURLSHE_LAST,
}
alias int CURLSHcode;

//C     typedef enum {
//C       CURLSHOPT_NONE,  /** don't use */
//C       CURLSHOPT_SHARE,   /** specify a data type to share */
//C       CURLSHOPT_UNSHARE, /** specify shich data type to stop sharing */
//C       CURLSHOPT_LOCKFUNC,   /** pass in a 'curl_lock_function' pointer */
//C       CURLSHOPT_UNLOCKFUNC, /** pass in a 'curl_unlock_function' pointer */
//C       CURLSHOPT_USERDATA,   
/** pass in a user data pointer used in the lock/unlock
                           callback functions */
//C       CURLSHOPT_LAST  /** never use */
//C     } CURLSHoption;
enum
{
    CURLSHOPT_NONE,
    CURLSHOPT_SHARE,
    CURLSHOPT_UNSHARE,
    CURLSHOPT_LOCKFUNC,
    CURLSHOPT_UNLOCKFUNC,
    CURLSHOPT_USERDATA,
    CURLSHOPT_LAST,
}
alias int CURLSHoption;

//C     CURL_EXTERN CURLSH *curl_share_init(void);
CURLSH * curl_share_init();
//C     CURL_EXTERN CURLSHcode curl_share_setopt(CURLSH *, CURLSHoption option, ...);
CURLSHcode  curl_share_setopt(CURLSH *, CURLSHoption option,...);
//C     CURL_EXTERN CURLSHcode curl_share_cleanup(CURLSH *);
CURLSHcode  curl_share_cleanup(CURLSH *);

/*****************************************************************************
 * Structures for querying information about the curl library at runtime.
 */

//C     typedef enum {
//C       CURLVERSION_FIRST,
//C       CURLVERSION_SECOND,
//C       CURLVERSION_THIRD,
//C       CURLVERSION_LAST /** never actually use this */
//C     } CURLversion;
enum
{
    CURLVERSION_FIRST,
    CURLVERSION_SECOND,
    CURLVERSION_THIRD,
    CURLVERSION_LAST,
}
alias int CURLversion;

/** The 'CURLVERSION_NOW' is the symbolic name meant to be used by
   basicly all programs ever, that want to get version information. It is
   meant to be a built-in version number for what kind of struct the caller
   expects. If the struct ever changes, we redefine the NOW to another enum
   from above. */
//C     #define CURLVERSION_NOW CURLVERSION_THIRD

alias CURLVERSION_THIRD CURLVERSION_NOW;
//C     typedef struct {
//C       CURLversion age;          /** age of the returned struct */
//C       const char *version;      /** LIBCURL_VERSION */
//C       unsigned int version_num; /** LIBCURL_VERSION_NUM */
//C       const char *host;         /** OS/host/cpu/machine when configured */
//C       int features;             /** bitmask, see defines below */
//C       const char *ssl_version;  /** human readable string */
//C       long ssl_version_num;     /** not used anymore, always 0 */
//C       const char *libz_version; /** human readable string */
  /** protocols is terminated by an entry with a NULL protoname */
//C       const char * const *protocols;

  /** The fields below this were added in CURLVERSION_SECOND */
//C       const char *ares;
//C       int ares_num;

  /** This field was added in CURLVERSION_THIRD */
//C       const char *libidn;

  /** Same as '_libiconv_version' if built with HAVE_ICONV */
//C       int iconv_ver_num;
//C     } curl_version_info_data;
struct _N132
{
    CURLversion age;
    char *versions;
    size_t version_num;
    char *host;
    int features;
    char *ssl_version;
    int ssl_version_num;
    char *libz_version;
    char **protocols;
    char *ares;
    int ares_num;
    char *libidn;
    int iconv_ver_num;
}
alias _N132 curl_version_info_data;

//C     #define CURL_VERSION_IPV6      (1<<0)  /** IPv6-enabled */
//C     #define CURL_VERSION_KERBEROS4 (1<<1)  /** kerberos auth is supported */
//C     #define CURL_VERSION_SSL       (1<<2)  /** SSL options are present */
//C     #define CURL_VERSION_LIBZ      (1<<3)  /** libz features are present */
//C     #define CURL_VERSION_NTLM      (1<<4)  /** NTLM auth is supported */
//C     #define CURL_VERSION_GSSNEGOTIATE (1<<5) /** Negotiate auth support */
//C     #define CURL_VERSION_DEBUG     (1<<6)  /** built with debug capabilities */
//C     #define CURL_VERSION_ASYNCHDNS (1<<7)  /** asynchronous dns resolves */
//C     #define CURL_VERSION_SPNEGO    (1<<8)  /** SPNEGO auth */
//C     #define CURL_VERSION_LARGEFILE (1<<9)  /** supports files bigger than 2GB */
//C     #define CURL_VERSION_IDN       (1<<10) /** International Domain Names support */
//C     #define CURL_VERSION_SSPI      (1<<11) /** SSPI is supported */
//C     #define CURL_VERSION_CONV      (1<<12) 
/** character conversions are
                                          supported */
const CURL_VERSION_IPV6 = 1;
const CURL_VERSION_KERBEROS4 = 2;
const CURL_VERSION_SSL = 4;
const CURL_VERSION_LIBZ = 8;
const CURL_VERSION_NTLM = 16;
const CURL_VERSION_GSSNEGOTIATE = 32;
const CURL_VERSION_DEBUG = 64;
const CURL_VERSION_ASYNCHDNS = 128;
const CURL_VERSION_SPNEGO = 256;
const CURL_VERSION_LARGEFILE = 512;
const CURL_VERSION_IDN = 1024;
const CURL_VERSION_SSPI = 2048;
const CURL_VERSION_CONV = 4096;

/**
 * NAME curl_version_info()
 *
 * DESCRIPTION
 *
 * This function returns a pointer to a static copy of the version info
 * struct. See above.
 */
//C     CURL_EXTERN curl_version_info_data *curl_version_info(CURLversion);
curl_version_info_data * curl_version_info(CURLversion );

/**
 * NAME curl_easy_strerror()
 *
 * DESCRIPTION
 *
 * The curl_easy_strerror function may be used to turn a CURLcode value
 * into the equivalent human readable error string.  This is useful
 * for printing meaningful error messages.
 */
//C     CURL_EXTERN const char *curl_easy_strerror(CURLcode);
char * curl_easy_strerror(CURLcode );

/**
 * NAME curl_share_strerror()
 *
 * DESCRIPTION
 *
 * The curl_share_strerror function may be used to turn a CURLSHcode value
 * into the equivalent human readable error string.  This is useful
 * for printing meaningful error messages.
 */
//C     CURL_EXTERN const char *curl_share_strerror(CURLSHcode);
char * curl_share_strerror(CURLSHcode );

//C     #ifdef  __cplusplus
//C     }
//C     #endif

/** unfortunately, the easy.h and multi.h include files need options and info
  stuff before they can be included! */
//C     #include "easy.h" /** nothing in curl is fun without the easy stuff */
//C     #ifndef __CURL_EASY_H
//C     #define __CURL_EASY_H

//C     #ifdef  __cplusplus
//C     extern "C" {
//C     #endif

//C     CURL_EXTERN CURL *curl_easy_init(void);
CURL * curl_easy_init();
//C     CURL_EXTERN CURLcode curl_easy_setopt(CURL *curl, CURLoption option, ...);
CURLcode  curl_easy_setopt(CURL *curl, CURLoption option,...);
//C     CURL_EXTERN CURLcode curl_easy_perform(CURL *curl);
CURLcode  curl_easy_perform(CURL *curl);
//C     CURL_EXTERN void curl_easy_cleanup(CURL *curl);
void  curl_easy_cleanup(CURL *curl);

/**
 * NAME curl_easy_getinfo()
 *
 * DESCRIPTION
 *
 * Request internal information from the curl session with this function.  The
 * third argument MUST be a pointer to a long, a pointer to a char * or a
 * pointer to a double (as the documentation describes elsewhere).  The data
 * pointed to will be filled in accordingly and can be relied upon only if the
 * function returns CURLE_OK.  This function is intended to get used *AFTER* a
 * performed transfer, all results from this function are undefined until the
 * transfer is completed.
 */
//C     CURL_EXTERN CURLcode curl_easy_getinfo(CURL *curl, CURLINFO info, ...);
CURLcode  curl_easy_getinfo(CURL *curl, CURLINFO info,...);


/**
 * NAME curl_easy_duphandle()
 *
 * DESCRIPTION
 *
 * Creates a new curl session handle with the same options set for the handle
 * passed in. Duplicating a handle could only be a matter of cloning data and
 * options, internal state info and things like persistant connections cannot
 * be transfered. It is useful in multithreaded applications when you can run
 * curl_easy_duphandle() for each new thread to avoid a series of identical
 * curl_easy_setopt() invokes in every thread.
 */
//C     CURL_EXTERN CURL* curl_easy_duphandle(CURL *curl);
CURL * curl_easy_duphandle(CURL *curl);

/**
 * NAME curl_easy_reset()
 *
 * DESCRIPTION
 *
 * Re-initializes a CURL handle to the default values. This puts back the
 * handle to the same state as it was in when it was just created.
 *
 * It does keep: live connections, the Session ID cache, the DNS cache and the
 * cookies.
 */
//C     CURL_EXTERN void curl_easy_reset(CURL *curl);
void  curl_easy_reset(CURL *curl);

//C     #ifdef  __cplusplus
//C     }
//C     #endif

//C     #endif
//C     #include "multi.h"
//C     #ifndef __CURL_MULTI_H
//C     #define __CURL_MULTI_H
/****************************************************************************
 *                                  _   _ ____  _
 *  Project                     ___| | | |  _ \| |
 *                             / __| | | | |_) | |
 *                            | (__| |_| |  _ <| |___
 *                             \___|\___/|_| \_\_____|
 *
 * Copyright (C) 1998 - 2006, Daniel Stenberg, <daniel@haxx.se>, et al.
 *
 * This software is licensed as described in the file COPYING, which
 * you should have received as part of this distribution. The terms
 * are also available at http://curl.haxx.se/docs/copyright.html.
 *
 * You may opt to use, copy, modify, merge, publish, distribute and/or sell
 * copies of the Software, and permit persons to whom the Software is
 * furnished to do so, under the terms of the COPYING file.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 * $Id: multi.h,v 1.42 2006-10-12 08:36:50 bagder Exp $
 ***************************************************************************/
/**
  This is an "external" header file. Don't give away any internals here!

  GOALS

  o Enable a "pull" interface. The application that uses libcurl decides where
    and when to ask libcurl to get/send data.

  o Enable multiple simultaneous transfers in the same thread without making it
    complicated for the application.

  o Enable the application to select() on its own file descriptors and curl's
    file descriptors simultaneous easily.

*/

/**
 * This header file should not really need to include "curl.h" since curl.h
 * itself includes this file and we expect user applications to do #include
 * <curl/curl.h> without the need for especially including multi.h.
 *
 * For some reason we added this include here at one point, and rather than to
 * break existing (wrongly written) libcurl applications, we leave it as-is
 * but with this warning attached.
 */
//C     #include "curl.h"
//C     #ifndef __CURL_CURL_H
//C     #define __CURL_CURL_H
/****************************************************************************
 *                                  _   _ ____  _
 *  Project                     ___| | | |  _ \| |
 *                             / __| | | | |_) | |
 *                            | (__| |_| |  _ <| |___
 *                             \___|\___/|_| \_\_____|
 *
 * Copyright (C) 1998 - 2006, Daniel Stenberg, <daniel@haxx.se>, et al.
 *
 * This software is licensed as described in the file COPYING, which
 * you should have received as part of this distribution. The terms
 * are also available at http://curl.haxx.se/docs/copyright.html.
 *
 * You may opt to use, copy, modify, merge, publish, distribute and/or sell
 * copies of the Software, and permit persons to whom the Software is
 * furnished to do so, under the terms of the COPYING file.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 * $Id: curl.h,v 1.310 2006-10-21 11:32:07 bagder Exp $
 ***************************************************************************/

/** If you have problems, all libcurl docs and details are found here:
   http://curl.haxx.se/libcurl/
*/

//C     #include "curlver.h" /** the libcurl version defines */

//C     #include <stdio.h>
//C     #include <limits.h>

/** The include stuff here below is mainly for time_t! */
//C     #ifdef vms
//C     # include <types.h>
//C     # include <time.h>
//C     #else
//C     # include <sys/types.h>
//C     # include <time.h>
//C     #endif /** defined (vms) */

//C     typedef void CURL;

//C     #ifdef  __cplusplus
//C     extern "C" {
//C     #endif

/**
 * Decorate exportable functions for Win32 DLL linking.
 * This avoids using a .def file for building libcurl.dll.
 */
//C     #if (defined(WIN32) || defined(_WIN32)) && !defined(CURL_STATICLIB)
//C     #if defined(BUILDING_LIBCURL)
//C     #define CURL_EXTERN  __declspec(dllexport)
//C     #else
//C     #define CURL_EXTERN  __declspec(dllimport)
//C     #endif
//C     #else

//C     #ifdef CURL_HIDDEN_SYMBOLS
/**
 * This definition is used to make external definitions visibile in the
 * shared library when symbols are hidden by default.  It makes no
 * difference when compiling applications whether this is set or not,
 * only when compiling the library.
 */
//C     #define CURL_EXTERN CURL_EXTERN_SYMBOL
//C     #else
//C     #define CURL_EXTERN
//C     #endif
//C     #endif

/**
 * We want the typedef curl_off_t setup for large file support on all
 * platforms. We also provide a CURL_FORMAT_OFF_T define to use in *printf
 * format strings when outputting a variable of type curl_off_t.
 *
 * Note: "pocc -Ze" is MSVC compatibily mode and this sets _MSC_VER!
 */

//C     #if (defined(_MSC_VER) && !defined(__POCC__)) || (defined(__LCC__) && defined(WIN32))
/** MSVC */
//C     #ifdef _WIN32_WCE
//C       typedef long curl_off_t;
//C     #define CURL_FORMAT_OFF_T "%ld"
//C     #else
//C       typedef signed __int64 curl_off_t;
//C     #define CURL_FORMAT_OFF_T "%I64d"
//C     #endif
//C     #else /** (_MSC_VER && !__POCC__) || (__LCC__ && WIN32) */
//C     #if (defined(__GNUC__) && defined(WIN32)) || defined(__WATCOMC__)
/** gcc on windows or Watcom */
//C       typedef long long curl_off_t;
//C     #define CURL_FORMAT_OFF_T "%I64d"
//C     #else /** GCC or Watcom on Windows  */

/** "normal" POSIX approach, do note that this does not necessarily mean that
   the type is >32 bits, see the SIZEOF_CURL_OFF_T define for that! */
//C       typedef off_t curl_off_t;

/** Check a range of defines to detect large file support. On Linux it seems
   none of these are set by default, so if you don't explicitly switches on
   large file support, this define will be made for "small file" support. */
//C     #ifndef _FILE_OFFSET_BITS
//C     #define _FILE_OFFSET_BITS 0 /** to prevent warnings in the check below */
//C     #define UNDEF_FILE_OFFSET_BITS
//C     #endif
//C     #ifndef FILESIZEBITS
//C     #define FILESIZEBITS 0 /** to prevent warnings in the check below */
//C     #define UNDEF_FILESIZEBITS
//C     #endif

//C     #if defined(_LARGE_FILES) || (_FILE_OFFSET_BITS > 32) || (FILESIZEBITS > 32)    || defined(_LARGEFILE_SOURCE) || defined(_LARGEFILE64_SOURCE)
  /** For now, we assume at least one of these to be set for large files to
     work! */
//C     #define CURL_FORMAT_OFF_T "%lld"
//C     #else /** LARGE_FILE support */
//C     #define CURL_FORMAT_OFF_T "%ld"
//C     #endif
//C     #endif /** GCC or Watcom on Windows */
//C     #endif /** (_MSC_VER && !__POCC__) || (__LCC__ && WIN32) */

//C     #ifdef UNDEF_FILE_OFFSET_BITS
/** this was defined above for our checks, undefine it again */
//C     #undef _FILE_OFFSET_BITS
//C     #endif

//C     #ifdef UNDEF_FILESIZEBITS
/** this was defined above for our checks, undefine it again */
//C     #undef FILESIZEBITS
//C     #endif

//C     #if defined(_WIN32) && !defined(WIN32)
/** Chris Lewis mentioned that he doesn't get WIN32 defined, only _WIN32 so we
   make this adjustment to catch this. */
//C     #define WIN32 1
//C     #endif

//C     #if defined(WIN32) && !defined(_WIN32_WCE) && !defined(__GNUC__) &&   !defined(__CYGWIN__) || defined(__MINGW32__)
//C     #if !(defined(_WINSOCKAPI_) || defined(_WINSOCK_H))
/** The check above prevents the winsock2 inclusion if winsock.h already was
   included, since they can't co-exist without problems */
//C     #include <winsock2.h>
//C     #endif
//C     #else

/** HP-UX systems version 9, 10 and 11 lack sys/select.h and so does oldish
   libc5-based Linux systems. Only include it on system that are known to
   require it! */
//C     #if defined(_AIX) || defined(NETWARE) || defined(__NetBSD__) || defined(__minix)
//C     #include <sys/select.h>
//C     #endif

//C     #ifndef _WIN32_WCE
//C     #include <sys/socket.h>
//C     #endif
//C     #ifndef __WATCOMC__
//C     #include <sys/time.h>
//C     #endif
//C     #include <sys/types.h>
//C     #endif

//C     #ifndef curl_socket_typedef
/** socket typedef */
//C     #ifdef WIN32
//C     typedef SOCKET curl_socket_t;
//C     #define CURL_SOCKET_BAD INVALID_SOCKET
//C     #else
//C     typedef int curl_socket_t;
//C     #define CURL_SOCKET_BAD -1
//C     #endif
//C     #define curl_socket_typedef
//C     #endif /** curl_socket_typedef */

//C     struct curl_httppost {
//C       struct curl_httppost *next;       /** next entry in the list */
//C       char *name;                       /** pointer to allocated name */
//C       long namelength;                  /** length of name length */
//C       char *contents;                   /** pointer to allocated data contents */
//C       long contentslength;              /** length of contents field */
//C       char *buffer;                     /** pointer to allocated buffer contents */
//C       long bufferlength;                /** length of buffer field */
//C       char *contenttype;                /** Content-Type */
//C       struct curl_slist* contentheader; /** list of extra headers for this form */
//C       struct curl_httppost *more;       
/** if one field name has more than one
                                       file, this link should link to following
                                       files */
//C       long flags;                       /** as defined below */
//C     #define HTTPPOST_FILENAME (1<<0)    /** specified content is a file name */
//C     #define HTTPPOST_READFILE (1<<1)    /** specified content is a file name */
//C     #define HTTPPOST_PTRNAME (1<<2)     
/** name is only stored pointer
                                       do not free in formfree */
//C     #define HTTPPOST_PTRCONTENTS (1<<3) 
/** contents is only stored pointer
                                       do not free in formfree */
//C     #define HTTPPOST_BUFFER (1<<4)      /** upload file from buffer */
//C     #define HTTPPOST_PTRBUFFER (1<<5)   /** upload file from pointer contents */

//C       char *showfilename;               
/** The file name to show. If not set, the
                                       actual file name will be used (if this
                                       is a file part) */
//C     };

//C     typedef int (*curl_progress_callback)(void *clientp,
//C                                           double dltotal,
//C                                           double dlnow,
//C                                           double ultotal,
//C                                           double ulnow);

  /** Tests have proven that 20K is a very bad buffer size for uploads on
     Windows, while 16K for some odd reason performed a lot better. */
//C     #define CURL_MAX_WRITE_SIZE 16384

//C     typedef size_t (*curl_write_callback)(char *buffer,
//C                                           size_t size,
//C                                           size_t nitems,
//C                                           void *outstream);

/** This is a return code for the read callback that, when returned, will
   signal libcurl to immediately abort the current transfer. */
//C     #define CURL_READFUNC_ABORT 0x10000000
//C     typedef size_t (*curl_read_callback)(char *buffer,
//C                                           size_t size,
//C                                           size_t nitems,
//C                                           void *instream);

//C     typedef enum  {
//C       CURLSOCKTYPE_IPCXN, /** socket created for a specific IP connection */
//C       CURLSOCKTYPE_LAST   /** never use */
//C     } curlsocktype;

//C     typedef int (*curl_sockopt_callback)(void *clientp,
//C                                          curl_socket_t curlfd,
//C                                          curlsocktype purpose);

//C     #ifndef CURL_NO_OLDIES
  /** not used since 7.10.8, will be removed in a future release */
//C     typedef int (*curl_passwd_callback)(void *clientp,
//C                                         const char *prompt,
//C                                         char *buffer,
//C                                         int buflen);
//C     #endif

//C     typedef enum {
//C       CURLIOE_OK,            /** I/O operation successful */
//C       CURLIOE_UNKNOWNCMD,    /** command was unknown to callback */
//C       CURLIOE_FAILRESTART,   /** failed to restart the read */
//C       CURLIOE_LAST           /** never use */
//C     } curlioerr;

//C     typedef enum  {
//C       CURLIOCMD_NOP,         /** no operation */
//C       CURLIOCMD_RESTARTREAD, /** restart the read stream from start */
//C       CURLIOCMD_LAST         /** never use */
//C     } curliocmd;

//C     typedef curlioerr (*curl_ioctl_callback)(CURL *handle,
//C                                              int cmd,
//C                                              void *clientp);

/**
 * The following typedef's are signatures of malloc, free, realloc, strdup and
 * calloc respectively.  Function pointers of these types can be passed to the
 * curl_global_init_mem() function to set user defined memory management
 * callback routines.
 */
//C     typedef void *(*curl_malloc_callback)(size_t size);
//C     typedef void (*curl_free_callback)(void *ptr);
//C     typedef void *(*curl_realloc_callback)(void *ptr, size_t size);
//C     typedef char *(*curl_strdup_callback)(const char *str);
//C     typedef void *(*curl_calloc_callback)(size_t nmemb, size_t size);

/** the kind of data that is passed to information_callback*/
//C     typedef enum {
//C       CURLINFO_TEXT = 0,
//C       CURLINFO_HEADER_IN,    /** 1 */
//C       CURLINFO_HEADER_OUT,   /** 2 */
//C       CURLINFO_DATA_IN,      /** 3 */
//C       CURLINFO_DATA_OUT,     /** 4 */
//C       CURLINFO_SSL_DATA_IN,  /** 5 */
//C       CURLINFO_SSL_DATA_OUT, /** 6 */
//C       CURLINFO_END
//C     } curl_infotype;

//C     typedef int (*curl_debug_callback)
//C            (CURL *handle,      /** the handle/transfer this concerns */
//C             curl_infotype type, /** what kind of data */
//C             char *data,        /** points to the data */
//C             size_t size,       /** size of the data pointed to */
//C             void *userptr);    /** whatever the user please */

/** All possible error codes from all sorts of curl functions. Future versions
   may return other values, stay prepared.

   Always add new return codes last. Never *EVER* remove any. The return
   codes must remain the same!
 */

//C     typedef enum {
//C       CURLE_OK = 0,
//C       CURLE_UNSUPPORTED_PROTOCOL,    /** 1 */
//C       CURLE_FAILED_INIT,             /** 2 */
//C       CURLE_URL_MALFORMAT,           /** 3 */
//C       CURLE_URL_MALFORMAT_USER,      /** 4 - NOT USED */
//C       CURLE_COULDNT_RESOLVE_PROXY,   /** 5 */
//C       CURLE_COULDNT_RESOLVE_HOST,    /** 6 */
//C       CURLE_COULDNT_CONNECT,         /** 7 */
//C       CURLE_FTP_WEIRD_SERVER_REPLY,  /** 8 */
//C       CURLE_FTP_ACCESS_DENIED,       
/** 9 a service was denied by the FTP server
                                    due to lack of access - when login fails
                                    this is not returned. */
//C       CURLE_FTP_USER_PASSWORD_INCORRECT, /** 10 - NOT USED */
//C       CURLE_FTP_WEIRD_PASS_REPLY,    /** 11 */
//C       CURLE_FTP_WEIRD_USER_REPLY,    /** 12 */
//C       CURLE_FTP_WEIRD_PASV_REPLY,    /** 13 */
//C       CURLE_FTP_WEIRD_227_FORMAT,    /** 14 */
//C       CURLE_FTP_CANT_GET_HOST,       /** 15 */
//C       CURLE_FTP_CANT_RECONNECT,      /** 16 */
//C       CURLE_FTP_COULDNT_SET_BINARY,  /** 17 */
//C       CURLE_PARTIAL_FILE,            /** 18 */
//C       CURLE_FTP_COULDNT_RETR_FILE,   /** 19 */
//C       CURLE_FTP_WRITE_ERROR,         /** 20 */
//C       CURLE_FTP_QUOTE_ERROR,         /** 21 */
//C       CURLE_HTTP_RETURNED_ERROR,     /** 22 */
//C       CURLE_WRITE_ERROR,             /** 23 */
//C       CURLE_MALFORMAT_USER,          /** 24 - NOT USED */
//C       CURLE_FTP_COULDNT_STOR_FILE,   /** 25 - failed FTP upload */
//C       CURLE_READ_ERROR,              /** 26 - could open/read from file */
//C       CURLE_OUT_OF_MEMORY,           /** 27 */
  /** Note: CURLE_OUT_OF_MEMORY may sometimes indicate a conversion error
           instead of a memory allocation error if CURL_DOES_CONVERSIONS
           is defined
  */
//C       CURLE_OPERATION_TIMEOUTED,     /** 28 - the timeout time was reached */
//C       CURLE_FTP_COULDNT_SET_ASCII,   /** 29 - TYPE A failed */
//C       CURLE_FTP_PORT_FAILED,         /** 30 - FTP PORT operation failed */
//C       CURLE_FTP_COULDNT_USE_REST,    /** 31 - the REST command failed */
//C       CURLE_FTP_COULDNT_GET_SIZE,    /** 32 - the SIZE command failed */
//C       CURLE_HTTP_RANGE_ERROR,        /** 33 - RANGE "command" didn't work */
//C       CURLE_HTTP_POST_ERROR,         /** 34 */
//C       CURLE_SSL_CONNECT_ERROR,       /** 35 - wrong when connecting with SSL */
//C       CURLE_BAD_DOWNLOAD_RESUME,     /** 36 - couldn't resume download */
//C       CURLE_FILE_COULDNT_READ_FILE,  /** 37 */
//C       CURLE_LDAP_CANNOT_BIND,        /** 38 */
//C       CURLE_LDAP_SEARCH_FAILED,      /** 39 */
//C       CURLE_LIBRARY_NOT_FOUND,       /** 40 */
//C       CURLE_FUNCTION_NOT_FOUND,      /** 41 */
//C       CURLE_ABORTED_BY_CALLBACK,     /** 42 */
//C       CURLE_BAD_FUNCTION_ARGUMENT,   /** 43 */
//C       CURLE_BAD_CALLING_ORDER,       /** 44 - NOT USED */
//C       CURLE_INTERFACE_FAILED,        /** 45 - CURLOPT_INTERFACE failed */
//C       CURLE_BAD_PASSWORD_ENTERED,    /** 46 - NOT USED */
//C       CURLE_TOO_MANY_REDIRECTS ,     /** 47 - catch endless re-direct loops */
//C       CURLE_UNKNOWN_TELNET_OPTION,   /** 48 - User specified an unknown option */
//C       CURLE_TELNET_OPTION_SYNTAX ,   /** 49 - Malformed telnet option */
//C       CURLE_OBSOLETE,                /** 50 - NOT USED */
//C       CURLE_SSL_PEER_CERTIFICATE,    /** 51 - peer's certificate wasn't ok */
//C       CURLE_GOT_NOTHING,             /** 52 - when this is a specific error */
//C       CURLE_SSL_ENGINE_NOTFOUND,     /** 53 - SSL crypto engine not found */
//C       CURLE_SSL_ENGINE_SETFAILED,    
/** 54 - can not set SSL crypto engine as
                                    default */
//C       CURLE_SEND_ERROR,              /** 55 - failed sending network data */
//C       CURLE_RECV_ERROR,              /** 56 - failure in receiving network data */
//C       CURLE_SHARE_IN_USE,            /** 57 - share is in use */
//C       CURLE_SSL_CERTPROBLEM,         /** 58 - problem with the local certificate */
//C       CURLE_SSL_CIPHER,              /** 59 - couldn't use specified cipher */
//C       CURLE_SSL_CACERT,              /** 60 - problem with the CA cert (path?) */
//C       CURLE_BAD_CONTENT_ENCODING,    /** 61 - Unrecognized transfer encoding */
//C       CURLE_LDAP_INVALID_URL,        /** 62 - Invalid LDAP URL */
//C       CURLE_FILESIZE_EXCEEDED,       /** 63 - Maximum file size exceeded */
//C       CURLE_FTP_SSL_FAILED,          /** 64 - Requested FTP SSL level failed */
//C       CURLE_SEND_FAIL_REWIND,        
/** 65 - Sending the data requires a rewind
                                    that failed */
//C       CURLE_SSL_ENGINE_INITFAILED,   /** 66 - failed to initialise ENGINE */
//C       CURLE_LOGIN_DENIED,            
/** 67 - user, password or similar was not
                                    accepted and we failed to login */
//C       CURLE_TFTP_NOTFOUND,           /** 68 - file not found on server */
//C       CURLE_TFTP_PERM,               /** 69 - permission problem on server */
//C       CURLE_TFTP_DISKFULL,           /** 70 - out of disk space on server */
//C       CURLE_TFTP_ILLEGAL,            /** 71 - Illegal TFTP operation */
//C       CURLE_TFTP_UNKNOWNID,          /** 72 - Unknown transfer ID */
//C       CURLE_TFTP_EXISTS,             /** 73 - File already exists */
//C       CURLE_TFTP_NOSUCHUSER,         /** 74 - No such user */
//C       CURLE_CONV_FAILED,             /** 75 - conversion failed */
//C       CURLE_CONV_REQD,               
/** 76 - caller must register conversion
                                    callbacks using curl_easy_setopt options
                                    CURLOPT_CONV_FROM_NETWORK_FUNCTION,
                                    CURLOPT_CONV_TO_NETWORK_FUNCTION, and
                                    CURLOPT_CONV_FROM_UTF8_FUNCTION */
//C       CURLE_SSL_CACERT_BADFILE,      
/** 77 - could not load CACERT file, missing
                                    or wrong format */
//C       CURL_LAST /** never use! */
//C     } CURLcode;

/** This prototype applies to all conversion callbacks */
//C     typedef CURLcode (*curl_conv_callback)(char *buffer, size_t length);

//C     typedef CURLcode (*curl_ssl_ctx_callback)(CURL *curl,    /** easy handle */
//C                                               void *ssl_ctx, 
/** actually an
                                                            OpenSSL SSL_CTX */
//C                                               void *userptr);

/** Make a spelling correction for the operation timed-out define */
//C     #define CURLE_OPERATION_TIMEDOUT CURLE_OPERATION_TIMEOUTED

//C     #ifndef CURL_NO_OLDIES 
/** define this to test if your app builds with all
                          the obsolete stuff removed! */
/** backwards compatibility with older names */
//C     #define CURLE_HTTP_NOT_FOUND CURLE_HTTP_RETURNED_ERROR
//C     #define CURLE_HTTP_PORT_FAILED CURLE_INTERFACE_FAILED
//C     #endif

//C     typedef enum {
//C       CURLPROXY_HTTP = 0,
//C       CURLPROXY_SOCKS4 = 4,
//C       CURLPROXY_SOCKS5 = 5
//C     } curl_proxytype;

//C     #define CURLAUTH_NONE         0       /** nothing */
//C     #define CURLAUTH_BASIC        (1<<0)  /** Basic (default) */
//C     #define CURLAUTH_DIGEST       (1<<1)  /** Digest */
//C     #define CURLAUTH_GSSNEGOTIATE (1<<2)  /** GSS-Negotiate */
//C     #define CURLAUTH_NTLM         (1<<3)  /** NTLM */
//C     #define CURLAUTH_ANY ~0               /** all types set */
//C     #define CURLAUTH_ANYSAFE (~CURLAUTH_BASIC)



//C     #ifndef CURL_NO_OLDIES 
/** define this to test if your app builds with all
                          the obsolete stuff removed! */
/** this was the error code 50 in 7.7.3 and a few earlier versions, this
   is no longer used by libcurl but is instead #defined here only to not
   make programs break */
//C     #define CURLE_ALREADY_COMPLETE 99999

/** These are just to make older programs not break: */
//C     #define CURLE_FTP_PARTIAL_FILE CURLE_PARTIAL_FILE
//C     #define CURLE_FTP_BAD_DOWNLOAD_RESUME CURLE_BAD_DOWNLOAD_RESUME
//C     #endif

//C     #define CURL_ERROR_SIZE 256

/** parameter for the CURLOPT_FTP_SSL option */
//C     typedef enum {
//C       CURLFTPSSL_NONE,    /** do not attempt to use SSL */
//C       CURLFTPSSL_TRY,     /** try using SSL, proceed anyway otherwise */
//C       CURLFTPSSL_CONTROL, /** SSL for the control connection or fail */
//C       CURLFTPSSL_ALL,     /** SSL for all communication or fail */
//C       CURLFTPSSL_LAST     /** not an option, never use */
//C     } curl_ftpssl;

/** parameter for the CURLOPT_FTPSSLAUTH option */
//C     typedef enum {
//C       CURLFTPAUTH_DEFAULT, /** let libcurl decide */
//C       CURLFTPAUTH_SSL,     /** use "AUTH SSL" */
//C       CURLFTPAUTH_TLS,     /** use "AUTH TLS" */
//C       CURLFTPAUTH_LAST /** not an option, never use */
//C     } curl_ftpauth;

/** parameter for the CURLOPT_FTP_FILEMETHOD option */
//C     typedef enum {
//C       CURLFTPMETHOD_DEFAULT,   /** let libcurl pick */
//C       CURLFTPMETHOD_MULTICWD,  /** single CWD operation for each path part */
//C       CURLFTPMETHOD_NOCWD,     /** no CWD at all */
//C       CURLFTPMETHOD_SINGLECWD, /** one CWD to full dir, then work on file */
//C       CURLFTPMETHOD_LAST       /** not an option, never use */
//C     } curl_ftpmethod;

/** long may be 32 or 64 bits, but we should never depend on anything else
   but 32 */
//C     #define CURLOPTTYPE_LONG          0
//C     #define CURLOPTTYPE_OBJECTPOINT   10000
//C     #define CURLOPTTYPE_FUNCTIONPOINT 20000
//C     #define CURLOPTTYPE_OFF_T         30000

/** name is uppercase CURLOPT_<name>,
   type is one of the defined CURLOPTTYPE_<type>
   number is unique identifier */
//C     #ifdef CINIT
//C     #undef CINIT
//C     #endif
/**
 * Figure out if we can use the ## operator, which is supported by ISO/ANSI C
 * and C++. Some compilers support it without setting __STDC__ or __cplusplus
 * so we need to carefully check for them too. We don't use configure-checks
 * for these since we want these headers to remain generic and working for all
 * platforms.
 */
//C     #if defined(__STDC__) || defined(_MSC_VER) || defined(__cplusplus) ||   defined(__HP_aCC) || defined(__BORLANDC__) || defined(__LCC__) ||   defined(__POCC__) || defined(__SALFORDC__) || defined(__HIGHC__)
  /** This compiler is believed to have an ISO compatible preprocessor */
//C     #define CURL_ISOCPP
//C     #else
  /** This compiler is believed NOT to have an ISO compatible preprocessor */
//C     #undef CURL_ISOCPP
//C     #endif

//C     #ifdef CURL_ISOCPP
//C     #define CINIT(name,type,number) CURLOPT_ ## name = CURLOPTTYPE_ ## type + number
//C     #else
/** The macro "##" is ISO C, we assume pre-ISO C doesn't support it. */
//C     #define LONG          CURLOPTTYPE_LONG
//C     #define OBJECTPOINT   CURLOPTTYPE_OBJECTPOINT
//C     #define FUNCTIONPOINT CURLOPTTYPE_FUNCTIONPOINT
//C     #define OFF_T         CURLOPTTYPE_OFF_T
//C     #define CINIT(name,type,number) CURLOPT_/***/name = type + number
//C     #endif

/**
 * This macro-mania below setups the CURLOPT_[what] enum, to be used with
 * curl_easy_setopt(). The first argument in the CINIT() macro is the [what]
 * word.
 */

//C     typedef enum {
  /** This is the FILE * or void * the regular output should be written to. */
//C       CINIT(FILE, OBJECTPOINT, 1),

  /** The full URL to get/put */
//C       CINIT(URL,  OBJECTPOINT, 2),

  /** Port number to connect to, if other than default. */
//C       CINIT(PORT, LONG, 3),

  /** Name of proxy to use. */
//C       CINIT(PROXY, OBJECTPOINT, 4),

  /** "name:password" to use when fetching. */
//C       CINIT(USERPWD, OBJECTPOINT, 5),

  /** "name:password" to use with proxy. */
//C       CINIT(PROXYUSERPWD, OBJECTPOINT, 6),

  /** Range to get, specified as an ASCII string. */
//C       CINIT(RANGE, OBJECTPOINT, 7),

  /** not used */

  /** Specified file stream to upload from (use as input): */
//C       CINIT(INFILE, OBJECTPOINT, 9),

  /** Buffer to receive error messages in, must be at least CURL_ERROR_SIZE
   * bytes big. If this is not used, error messages go to stderr instead: */
//C       CINIT(ERRORBUFFER, OBJECTPOINT, 10),

  /** Function that will be called to store the output (instead of fwrite). The
   * parameters will use fwrite() syntax, make sure to follow them. */
//C       CINIT(WRITEFUNCTION, FUNCTIONPOINT, 11),

  /** Function that will be called to read the input (instead of fread). The
   * parameters will use fread() syntax, make sure to follow them. */
//C       CINIT(READFUNCTION, FUNCTIONPOINT, 12),

  /** Time-out the read operation after this amount of seconds */
//C       CINIT(TIMEOUT, LONG, 13),

  /** If the CURLOPT_INFILE is used, this can be used to inform libcurl about
   * how large the file being sent really is. That allows better error
   * checking and better verifies that the upload was succcessful. -1 means
   * unknown size.
   *
   * For large file support, there is also a _LARGE version of the key
   * which takes an off_t type, allowing platforms with larger off_t
   * sizes to handle larger files.  See below for INFILESIZE_LARGE.
   */
//C       CINIT(INFILESIZE, LONG, 14),

  /** POST input fields. */
//C       CINIT(POSTFIELDS, OBJECTPOINT, 15),

  /** Set the referer page (needed by some CGIs) */
//C       CINIT(REFERER, OBJECTPOINT, 16),

  /** Set the FTP PORT string (interface name, named or numerical IP address)
     Use i.e '-' to use default address. */
//C       CINIT(FTPPORT, OBJECTPOINT, 17),

  /** Set the User-Agent string (examined by some CGIs) */
//C       CINIT(USERAGENT, OBJECTPOINT, 18),

  /** If the download receives less than "low speed limit" bytes/second
   * during "low speed time" seconds, the operations is aborted.
   * You could i.e if you have a pretty high speed connection, abort if
   * it is less than 2000 bytes/sec during 20 seconds.
   */

  /** Set the "low speed limit" */
//C       CINIT(LOW_SPEED_LIMIT, LONG , 19),

  /** Set the "low speed time" */
//C       CINIT(LOW_SPEED_TIME, LONG, 20),

  /** Set the continuation offset.
   *
   * Note there is also a _LARGE version of this key which uses
   * off_t types, allowing for large file offsets on platforms which
   * use larger-than-32-bit off_t's.  Look below for RESUME_FROM_LARGE.
   */
//C       CINIT(RESUME_FROM, LONG, 21),

  /** Set cookie in request: */
//C       CINIT(COOKIE, OBJECTPOINT, 22),

  /** This points to a linked list of headers, struct curl_slist kind */
//C       CINIT(HTTPHEADER, OBJECTPOINT, 23),

  /** This points to a linked list of post entries, struct HttpPost */
//C       CINIT(HTTPPOST, OBJECTPOINT, 24),

  /** name of the file keeping your private SSL-certificate */
//C       CINIT(SSLCERT, OBJECTPOINT, 25),

  /** password for the SSL-private key, keep this for compatibility */
//C       CINIT(SSLCERTPASSWD, OBJECTPOINT, 26),
  /** password for the SSL private key */
//C       CINIT(SSLKEYPASSWD, OBJECTPOINT, 26),

  /** send TYPE parameter? */
//C       CINIT(CRLF, LONG, 27),

  /** send linked-list of QUOTE commands */
//C       CINIT(QUOTE, OBJECTPOINT, 28),

  /** send FILE * or void * to store headers to, if you use a callback it
     is simply passed to the callback unmodified */
//C       CINIT(WRITEHEADER, OBJECTPOINT, 29),

  /** point to a file to read the initial cookies from, also enables
     "cookie awareness" */
//C       CINIT(COOKIEFILE, OBJECTPOINT, 31),

  /** What version to specifly try to use.
     See CURL_SSLVERSION defines below. */
//C       CINIT(SSLVERSION, LONG, 32),

  /** What kind of HTTP time condition to use, see defines */
//C       CINIT(TIMECONDITION, LONG, 33),

  /** Time to use with the above condition. Specified in number of seconds
     since 1 Jan 1970 */
//C       CINIT(TIMEVALUE, LONG, 34),

  /** 35 = OBSOLETE */

  /** Custom request, for customizing the get command like
     HTTP: DELETE, TRACE and others
     FTP: to use a different list command
     */
//C       CINIT(CUSTOMREQUEST, OBJECTPOINT, 36),

  /** HTTP request, for odd commands like DELETE, TRACE and others */
//C       CINIT(STDERR, OBJECTPOINT, 37),

  /** 38 is not used */

  /** send linked-list of post-transfer QUOTE commands */
//C       CINIT(POSTQUOTE, OBJECTPOINT, 39),

  /** Pass a pointer to string of the output using full variable-replacement
     as described elsewhere. */
//C       CINIT(WRITEINFO, OBJECTPOINT, 40),

//C       CINIT(VERBOSE, LONG, 41),      /** talk a lot */
//C       CINIT(HEADER, LONG, 42),       /** throw the header out too */
//C       CINIT(NOPROGRESS, LONG, 43),   /** shut off the progress meter */
//C       CINIT(NOBODY, LONG, 44),       /** use HEAD to get http document */
//C       CINIT(FAILONERROR, LONG, 45),  /** no output on http error codes >= 300 */
//C       CINIT(UPLOAD, LONG, 46),       /** this is an upload */
//C       CINIT(POST, LONG, 47),         /** HTTP POST method */
//C       CINIT(FTPLISTONLY, LONG, 48),  /** Use NLST when listing ftp dir */

//C       CINIT(FTPAPPEND, LONG, 50),    /** Append instead of overwrite on upload! */

  /** Specify whether to read the user+password from the .netrc or the URL.
   * This must be one of the CURL_NETRC_* enums below. */
//C       CINIT(NETRC, LONG, 51),

//C       CINIT(FOLLOWLOCATION, LONG, 52),  /** use Location: Luke! */

//C       CINIT(TRANSFERTEXT, LONG, 53), /** transfer data in text/ASCII format */
//C       CINIT(PUT, LONG, 54),          /** HTTP PUT */

  /** 55 = OBSOLETE */

  /** Function that will be called instead of the internal progress display
   * function. This function should be defined as the curl_progress_callback
   * prototype defines. */
//C       CINIT(PROGRESSFUNCTION, FUNCTIONPOINT, 56),

  /** Data passed to the progress callback */
//C       CINIT(PROGRESSDATA, OBJECTPOINT, 57),

  /** We want the referer field set automatically when following locations */
//C       CINIT(AUTOREFERER, LONG, 58),

  /** Port of the proxy, can be set in the proxy string as well with:
     "[host]:[port]" */
//C       CINIT(PROXYPORT, LONG, 59),

  /** size of the POST input data, if strlen() is not good to use */
//C       CINIT(POSTFIELDSIZE, LONG, 60),

  /** tunnel non-http operations through a HTTP proxy */
//C       CINIT(HTTPPROXYTUNNEL, LONG, 61),

  /** Set the interface string to use as outgoing network interface */
//C       CINIT(INTERFACE, OBJECTPOINT, 62),

  /** Set the krb4 security level, this also enables krb4 awareness.  This is a
   * string, 'clear', 'safe', 'confidential' or 'private'.  If the string is
   * set but doesn't match one of these, 'private' will be used.  */
//C       CINIT(KRB4LEVEL, OBJECTPOINT, 63),

  /** Set if we should verify the peer in ssl handshake, set 1 to verify. */
//C       CINIT(SSL_VERIFYPEER, LONG, 64),

  /** The CApath or CAfile used to validate the peer certificate
     this option is used only if SSL_VERIFYPEER is true */
//C       CINIT(CAINFO, OBJECTPOINT, 65),

  /** 66 = OBSOLETE */
  /** 67 = OBSOLETE */

  /** Maximum number of http redirects to follow */
//C       CINIT(MAXREDIRS, LONG, 68),

  /** Pass a long set to 1 to get the date of the requested document (if
     possible)! Pass a zero to shut it off. */
//C       CINIT(FILETIME, LONG, 69),

  /** This points to a linked list of telnet options */
//C       CINIT(TELNETOPTIONS, OBJECTPOINT, 70),

  /** Max amount of cached alive connections */
//C       CINIT(MAXCONNECTS, LONG, 71),

  /** What policy to use when closing connections when the cache is filled
     up */
//C       CINIT(CLOSEPOLICY, LONG, 72),

  /** 73 = OBSOLETE */

  /** Set to explicitly use a new connection for the upcoming transfer.
     Do not use this unless you're absolutely sure of this, as it makes the
     operation slower and is less friendly for the network. */
//C       CINIT(FRESH_CONNECT, LONG, 74),

  /** Set to explicitly forbid the upcoming transfer's connection to be re-used
     when done. Do not use this unless you're absolutely sure of this, as it
     makes the operation slower and is less friendly for the network. */
//C       CINIT(FORBID_REUSE, LONG, 75),

  /** Set to a file name that contains random data for libcurl to use to
     seed the random engine when doing SSL connects. */
//C       CINIT(RANDOM_FILE, OBJECTPOINT, 76),

  /** Set to the Entropy Gathering Daemon socket pathname */
//C       CINIT(EGDSOCKET, OBJECTPOINT, 77),

  /** Time-out connect operations after this amount of seconds, if connects
     are OK within this time, then fine... This only aborts the connect
     phase. [Only works on unix-style/SIGALRM operating systems] */
//C       CINIT(CONNECTTIMEOUT, LONG, 78),

  /** Function that will be called to store headers (instead of fwrite). The
   * parameters will use fwrite() syntax, make sure to follow them. */
//C       CINIT(HEADERFUNCTION, FUNCTIONPOINT, 79),

  /** Set this to force the HTTP request to get back to GET. Only really usable
     if POST, PUT or a custom request have been used first.
   */
//C       CINIT(HTTPGET, LONG, 80),

  /** Set if we should verify the Common name from the peer certificate in ssl
   * handshake, set 1 to check existence, 2 to ensure that it matches the
   * provided hostname. */
//C       CINIT(SSL_VERIFYHOST, LONG, 81),

  /** Specify which file name to write all known cookies in after completed
     operation. Set file name to "-" (dash) to make it go to stdout. */
//C       CINIT(COOKIEJAR, OBJECTPOINT, 82),

  /** Specify which SSL ciphers to use */
//C       CINIT(SSL_CIPHER_LIST, OBJECTPOINT, 83),

  /** Specify which HTTP version to use! This must be set to one of the
     CURL_HTTP_VERSION* enums set below. */
//C       CINIT(HTTP_VERSION, LONG, 84),

  /** Specificly switch on or off the FTP engine's use of the EPSV command. By
     default, that one will always be attempted before the more traditional
     PASV command. */
//C       CINIT(FTP_USE_EPSV, LONG, 85),

  /** type of the file keeping your SSL-certificate ("DER", "PEM", "ENG") */
//C       CINIT(SSLCERTTYPE, OBJECTPOINT, 86),

  /** name of the file keeping your private SSL-key */
//C       CINIT(SSLKEY, OBJECTPOINT, 87),

  /** type of the file keeping your private SSL-key ("DER", "PEM", "ENG") */
//C       CINIT(SSLKEYTYPE, OBJECTPOINT, 88),

  /** crypto engine for the SSL-sub system */
//C       CINIT(SSLENGINE, OBJECTPOINT, 89),

  /** set the crypto engine for the SSL-sub system as default
     the param has no meaning...
   */
//C       CINIT(SSLENGINE_DEFAULT, LONG, 90),

  /** Non-zero value means to use the global dns cache */
//C       CINIT(DNS_USE_GLOBAL_CACHE, LONG, 91), /** To becomeO BSOLETE soon */

  /** DNS cache timeout */
//C       CINIT(DNS_CACHE_TIMEOUT, LONG, 92),

  /** send linked-list of pre-transfer QUOTE commands (Wesley Laxton)*/
//C       CINIT(PREQUOTE, OBJECTPOINT, 93),

  /** set the debug function */
//C       CINIT(DEBUGFUNCTION, FUNCTIONPOINT, 94),

  /** set the data for the debug function */
//C       CINIT(DEBUGDATA, OBJECTPOINT, 95),

  /** mark this as start of a cookie session */
//C       CINIT(COOKIESESSION, LONG, 96),

  /** The CApath directory used to validate the peer certificate
     this option is used only if SSL_VERIFYPEER is true */
//C       CINIT(CAPATH, OBJECTPOINT, 97),

  /** Instruct libcurl to use a smaller receive buffer */
//C       CINIT(BUFFERSIZE, LONG, 98),

  /** Instruct libcurl to not use any signal/alarm handlers, even when using
     timeouts. This option is useful for multi-threaded applications.
     See libcurl-the-guide for more background information. */
//C       CINIT(NOSIGNAL, LONG, 99),

  /** Provide a CURLShare for mutexing non-ts data */
//C       CINIT(SHARE, OBJECTPOINT, 100),

  /** indicates type of proxy. accepted values are CURLPROXY_HTTP (default),
     CURLPROXY_SOCKS4 and CURLPROXY_SOCKS5. */
//C       CINIT(PROXYTYPE, LONG, 101),

  /** Set the Accept-Encoding string. Use this to tell a server you would like
     the response to be compressed. */
//C       CINIT(ENCODING, OBJECTPOINT, 102),

  /** Set pointer to private data */
//C       CINIT(PRIVATE, OBJECTPOINT, 103),

  /** Set aliases for HTTP 200 in the HTTP Response header */
//C       CINIT(HTTP200ALIASES, OBJECTPOINT, 104),

  /** Continue to send authentication (user+password) when following locations,
     even when hostname changed. This can potentionally send off the name
     and password to whatever host the server decides. */
//C       CINIT(UNRESTRICTED_AUTH, LONG, 105),

  /** Specificly switch on or off the FTP engine's use of the EPRT command ( it
     also disables the LPRT attempt). By default, those ones will always be
     attempted before the good old traditional PORT command. */
//C       CINIT(FTP_USE_EPRT, LONG, 106),

  /** Set this to a bitmask value to enable the particular authentications
     methods you like. Use this in combination with CURLOPT_USERPWD.
     Note that setting multiple bits may cause extra network round-trips. */
//C       CINIT(HTTPAUTH, LONG, 107),

  /** Set the ssl context callback function, currently only for OpenSSL ssl_ctx
     in second argument. The function must be matching the
     curl_ssl_ctx_callback proto. */
//C       CINIT(SSL_CTX_FUNCTION, FUNCTIONPOINT, 108),

  /** Set the userdata for the ssl context callback function's third
     argument */
//C       CINIT(SSL_CTX_DATA, OBJECTPOINT, 109),

  /** FTP Option that causes missing dirs to be created on the remote server */
//C       CINIT(FTP_CREATE_MISSING_DIRS, LONG, 110),

  /** Set this to a bitmask value to enable the particular authentications
     methods you like. Use this in combination with CURLOPT_PROXYUSERPWD.
     Note that setting multiple bits may cause extra network round-trips. */
//C       CINIT(PROXYAUTH, LONG, 111),

  /** FTP option that changes the timeout, in seconds, associated with
     getting a response.  This is different from transfer timeout time and
     essentially places a demand on the FTP server to acknowledge commands
     in a timely manner. */
//C       CINIT(FTP_RESPONSE_TIMEOUT, LONG , 112),

  /** Set this option to one of the CURL_IPRESOLVE_* defines (see below) to
     tell libcurl to resolve names to those IP versions only. This only has
     affect on systems with support for more than one, i.e IPv4 _and_ IPv6. */
//C       CINIT(IPRESOLVE, LONG, 113),

  /** Set this option to limit the size of a file that will be downloaded from
     an HTTP or FTP server.

     Note there is also _LARGE version which adds large file support for
     platforms which have larger off_t sizes.  See MAXFILESIZE_LARGE below. */
//C       CINIT(MAXFILESIZE, LONG, 114),

  /** See the comment for INFILESIZE above, but in short, specifies
   * the size of the file being uploaded.  -1 means unknown.
   */
//C       CINIT(INFILESIZE_LARGE, OFF_T, 115),

  /** Sets the continuation offset.  There is also a LONG version of this;
   * look above for RESUME_FROM.
   */
//C       CINIT(RESUME_FROM_LARGE, OFF_T, 116),

  /** Sets the maximum size of data that will be downloaded from
   * an HTTP or FTP server.  See MAXFILESIZE above for the LONG version.
   */
//C       CINIT(MAXFILESIZE_LARGE, OFF_T, 117),

  /** Set this option to the file name of your .netrc file you want libcurl
     to parse (using the CURLOPT_NETRC option). If not set, libcurl will do
     a poor attempt to find the user's home directory and check for a .netrc
     file in there. */
//C       CINIT(NETRC_FILE, OBJECTPOINT, 118),

  /** Enable SSL/TLS for FTP, pick one of:
     CURLFTPSSL_TRY     - try using SSL, proceed anyway otherwise
     CURLFTPSSL_CONTROL - SSL for the control connection or fail
     CURLFTPSSL_ALL     - SSL for all communication or fail
  */
//C       CINIT(FTP_SSL, LONG, 119),

  /** The _LARGE version of the standard POSTFIELDSIZE option */
//C       CINIT(POSTFIELDSIZE_LARGE, OFF_T, 120),

  /** Enable/disable the TCP Nagle algorithm */
//C       CINIT(TCP_NODELAY, LONG, 121),

  /** 122 OBSOLETE, used in 7.12.3. Gone in 7.13.0 */
  /** 123 OBSOLETE. Gone in 7.16.0 */
  /** 124 OBSOLETE, used in 7.12.3. Gone in 7.13.0 */
  /** 125 OBSOLETE, used in 7.12.3. Gone in 7.13.0 */
  /** 126 OBSOLETE, used in 7.12.3. Gone in 7.13.0 */
  /** 127 OBSOLETE. Gone in 7.16.0 */
  /** 128 OBSOLETE. Gone in 7.16.0 */

  /** When FTP over SSL/TLS is selected (with CURLOPT_FTP_SSL), this option
     can be used to change libcurl's default action which is to first try
     "AUTH SSL" and then "AUTH TLS" in this order, and proceed when a OK
     response has been received.

     Available parameters are:
     CURLFTPAUTH_DEFAULT - let libcurl decide
     CURLFTPAUTH_SSL     - try "AUTH SSL" first, then TLS
     CURLFTPAUTH_TLS     - try "AUTH TLS" first, then SSL
  */
//C       CINIT(FTPSSLAUTH, LONG, 129),

//C       CINIT(IOCTLFUNCTION, FUNCTIONPOINT, 130),
//C       CINIT(IOCTLDATA, OBJECTPOINT, 131),

  /** 132 OBSOLETE. Gone in 7.16.0 */
  /** 133 OBSOLETE. Gone in 7.16.0 */

  /** zero terminated string for pass on to the FTP server when asked for
     "account" info */
//C       CINIT(FTP_ACCOUNT, OBJECTPOINT, 134),

  /** feed cookies into cookie engine */
//C       CINIT(COOKIELIST, OBJECTPOINT, 135),

  /** ignore Content-Length */
//C       CINIT(IGNORE_CONTENT_LENGTH, LONG, 136),

  /** Set to non-zero to skip the IP address received in a 227 PASV FTP server
     response. Typically used for FTP-SSL purposes but is not restricted to
     that. libcurl will then instead use the same IP address it used for the
     control connection. */
//C       CINIT(FTP_SKIP_PASV_IP, LONG, 137),

  /** Select "file method" to use when doing FTP, see the curl_ftpmethod
     above. */
//C       CINIT(FTP_FILEMETHOD, LONG, 138),

  /** Local port number to bind the socket to */
//C       CINIT(LOCALPORT, LONG, 139),

  /** Number of ports to try, including the first one set with LOCALPORT.
     Thus, setting it to 1 will make no additional attempts but the first.
  */
//C       CINIT(LOCALPORTRANGE, LONG, 140),

  /** no transfer, set up connection and let application use the socket by
     extracting it with CURLINFO_LASTSOCKET */
//C       CINIT(CONNECT_ONLY, LONG, 141),

  /** Function that will be called to convert from the
     network encoding (instead of using the iconv calls in libcurl) */
//C       CINIT(CONV_FROM_NETWORK_FUNCTION, FUNCTIONPOINT, 142),

  /** Function that will be called to convert to the
     network encoding (instead of using the iconv calls in libcurl) */
//C       CINIT(CONV_TO_NETWORK_FUNCTION, FUNCTIONPOINT, 143),

  /** Function that will be called to convert from UTF8
     (instead of using the iconv calls in libcurl)
     Note that this is used only for SSL certificate processing */
//C       CINIT(CONV_FROM_UTF8_FUNCTION, FUNCTIONPOINT, 144),

  /** if the connection proceeds too quickly then need to slow it down */
  /** limit-rate: maximum number of bytes per second to send or receive */
//C       CINIT(MAX_SEND_SPEED_LARGE, OFF_T, 145),
//C       CINIT(MAX_RECV_SPEED_LARGE, OFF_T, 146),

  /** Pointer to command string to send if USER/PASS fails. */
//C       CINIT(FTP_ALTERNATIVE_TO_USER, OBJECTPOINT, 147),

  /** callback function for setting socket options */
//C       CINIT(SOCKOPTFUNCTION, FUNCTIONPOINT, 148),
//C       CINIT(SOCKOPTDATA, OBJECTPOINT, 149),

  /** set to 0 to disable session ID re-use for this transfer, default is
     enabled (== 1) */
//C       CINIT(SSL_SESSIONID_CACHE, LONG, 150),

//C       CURLOPT_LASTENTRY /** the last unused */
//C     } CURLoption;

  /** Below here follows defines for the CURLOPT_IPRESOLVE option. If a host
     name resolves addresses using more than one IP protocol version, this
     option might be handy to force libcurl to use a specific IP version. */
//C     #define CURL_IPRESOLVE_WHATEVER 0 
/** default, resolves addresses to all IP
                                     versions that your system allows */
//C     #define CURL_IPRESOLVE_V4       1 /** resolve to ipv4 addresses */
//C     #define CURL_IPRESOLVE_V6       2 /** resolve to ipv6 addresses */

  /** three convenient "aliases" that follow the name scheme better */
//C     #define CURLOPT_WRITEDATA CURLOPT_FILE
//C     #define CURLOPT_READDATA  CURLOPT_INFILE
//C     #define CURLOPT_HEADERDATA CURLOPT_WRITEHEADER

//C     #ifndef CURL_NO_OLDIES 
/** define this to test if your app builds with all
                          the obsolete stuff removed! */
//C     #else
/** This is set if CURL_NO_OLDIES is defined at compile-time */
//C     #undef CURLOPT_DNS_USE_GLOBAL_CACHE /** soon obsolete */
//C     #endif


  /** These enums are for use with the CURLOPT_HTTP_VERSION option. */
//C     enum {
//C       CURL_HTTP_VERSION_NONE, 
/** setting this means we don't care, and that we'd
                             like the library to choose the best possible
                             for us! */
//C       CURL_HTTP_VERSION_1_0,  /** please use HTTP 1.0 in the request */
//C       CURL_HTTP_VERSION_1_1,  /** please use HTTP 1.1 in the request */

//C       CURL_HTTP_VERSION_LAST /** *ILLEGAL* http version */
//C     };

  /** These enums are for use with the CURLOPT_NETRC option. */
//C     enum CURL_NETRC_OPTION {
//C       CURL_NETRC_IGNORED,     
/** The .netrc will never be read.
                           * This is the default. */
//C       CURL_NETRC_OPTIONAL,    
/** A user:password in the URL will be preferred
                           * to one in the .netrc. */
//C       CURL_NETRC_REQUIRED,    
/** A user:password in the URL will be ignored.
                           * Unless one is set programmatically, the .netrc
                           * will be queried. */
//C       CURL_NETRC_LAST
//C     };

//C     enum {
//C       CURL_SSLVERSION_DEFAULT,
//C       CURL_SSLVERSION_TLSv1,
//C       CURL_SSLVERSION_SSLv2,
//C       CURL_SSLVERSION_SSLv3,

//C       CURL_SSLVERSION_LAST /** never use, keep last */
//C     };


//C     typedef enum {
//C       CURL_TIMECOND_NONE,

//C       CURL_TIMECOND_IFMODSINCE,
//C       CURL_TIMECOND_IFUNMODSINCE,
//C       CURL_TIMECOND_LASTMOD,

//C       CURL_TIMECOND_LAST
//C     } curl_TimeCond;

//C     #ifdef __BEOS__
//C     #include <support/SupportDefs.h>
//C     #endif


/** curl_strequal() and curl_strnequal() are subject for removal in a future
   libcurl, see lib/README.curlx for details */
//C     CURL_EXTERN int (curl_strequal)(const char *s1, const char *s2);
//C     CURL_EXTERN int (curl_strnequal)(const char *s1, const char *s2, size_t n);

/** name is uppercase CURLFORM_<name> */
//C     #ifdef CFINIT
//C     #undef CFINIT
//C     #endif

//C     #ifdef CURL_ISOCPP
//C     #define CFINIT(name) CURLFORM_ ## name
//C     #else
/** The macro "##" is ISO C, we assume pre-ISO C doesn't support it. */
//C     #define CFINIT(name) CURLFORM_/***/name
//C     #endif

//C     typedef enum {
//C       CFINIT(NOTHING),        /********** the first one is unused ************/

  /**  */
//C       CFINIT(COPYNAME),
//C       CFINIT(PTRNAME),
//C       CFINIT(NAMELENGTH),
//C       CFINIT(COPYCONTENTS),
//C       CFINIT(PTRCONTENTS),
//C       CFINIT(CONTENTSLENGTH),
//C       CFINIT(FILECONTENT),
//C       CFINIT(ARRAY),
//C       CFINIT(OBSOLETE),
//C       CFINIT(FILE),

//C       CFINIT(BUFFER),
//C       CFINIT(BUFFERPTR),
//C       CFINIT(BUFFERLENGTH),

//C       CFINIT(CONTENTTYPE),
//C       CFINIT(CONTENTHEADER),
//C       CFINIT(FILENAME),
//C       CFINIT(END),
//C       CFINIT(OBSOLETE2),

//C       CURLFORM_LASTENTRY /** the last unusued */
//C     } CURLformoption;

//C     #undef CFINIT /** done */

/** structure to be used as parameter for CURLFORM_ARRAY */
//C     struct curl_forms {
//C       CURLformoption option;
//C       const char     *value;
//C     };

/** use this for multipart formpost building */
/** Returns code for curl_formadd()
 *
 * Returns:
 * CURL_FORMADD_OK             on success
 * CURL_FORMADD_MEMORY         if the FormInfo allocation fails
 * CURL_FORMADD_OPTION_TWICE   if one option is given twice for one Form
 * CURL_FORMADD_NULL           if a null pointer was given for a char
 * CURL_FORMADD_MEMORY         if the allocation of a FormInfo struct failed
 * CURL_FORMADD_UNKNOWN_OPTION if an unknown option was used
 * CURL_FORMADD_INCOMPLETE     if the some FormInfo is not complete (or error)
 * CURL_FORMADD_MEMORY         if a HttpPost struct cannot be allocated
 * CURL_FORMADD_MEMORY         if some allocation for string copying failed.
 * CURL_FORMADD_ILLEGAL_ARRAY  if an illegal option is used in an array
 *
 ***************************************************************************/
//C     typedef enum {
//C       CURL_FORMADD_OK, /** first, no error */

//C       CURL_FORMADD_MEMORY,
//C       CURL_FORMADD_OPTION_TWICE,
//C       CURL_FORMADD_NULL,
//C       CURL_FORMADD_UNKNOWN_OPTION,
//C       CURL_FORMADD_INCOMPLETE,
//C       CURL_FORMADD_ILLEGAL_ARRAY,
//C       CURL_FORMADD_DISABLED, /** libcurl was built with this disabled */

//C       CURL_FORMADD_LAST /** last */
//C     } CURLFORMcode;

/**
 * NAME curl_formadd()
 *
 * DESCRIPTION
 *
 * Pretty advanved function for building multi-part formposts. Each invoke
 * adds one part that together construct a full post. Then use
 * CURLOPT_HTTPPOST to send it off to libcurl.
 */
//C     CURL_EXTERN CURLFORMcode curl_formadd(struct curl_httppost **httppost,
//C                                           struct curl_httppost **last_post,
//C                                           ...);

/**
 * callback function for curl_formget()
 * The void *arg pointer will be the one passed as second argument to curl_formget().
 * The character buffer passed to it must not be freed.
 * Should return the buffer length passed to it as the argument "len" on success.
 */
//C     typedef size_t (*curl_formget_callback)(void *arg, const char *buf, size_t len);

/**
 * NAME curl_formget()
 *
 * DESCRIPTION
 *
 * Serialize a curl_httppost struct built with curl_formadd().
 * Accepts a void pointer as second argument which will be passed to
 * the curl_formget_callback function.
 * Returns 0 on success.
 */
//C     CURL_EXTERN int curl_formget(struct curl_httppost *form, void *arg,
//C                                  curl_formget_callback append);
/**
 * NAME curl_formfree()
 *
 * DESCRIPTION
 *
 * Free a multipart formpost previously built with curl_formadd().
 */
//C     CURL_EXTERN void curl_formfree(struct curl_httppost *form);

/**
 * NAME curl_getenv()
 *
 * DESCRIPTION
 *
 * Returns a malloc()'ed string that MUST be curl_free()ed after usage is
 * complete. DEPRECATED - see lib/README.curlx
 */
//C     CURL_EXTERN char *curl_getenv(const char *variable);

/**
 * NAME curl_version()
 *
 * DESCRIPTION
 *
 * Returns a static ascii string of the libcurl version.
 */
//C     CURL_EXTERN char *curl_version(void);

/**
 * NAME curl_easy_escape()
 *
 * DESCRIPTION
 *
 * Escapes URL strings (converts all letters consider illegal in URLs to their
 * %XX versions). This function returns a new allocated string or NULL if an
 * error occurred.
 */
//C     CURL_EXTERN char *curl_easy_escape(CURL *handle,
//C                                        const char *string,
//C                                        int length);

/** the previous version: */
//C     CURL_EXTERN char *curl_escape(const char *string,
//C                                   int length);


/**
 * NAME curl_easy_unescape()
 *
 * DESCRIPTION
 *
 * Unescapes URL encoding in strings (converts all %XX codes to their 8bit
 * versions). This function returns a new allocated string or NULL if an error
 * occurred.
 * Conversion Note: On non-ASCII platforms the ASCII %XX codes are
 * converted into the host encoding.
 */
//C     CURL_EXTERN char *curl_easy_unescape(CURL *handle,
//C                                          const char *string,
//C                                          int length,
//C                                          int *outlength);

/** the previous version */
//C     CURL_EXTERN char *curl_unescape(const char *string,
//C                                     int length);

/**
 * NAME curl_free()
 *
 * DESCRIPTION
 *
 * Provided for de-allocation in the same translation unit that did the
 * allocation. Added in libcurl 7.10
 */
//C     CURL_EXTERN void curl_free(void *p);

/**
 * NAME curl_global_init()
 *
 * DESCRIPTION
 *
 * curl_global_init() should be invoked exactly once for each application that
 * uses libcurl
 */
//C     CURL_EXTERN CURLcode curl_global_init(long flags);

/**
 * NAME curl_global_init_mem()
 *
 * DESCRIPTION
 *
 * curl_global_init() or curl_global_init_mem() should be invoked exactly once
 * for each application that uses libcurl.  This function can be used to
 * initialize libcurl and set user defined memory management callback
 * functions.  Users can implement memory management routines to check for
 * memory leaks, check for mis-use of the curl library etc.  User registered
 * callback routines with be invoked by this library instead of the system
 * memory management routines like malloc, free etc.
 */
//C     CURL_EXTERN CURLcode curl_global_init_mem(long flags,
//C                                               curl_malloc_callback m,
//C                                               curl_free_callback f,
//C                                               curl_realloc_callback r,
//C                                               curl_strdup_callback s,
//C                                               curl_calloc_callback c);

/**
 * NAME curl_global_cleanup()
 *
 * DESCRIPTION
 *
 * curl_global_cleanup() should be invoked exactly once for each application
 * that uses libcurl
 */
//C     CURL_EXTERN void curl_global_cleanup(void);

/** linked-list structure for the CURLOPT_QUOTE option (and other) */
//C     struct curl_slist {
//C       char *data;
//C       struct curl_slist *next;
//C     };

/**
 * NAME curl_slist_append()
 *
 * DESCRIPTION
 *
 * Appends a string to a linked list. If no list exists, it will be created
 * first. Returns the new list, after appending.
 */
//C     CURL_EXTERN struct curl_slist *curl_slist_append(struct curl_slist *,
//C                                                      const char *);

/**
 * NAME curl_slist_free_all()
 *
 * DESCRIPTION
 *
 * free a previously built curl_slist.
 */
//C     CURL_EXTERN void curl_slist_free_all(struct curl_slist *);

/**
 * NAME curl_getdate()
 *
 * DESCRIPTION
 *
 * Returns the time, in seconds since 1 Jan 1970 of the time string given in
 * the first argument. The time argument in the second parameter is unused
 * and should be set to NULL.
 */
//C     CURL_EXTERN time_t curl_getdate(const char *p, const time_t *unused);

//C     #define CURLINFO_STRING   0x100000
//C     #define CURLINFO_LONG     0x200000
//C     #define CURLINFO_DOUBLE   0x300000
//C     #define CURLINFO_SLIST    0x400000
//C     #define CURLINFO_MASK     0x0fffff
//C     #define CURLINFO_TYPEMASK 0xf00000

//C     typedef enum {
//C       CURLINFO_NONE, /** first, never use this */
//C       CURLINFO_EFFECTIVE_URL    = CURLINFO_STRING + 1,
//C       CURLINFO_RESPONSE_CODE    = CURLINFO_LONG   + 2,
//C       CURLINFO_TOTAL_TIME       = CURLINFO_DOUBLE + 3,
//C       CURLINFO_NAMELOOKUP_TIME  = CURLINFO_DOUBLE + 4,
//C       CURLINFO_CONNECT_TIME     = CURLINFO_DOUBLE + 5,
//C       CURLINFO_PRETRANSFER_TIME = CURLINFO_DOUBLE + 6,
//C       CURLINFO_SIZE_UPLOAD      = CURLINFO_DOUBLE + 7,
//C       CURLINFO_SIZE_DOWNLOAD    = CURLINFO_DOUBLE + 8,
//C       CURLINFO_SPEED_DOWNLOAD   = CURLINFO_DOUBLE + 9,
//C       CURLINFO_SPEED_UPLOAD     = CURLINFO_DOUBLE + 10,
//C       CURLINFO_HEADER_SIZE      = CURLINFO_LONG   + 11,
//C       CURLINFO_REQUEST_SIZE     = CURLINFO_LONG   + 12,
//C       CURLINFO_SSL_VERIFYRESULT = CURLINFO_LONG   + 13,
//C       CURLINFO_FILETIME         = CURLINFO_LONG   + 14,
//C       CURLINFO_CONTENT_LENGTH_DOWNLOAD   = CURLINFO_DOUBLE + 15,
//C       CURLINFO_CONTENT_LENGTH_UPLOAD     = CURLINFO_DOUBLE + 16,
//C       CURLINFO_STARTTRANSFER_TIME = CURLINFO_DOUBLE + 17,
//C       CURLINFO_CONTENT_TYPE     = CURLINFO_STRING + 18,
//C       CURLINFO_REDIRECT_TIME    = CURLINFO_DOUBLE + 19,
//C       CURLINFO_REDIRECT_COUNT   = CURLINFO_LONG   + 20,
//C       CURLINFO_PRIVATE          = CURLINFO_STRING + 21,
//C       CURLINFO_HTTP_CONNECTCODE = CURLINFO_LONG   + 22,
//C       CURLINFO_HTTPAUTH_AVAIL   = CURLINFO_LONG   + 23,
//C       CURLINFO_PROXYAUTH_AVAIL  = CURLINFO_LONG   + 24,
//C       CURLINFO_OS_ERRNO         = CURLINFO_LONG   + 25,
//C       CURLINFO_NUM_CONNECTS     = CURLINFO_LONG   + 26,
//C       CURLINFO_SSL_ENGINES      = CURLINFO_SLIST  + 27,
//C       CURLINFO_COOKIELIST       = CURLINFO_SLIST  + 28,
//C       CURLINFO_LASTSOCKET       = CURLINFO_LONG   + 29,
//C       CURLINFO_FTP_ENTRY_PATH   = CURLINFO_STRING + 30,
  /** Fill in new entries below here! */

//C       CURLINFO_LASTONE          = 30
//C     } CURLINFO;

/** CURLINFO_RESPONSE_CODE is the new name for the option previously known as
   CURLINFO_HTTP_CODE */
//C     #define CURLINFO_HTTP_CODE CURLINFO_RESPONSE_CODE

//C     typedef enum {
//C       CURLCLOSEPOLICY_NONE, /** first, never use this */

//C       CURLCLOSEPOLICY_OLDEST,
//C       CURLCLOSEPOLICY_LEAST_RECENTLY_USED,
//C       CURLCLOSEPOLICY_LEAST_TRAFFIC,
//C       CURLCLOSEPOLICY_SLOWEST,
//C       CURLCLOSEPOLICY_CALLBACK,

//C       CURLCLOSEPOLICY_LAST /** last, never use this */
//C     } curl_closepolicy;

//C     #define CURL_GLOBAL_SSL (1<<0)
//C     #define CURL_GLOBAL_WIN32 (1<<1)
//C     #define CURL_GLOBAL_ALL (CURL_GLOBAL_SSL|CURL_GLOBAL_WIN32)
//C     #define CURL_GLOBAL_NOTHING 0
//C     #define CURL_GLOBAL_DEFAULT CURL_GLOBAL_ALL


/******************************************************************************
 * Setup defines, protos etc for the sharing stuff.
 */

/** Different data locks for a single share */
//C     typedef enum {
//C       CURL_LOCK_DATA_NONE = 0,
  /**  CURL_LOCK_DATA_SHARE is used internaly to say that
   *  the locking is just made to change the internal state of the share
   *  itself.
   */
//C       CURL_LOCK_DATA_SHARE,
//C       CURL_LOCK_DATA_COOKIE,
//C       CURL_LOCK_DATA_DNS,
//C       CURL_LOCK_DATA_SSL_SESSION,
//C       CURL_LOCK_DATA_CONNECT,
//C       CURL_LOCK_DATA_LAST
//C     } curl_lock_data;

/** Different lock access types */
//C     typedef enum {
//C       CURL_LOCK_ACCESS_NONE = 0,   /** unspecified action */
//C       CURL_LOCK_ACCESS_SHARED = 1, /** for read perhaps */
//C       CURL_LOCK_ACCESS_SINGLE = 2, /** for write perhaps */
//C       CURL_LOCK_ACCESS_LAST        /** never use */
//C     } curl_lock_access;

//C     typedef void (*curl_lock_function)(CURL *handle,
//C                                        curl_lock_data data,
//C                                        curl_lock_access locktype,
//C                                        void *userptr);
//C     typedef void (*curl_unlock_function)(CURL *handle,
//C                                          curl_lock_data data,
//C                                          void *userptr);

//C     typedef void CURLSH;

//C     typedef enum {
//C       CURLSHE_OK,  /** all is fine */
//C       CURLSHE_BAD_OPTION, /** 1 */
//C       CURLSHE_IN_USE,     /** 2 */
//C       CURLSHE_INVALID,    /** 3 */
//C       CURLSHE_NOMEM,      /** out of memory */
//C       CURLSHE_LAST /** never use */
//C     } CURLSHcode;

//C     typedef enum {
//C       CURLSHOPT_NONE,  /** don't use */
//C       CURLSHOPT_SHARE,   /** specify a data type to share */
//C       CURLSHOPT_UNSHARE, /** specify shich data type to stop sharing */
//C       CURLSHOPT_LOCKFUNC,   /** pass in a 'curl_lock_function' pointer */
//C       CURLSHOPT_UNLOCKFUNC, /** pass in a 'curl_unlock_function' pointer */
//C       CURLSHOPT_USERDATA,   
/** pass in a user data pointer used in the lock/unlock
                           callback functions */
//C       CURLSHOPT_LAST  /** never use */
//C     } CURLSHoption;

//C     CURL_EXTERN CURLSH *curl_share_init(void);
//C     CURL_EXTERN CURLSHcode curl_share_setopt(CURLSH *, CURLSHoption option, ...);
//C     CURL_EXTERN CURLSHcode curl_share_cleanup(CURLSH *);

/*****************************************************************************
 * Structures for querying information about the curl library at runtime.
 */

//C     typedef enum {
//C       CURLVERSION_FIRST,
//C       CURLVERSION_SECOND,
//C       CURLVERSION_THIRD,
//C       CURLVERSION_LAST /** never actually use this */
//C     } CURLversion;

/** The 'CURLVERSION_NOW' is the symbolic name meant to be used by
   basicly all programs ever, that want to get version information. It is
   meant to be a built-in version number for what kind of struct the caller
   expects. If the struct ever changes, we redefine the NOW to another enum
   from above. */
//C     #define CURLVERSION_NOW CURLVERSION_THIRD

//C     typedef struct {
//C       CURLversion age;          /** age of the returned struct */
//C       const char *version;      /** LIBCURL_VERSION */
//C       unsigned int version_num; /** LIBCURL_VERSION_NUM */
//C       const char *host;         /** OS/host/cpu/machine when configured */
//C       int features;             /** bitmask, see defines below */
//C       const char *ssl_version;  /** human readable string */
//C       long ssl_version_num;     /** not used anymore, always 0 */
//C       const char *libz_version; /** human readable string */
  /** protocols is terminated by an entry with a NULL protoname */
//C       const char * const *protocols;

  /** The fields below this were added in CURLVERSION_SECOND */
//C       const char *ares;
//C       int ares_num;

  /** This field was added in CURLVERSION_THIRD */
//C       const char *libidn;

  /** Same as '_libiconv_version' if built with HAVE_ICONV */
//C       int iconv_ver_num;
//C     } curl_version_info_data;

//C     #define CURL_VERSION_IPV6      (1<<0)  /** IPv6-enabled */
//C     #define CURL_VERSION_KERBEROS4 (1<<1)  /** kerberos auth is supported */
//C     #define CURL_VERSION_SSL       (1<<2)  /** SSL options are present */
//C     #define CURL_VERSION_LIBZ      (1<<3)  /** libz features are present */
//C     #define CURL_VERSION_NTLM      (1<<4)  /** NTLM auth is supported */
//C     #define CURL_VERSION_GSSNEGOTIATE (1<<5) /** Negotiate auth support */
//C     #define CURL_VERSION_DEBUG     (1<<6)  /** built with debug capabilities */
//C     #define CURL_VERSION_ASYNCHDNS (1<<7)  /** asynchronous dns resolves */
//C     #define CURL_VERSION_SPNEGO    (1<<8)  /** SPNEGO auth */
//C     #define CURL_VERSION_LARGEFILE (1<<9)  /** supports files bigger than 2GB */
//C     #define CURL_VERSION_IDN       (1<<10) /** International Domain Names support */
//C     #define CURL_VERSION_SSPI      (1<<11) /** SSPI is supported */
//C     #define CURL_VERSION_CONV      (1<<12) 
/** character conversions are
                                          supported */

/**
 * NAME curl_version_info()
 *
 * DESCRIPTION
 *
 * This function returns a pointer to a static copy of the version info
 * struct. See above.
 */
//C     CURL_EXTERN curl_version_info_data *curl_version_info(CURLversion);

/**
 * NAME curl_easy_strerror()
 *
 * DESCRIPTION
 *
 * The curl_easy_strerror function may be used to turn a CURLcode value
 * into the equivalent human readable error string.  This is useful
 * for printing meaningful error messages.
 */
//C     CURL_EXTERN const char *curl_easy_strerror(CURLcode);

/**
 * NAME curl_share_strerror()
 *
 * DESCRIPTION
 *
 * The curl_share_strerror function may be used to turn a CURLSHcode value
 * into the equivalent human readable error string.  This is useful
 * for printing meaningful error messages.
 */
//C     CURL_EXTERN const char *curl_share_strerror(CURLSHcode);

//C     #ifdef  __cplusplus
//C     }
//C     #endif

/** unfortunately, the easy.h and multi.h include files need options and info
  stuff before they can be included! */
//C     #include "easy.h" /** nothing in curl is fun without the easy stuff */
//C     #include "multi.h"

//C     #endif /** __CURL_CURL_H */

//C     #ifdef  __cplusplus
//C     extern "C" {
//C     #endif

//C     typedef void CURLM;
alias void CURLM;

//C     typedef enum {
//C       CURLM_CALL_MULTI_PERFORM = -1, 
/** please call curl_multi_perform() or
                                    curl_multi_socket*() soon */
//C       CURLM_OK,
//C       CURLM_BAD_HANDLE,      /** the passed-in handle is not a valid CURLM handle */
//C       CURLM_BAD_EASY_HANDLE, /** an easy handle was not good/valid */
//C       CURLM_OUT_OF_MEMORY,   /** if you ever get this, you're in deep sh*t */
//C       CURLM_INTERNAL_ERROR,  /** this is a libcurl bug */
//C       CURLM_BAD_SOCKET,      /** the passed in socket argument did not match */
//C       CURLM_UNKNOWN_OPTION,  /** curl_multi_setopt() with unsupported option */
//C       CURLM_LAST
//C     } CURLMcode;
enum
{
    CURLM_CALL_MULTI_PERFORM = -1,
    CURLM_OK,
    CURLM_BAD_HANDLE,
    CURLM_BAD_EASY_HANDLE,
    CURLM_OUT_OF_MEMORY,
    CURLM_INTERNAL_ERROR,
    CURLM_BAD_SOCKET,
    CURLM_UNKNOWN_OPTION,
    CURLM_LAST,
}
alias int CURLMcode;

/** just to make code nicer when using curl_multi_socket() you can now check
   for CURLM_CALL_MULTI_SOCKET too in the same style it works for
   curl_multi_perform() and CURLM_CALL_MULTI_PERFORM */
//C     #define CURLM_CALL_MULTI_SOCKET CURLM_CALL_MULTI_PERFORM

alias CURLM_CALL_MULTI_PERFORM CURLM_CALL_MULTI_SOCKET;
//C     typedef enum {
//C       CURLMSG_NONE, /** first, not used */
//C       CURLMSG_DONE, 
/** This easy handle has completed. 'result' contains
                   the CURLcode of the transfer */
//C       CURLMSG_LAST /** last, not used */
//C     } CURLMSG;
enum
{
    CURLMSG_NONE,
    CURLMSG_DONE,
    CURLMSG_LAST,
}
alias int CURLMSG;

//C     struct CURLMsg {
//C       CURLMSG msg;       /** what this message means */
//C       CURL *easy_handle; /** the handle it concerns */
//C       union {
//C         void *whatever;    /** message-specific data */
//C         CURLcode result;   /** return code for transfer */
//C       } data;
union _N135
{
    void *whatever;
    CURLcode result;
}
//C     };
struct CURLMsg
{
    CURLMSG msg;
    CURL *easy_handle;
    _N135 data;
}
//C     typedef struct CURLMsg CURLMsg;

/**
 * Name:    curl_multi_init()
 *
 * Desc:    inititalize multi-style curl usage
 *
 * Returns: a new CURLM handle to use in all 'curl_multi' functions.
 */
//C     CURL_EXTERN CURLM *curl_multi_init(void);
CURLM * curl_multi_init();

/**
 * Name:    curl_multi_add_handle()
 *
 * Desc:    add a standard curl handle to the multi stack
 *
 * Returns: CURLMcode type, general multi error code.
 */
//C     CURL_EXTERN CURLMcode curl_multi_add_handle(CURLM *multi_handle,
//C                                                 CURL *curl_handle);
CURLMcode  curl_multi_add_handle(CURLM *multi_handle, CURL *curl_handle);

 /**
  * Name:    curl_multi_remove_handle()
  *
  * Desc:    removes a curl handle from the multi stack again
  *
  * Returns: CURLMcode type, general multi error code.
  */
//C     CURL_EXTERN CURLMcode curl_multi_remove_handle(CURLM *multi_handle,
//C                                                    CURL *curl_handle);
CURLMcode  curl_multi_remove_handle(CURLM *multi_handle, CURL *curl_handle);

 /**
  * Name:    curl_multi_fdset()
  *
  * Desc:    Ask curl for its fd_set sets. The app can use these to select() or
  *          poll() on. We want curl_multi_perform() called as soon as one of
  *          them are ready.
  *
  * Returns: CURLMcode type, general multi error code.
  */
//C     CURL_EXTERN CURLMcode curl_multi_fdset(CURLM *multi_handle,
//C                                            fd_set *read_fd_set,
//C                                            fd_set *write_fd_set,
//C                                            fd_set *exc_fd_set,
//C                                            int *max_fd);
CURLMcode  curl_multi_fdset(CURLM *multi_handle, fd_set *read_fd_set, fd_set *write_fd_set, fd_set *exc_fd_set, int *max_fd);

 /**
  * Name:    curl_multi_perform()
  *
  * Desc:    When the app thinks there's data available for curl it calls this
  *          function to read/write whatever there is right now. This returns
  *          as soon as the reads and writes are done. This function does not
  *          require that there actually is data available for reading or that
  *          data can be written, it can be called just in case. It returns
  *          the number of handles that still transfer data in the second
  *          argument's integer-pointer.
  *
  * Returns: CURLMcode type, general multi error code. *NOTE* that this only
  *          returns errors etc regarding the whole multi stack. There might
  *          still have occurred problems on invidual transfers even when this
  *          returns OK.
  */
//C     CURL_EXTERN CURLMcode curl_multi_perform(CURLM *multi_handle,
//C                                              int *running_handles);
CURLMcode  curl_multi_perform(CURLM *multi_handle, int *running_handles);

 /**
  * Name:    curl_multi_cleanup()
  *
  * Desc:    Cleans up and removes a whole multi stack. It does not free or
  *          touch any individual easy handles in any way. We need to define
  *          in what state those handles will be if this function is called
  *          in the middle of a transfer.
  *
  * Returns: CURLMcode type, general multi error code.
  */
//C     CURL_EXTERN CURLMcode curl_multi_cleanup(CURLM *multi_handle);
CURLMcode  curl_multi_cleanup(CURLM *multi_handle);

/**
 * Name:    curl_multi_info_read()
 *
 * Desc:    Ask the multi handle if there's any messages/informationals from
 *          the individual transfers. Messages include informationals such as
 *          error code from the transfer or just the fact that a transfer is
 *          completed. More details on these should be written down as well.
 *
 *          Repeated calls to this function will return a new struct each
 *          time, until a special "end of msgs" struct is returned as a signal
 *          that there is no more to get at this point.
 *
 *          The data the returned pointer points to will not survive calling
 *          curl_multi_cleanup().
 *
 *          The 'CURLMsg' struct is meant to be very simple and only contain
 *          very basic informations. If more involved information is wanted,
 *          we will provide the particular "transfer handle" in that struct
 *          and that should/could/would be used in subsequent
 *          curl_easy_getinfo() calls (or similar). The point being that we
 *          must never expose complex structs to applications, as then we'll
 *          undoubtably get backwards compatibility problems in the future.
 *
 * Returns: A pointer to a filled-in struct, or NULL if it failed or ran out
 *          of structs. It also writes the number of messages left in the
 *          queue (after this read) in the integer the second argument points
 *          to.
 */
//C     CURL_EXTERN CURLMsg *curl_multi_info_read(CURLM *multi_handle,
//C                                               int *msgs_in_queue);
CURLMsg * curl_multi_info_read(CURLM *multi_handle, int *msgs_in_queue);

/**
 * Name:    curl_multi_strerror()
 *
 * Desc:    The curl_multi_strerror function may be used to turn a CURLMcode
 *          value into the equivalent human readable error string.  This is
 *          useful for printing meaningful error messages.
 *
 * Returns: A pointer to a zero-terminated error message.
 */
//C     CURL_EXTERN const char *curl_multi_strerror(CURLMcode);
char * curl_multi_strerror(CURLMcode );

/**
 * Name:    curl_multi_socket() and
 *          curl_multi_socket_all()
 *
 * Desc:    An alternative version of curl_multi_perform() that allows the
 *          application to pass in one of the file descriptors that have been
 *          detected to have "action" on them and let libcurl perform.
 *          See man page for details.
 */
//C     #define CURL_POLL_NONE   0
//C     #define CURL_POLL_IN     1
const CURL_POLL_NONE = 0;
//C     #define CURL_POLL_OUT    2
const CURL_POLL_IN = 1;
//C     #define CURL_POLL_INOUT  3
const CURL_POLL_OUT = 2;
//C     #define CURL_POLL_REMOVE 4
const CURL_POLL_INOUT = 3;

const CURL_POLL_REMOVE = 4;
//C     #define CURL_SOCKET_TIMEOUT CURL_SOCKET_BAD

alias CURL_SOCKET_BAD CURL_SOCKET_TIMEOUT;
//C     typedef int (*curl_socket_callback)(CURL *easy,      /** easy handle */
//C                                         curl_socket_t s, /** socket */
//C                                         int what,        /** see above */
//C                                         void *userp,     
/** private callback
                                                        pointer */
//C                                         void *socketp);  
/** private socket
alias int  function(CURL *easy, curl_socket_t s, int what, void *userp, void *socketp)curl_socket_callback;
                                                        pointer */
/**
 * Name:    curl_multi_timer_callback
 *
 * Desc:    Called by libcurl whenever the library detects a change in the
 *          maximum number of milliseconds the app is allowed to wait before
 *          curl_multi_socket() or curl_multi_perform() must be called
 *          (to allow libcurl's timed events to take place).
 *
 * Returns: The callback should return zero.
 */
//C     typedef int (*curl_multi_timer_callback)(CURLM *multi,    /** multi handle */
//C                                              long timeout_ms, /** see above */
//C                                              void *userp);    
/** private callback
alias int  function(CURLM *multi, int timeout_ms, void *userp)curl_multi_timer_callback;
                                                             pointer */

//C     CURL_EXTERN CURLMcode curl_multi_socket(CURLM *multi_handle, curl_socket_t s,
//C                                             int *running_handles);
CURLMcode  curl_multi_socket(CURLM *multi_handle, curl_socket_t s, int *running_handles);

//C     CURL_EXTERN CURLMcode curl_multi_socket_all(CURLM *multi_handle,
//C                                                 int *running_handles);
CURLMcode  curl_multi_socket_all(CURLM *multi_handle, int *running_handles);

/**
 * Name:    curl_multi_timeout()
 *
 * Desc:    Returns the maximum number of milliseconds the app is allowed to
 *          wait before curl_multi_socket() or curl_multi_perform() must be
 *          called (to allow libcurl's timed events to take place).
 *
 * Returns: CURLM error code.
 */
//C     CURL_EXTERN CURLMcode curl_multi_timeout(CURLM *multi_handle,
//C                                              long *milliseconds);
CURLMcode  curl_multi_timeout(CURLM *multi_handle, int *milliseconds);

//C     #undef CINIT /** re-using the same name as in curl.h */

//C     #ifdef CURL_ISOCPP
//C     #define CINIT(name,type,number) CURLMOPT_ ## name = CURLOPTTYPE_ ## type + number
//C     #else
/** The macro "##" is ISO C, we assume pre-ISO C doesn't support it. */
//C     #define LONG          CURLOPTTYPE_LONG
//C     #define OBJECTPOINT   CURLOPTTYPE_OBJECTPOINT
//C     #define FUNCTIONPOINT CURLOPTTYPE_FUNCTIONPOINT
//C     #define OFF_T         CURLOPTTYPE_OFF_T
//C     #define CINIT(name,type,number) CURLMOPT_/***/name = type + number
//C     #endif

//C     typedef enum {
  /** This is the socket callback function pointer */
//C       CINIT(SOCKETFUNCTION, FUNCTIONPOINT, 1),

  /** This is the argument passed to the socket callback */
//C       CINIT(SOCKETDATA, OBJECTPOINT, 2),

    /** set to 1 to enable pipelining for this multi handle */
//C       CINIT(PIPELINING, LONG, 3),

   /** This is the timer callback function pointer */
//C       CINIT(TIMERFUNCTION, FUNCTIONPOINT, 4),

  /** This is the argument passed to the timer callback */
//C       CINIT(TIMERDATA, OBJECTPOINT, 5),

//C       CURLMOPT_LASTENTRY /** the last unused */
//C     } CURLMoption;
enum
{
    CURLMOPT_SOCKETFUNCTION = 20001,
    CURLMOPT_SOCKETDATA = 10002,
    CURLMOPT_PIPELINING = 3,
    CURLMOPT_TIMERFUNCTION = 20004,
    CURLMOPT_TIMERDATA = 10005,
    CURLMOPT_LASTENTRY,
}
alias int CURLMoption;


/**
 * Name:    curl_multi_setopt()
 *
 * Desc:    Sets options for the multi handle.
 *
 * Returns: CURLM error code.
 */
//C     CURL_EXTERN CURLMcode curl_multi_setopt(CURLM *multi_handle,
//C                                             CURLMoption option, ...);
CURLMcode  curl_multi_setopt(CURLM *multi_handle, CURLMoption option,...);


/**
 * Name:    curl_multi_assign()
 *
 * Desc:    This function sets an association in the multi handle between the
 *          given socket and a private pointer of the application. This is
 *          (only) useful for curl_multi_socket uses.
 *
 * Returns: CURLM error code.
 */
//C     CURL_EXTERN CURLMcode curl_multi_assign(CURLM *multi_handle,
//C                                             curl_socket_t sockfd, void *sockp);
CURLMcode  curl_multi_assign(CURLM *multi_handle, curl_socket_t sockfd, void *sockp);

//C     #ifdef __cplusplus
//C     } /** end of extern "C" */
//C     #endif

//C     #endif

//C     #endif /** __CURL_CURL_H */

version (build) {
    debug {
        pragma(link, "debug-ydb");
    } else {
        pragma(link, "ydb");
    }
}
